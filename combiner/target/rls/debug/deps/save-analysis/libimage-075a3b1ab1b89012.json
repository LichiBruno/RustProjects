{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2","program":"/home/lichi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","image","--edition=2018","/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"dds\"","--cfg","feature=\"default\"","--cfg","feature=\"dxt\"","--cfg","feature=\"exr\"","--cfg","feature=\"farbfeld\"","--cfg","feature=\"gif\"","--cfg","feature=\"hdr\"","--cfg","feature=\"ico\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"jpeg_rayon\"","--cfg","feature=\"openexr\"","--cfg","feature=\"png\"","--cfg","feature=\"pnm\"","--cfg","feature=\"scoped_threadpool\"","--cfg","feature=\"tga\"","--cfg","feature=\"tiff\"","--cfg","feature=\"webp\"","-C","metadata=075a3b1ab1b89012","-C","extra-filename=-075a3b1ab1b89012","--out-dir","/home/lichi/projects/combiner/target/rls/debug/deps","-L","dependency=/home/lichi/projects/combiner/target/rls/debug/deps","--extern","bytemuck=/home/lichi/projects/combiner/target/rls/debug/deps/libbytemuck-99e7665d392d975e.rmeta","--extern","byteorder=/home/lichi/projects/combiner/target/rls/debug/deps/libbyteorder-1b781af50bd92774.rmeta","--extern","color_quant=/home/lichi/projects/combiner/target/rls/debug/deps/libcolor_quant-113247e362a66fe0.rmeta","--extern","exr=/home/lichi/projects/combiner/target/rls/debug/deps/libexr-6da98ba369a1cf4a.rmeta","--extern","gif=/home/lichi/projects/combiner/target/rls/debug/deps/libgif-8e78dfb8c4575aeb.rmeta","--extern","jpeg=/home/lichi/projects/combiner/target/rls/debug/deps/libjpeg_decoder-6c42fc85bbd84556.rmeta","--extern","num_iter=/home/lichi/projects/combiner/target/rls/debug/deps/libnum_iter-54dde3e5374b2e0a.rmeta","--extern","num_rational=/home/lichi/projects/combiner/target/rls/debug/deps/libnum_rational-f52a2f75084c54b5.rmeta","--extern","num_traits=/home/lichi/projects/combiner/target/rls/debug/deps/libnum_traits-b520901e25c99381.rmeta","--extern","png=/home/lichi/projects/combiner/target/rls/debug/deps/libpng-e0c623b6d87930be.rmeta","--extern","scoped_threadpool=/home/lichi/projects/combiner/target/rls/debug/deps/libscoped_threadpool-9a5e293cbf062b5d.rmeta","--extern","tiff=/home/lichi/projects/combiner/target/rls/debug/deps/libtiff-c0df5cdad8aaab74.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/lichi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/lichi/projects/combiner/target/rls/debug/deps/libimage-075a3b1ab1b89012.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[22755743743022825,0]},"crate_root":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src","external_crates":[{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14026078687029744792,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5560808256873132085,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[135160560163186024,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5800521777261530329,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7095478770525139037,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[17225897750877482818,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[15613653607383163471,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[12428323400248712701,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[11893279639181573711,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[13583305032161054644,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[16609837797022023111,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":15,"id":{"name":"object","disambiguator":[18098459435141129808,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[15244551393771456017,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":17,"id":{"name":"miniz_oxide","disambiguator":[6576340271055396708,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":18,"id":{"name":"adler","disambiguator":[15284510821186066958,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[12982807908830018159,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":20,"id":{"name":"exr","disambiguator":[5283669509133177202,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":21,"id":{"name":"smallvec","disambiguator":[2348492942480733509,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":22,"id":{"name":"half","disambiguator":[9546535355845374684,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":23,"id":{"name":"lebe","disambiguator":[11294292862365901156,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":24,"id":{"name":"deflate","disambiguator":[11898551080906330434,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":25,"id":{"name":"adler32","disambiguator":[9214762285076270716,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":26,"id":{"name":"inflate","disambiguator":[14675775291309597783,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":27,"id":{"name":"bit_field","disambiguator":[9152022449340262825,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":28,"id":{"name":"threadpool","disambiguator":[17316743140132040442,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":29,"id":{"name":"num_cpus","disambiguator":[16560888775637002780,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":30,"id":{"name":"libc","disambiguator":[12560105563294302132,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":31,"id":{"name":"flume","disambiguator":[1692577361988258904,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":32,"id":{"name":"nanorand","disambiguator":[2088465329525197743,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":33,"id":{"name":"getrandom","disambiguator":[1931604243156065503,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":34,"id":{"name":"cfg_if","disambiguator":[1004283514336169005,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":35,"id":{"name":"futures_core","disambiguator":[1150202532660626631,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":36,"id":{"name":"futures_sink","disambiguator":[10473663214796386033,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":37,"id":{"name":"pin_project","disambiguator":[4485201978120949981,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":38,"id":{"name":"pin_project_internal","disambiguator":[11137594152445335963,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":39,"id":{"name":"spin","disambiguator":[11917244109509819835,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":40,"id":{"name":"lock_api","disambiguator":[11994815419998842249,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":41,"id":{"name":"scopeguard","disambiguator":[6845241270465700697,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":42,"id":{"name":"tiff","disambiguator":[1898387452815721010,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","num":43,"id":{"name":"jpeg_decoder","disambiguator":[8504690428951283637,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":44,"id":{"name":"rayon","disambiguator":[3872816210701562059,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":45,"id":{"name":"either","disambiguator":[4415802574558717629,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":46,"id":{"name":"rayon_core","disambiguator":[4810061084519933890,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":47,"id":{"name":"crossbeam_channel","disambiguator":[7776731432217755517,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":48,"id":{"name":"crossbeam_utils","disambiguator":[6443536939578642150,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":49,"id":{"name":"lazy_static","disambiguator":[9708727071027780738,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":50,"id":{"name":"crossbeam_deque","disambiguator":[8156582553416666305,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":51,"id":{"name":"crossbeam_epoch","disambiguator":[7571158957769905963,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":52,"id":{"name":"memoffset","disambiguator":[18135763014048367315,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":53,"id":{"name":"weezl","disambiguator":[2877701607137587169,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":54,"id":{"name":"flate2","disambiguator":[3881708813331556018,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":55,"id":{"name":"crc32fast","disambiguator":[13555655307553806865,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":56,"id":{"name":"miniz_oxide","disambiguator":[7409295686518394775,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","num":57,"id":{"name":"adler","disambiguator":[15551326393850230296,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","num":58,"id":{"name":"num_traits","disambiguator":[11293099483745778842,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","num":59,"id":{"name":"byteorder","disambiguator":[13952539509813365488,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","num":60,"id":{"name":"gif","disambiguator":[3423929125194959962,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","num":61,"id":{"name":"color_quant","disambiguator":[3230523111030603819,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","num":62,"id":{"name":"num_rational","disambiguator":[3590972753488680669,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","num":63,"id":{"name":"num_integer","disambiguator":[14287495311771682990,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","num":64,"id":{"name":"scoped_threadpool","disambiguator":[11422021602527162239,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","num":65,"id":{"name":"num_iter","disambiguator":[3583250198150144236,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","num":66,"id":{"name":"png","disambiguator":[11835418218183596989,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","num":67,"id":{"name":"bitflags","disambiguator":[15917436305182542096,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","num":68,"id":{"name":"bytemuck","disambiguator":[3824981217086855319,0]}}],"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":0,"byte_end":9202,"line_start":1,"line_end":276,"column_start":1,"column_end":46}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":7890},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3983,"byte_end":3992,"line_start":104,"line_end":104,"column_start":24,"column_end":33},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":7925},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3994,"byte_end":4011,"line_start":104,"line_end":104,"column_start":35,"column_end":52},"alias_span":null,"name":"ExtendedColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8211},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4038,"byte_end":4042,"line_start":106,"line_end":106,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8212},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4038,"byte_end":4042,"line_start":106,"line_end":106,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8269},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4044,"byte_end":4049,"line_start":106,"line_end":106,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8270},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4044,"byte_end":4049,"line_start":106,"line_end":106,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8182},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4051,"byte_end":4054,"line_start":106,"line_end":106,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8183},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4051,"byte_end":4054,"line_start":106,"line_end":106,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8240},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4056,"byte_end":4060,"line_start":106,"line_end":106,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8241},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4056,"byte_end":4060,"line_start":106,"line_end":106,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6161},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4087,"byte_end":4097,"line_start":108,"line_end":108,"column_start":24,"column_end":34},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":189},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4099,"byte_end":4110,"line_start":108,"line_end":108,"column_start":36,"column_end":47},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5914},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4142,"byte_end":4158,"line_start":111,"line_end":111,"column_start":5,"column_end":21},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5938},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4164,"byte_end":4176,"line_start":112,"line_end":112,"column_start":5,"column_end":17},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5927},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4182,"byte_end":4198,"line_start":113,"line_end":113,"column_start":5,"column_end":21},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5894},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4204,"byte_end":4216,"line_start":114,"line_end":114,"column_start":5,"column_end":17},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5908},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4222,"byte_end":4238,"line_start":115,"line_end":115,"column_start":5,"column_end":21},"alias_span":null,"name":"ImageDecoderRect","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5917},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4244,"byte_end":4256,"line_start":116,"line_end":116,"column_start":5,"column_end":17},"alias_span":null,"name":"ImageEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8352},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4262,"byte_end":4273,"line_start":117,"line_end":117,"column_start":5,"column_end":16},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8395},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4279,"byte_end":4296,"line_start":118,"line_end":118,"column_start":5,"column_end":22},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8447},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4319,"byte_end":4325,"line_start":120,"line_end":120,"column_start":5,"column_end":11},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8432},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4331,"byte_end":4339,"line_start":121,"line_end":121,"column_start":5,"column_end":13},"alias_span":null,"name":"Progress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8459},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4345,"byte_end":4353,"line_start":122,"line_end":122,"column_start":5,"column_end":13},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5327},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4389,"byte_end":4403,"line_start":126,"line_end":126,"column_start":5,"column_end":19},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5326},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4409,"byte_end":4418,"line_start":127,"line_end":127,"column_start":5,"column_end":14},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":7859},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4443,"byte_end":4454,"line_start":129,"line_end":129,"column_start":5,"column_end":16},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5332},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4460,"byte_end":4471,"line_start":130,"line_end":130,"column_start":5,"column_end":16},"alias_span":null,"name":"Rgb32FImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5324},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4477,"byte_end":4485,"line_start":131,"line_end":131,"column_start":5,"column_end":13},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5333},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4491,"byte_end":4503,"line_start":132,"line_end":132,"column_start":5,"column_end":17},"alias_span":null,"name":"Rgba32FImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5325},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4509,"byte_end":4518,"line_start":133,"line_end":133,"column_start":5,"column_end":14},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6372},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4545,"byte_end":4556,"line_start":136,"line_end":136,"column_start":22,"column_end":33},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6016},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4593,"byte_end":4608,"line_start":139,"line_end":139,"column_start":25,"column_end":40},"alias_span":null,"name":"EncodableLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6103},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4610,"byte_end":4615,"line_start":139,"line_end":139,"column_start":42,"column_end":47},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6068},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4617,"byte_end":4635,"line_start":139,"line_end":139,"column_start":49,"column_end":67},"alias_span":null,"name":"PixelWithColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":6024},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4637,"byte_end":4646,"line_start":139,"line_end":139,"column_start":69,"column_end":78},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5771},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4711,"byte_end":4727,"line_start":143,"line_end":143,"column_start":5,"column_end":21},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5780},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4729,"byte_end":4745,"line_start":143,"line_end":143,"column_start":23,"column_end":39},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5781},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4747,"byte_end":4775,"line_start":143,"line_end":143,"column_start":41,"column_end":69},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5769},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4777,"byte_end":4781,"line_start":143,"line_end":143,"column_start":71,"column_end":75},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5773},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4783,"byte_end":4794,"line_start":143,"line_end":143,"column_start":77,"column_end":88},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5775},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4800,"byte_end":4823,"line_start":144,"line_end":144,"column_start":5,"column_end":28},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5777},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4825,"byte_end":4849,"line_start":144,"line_end":144,"column_start":30,"column_end":54},"alias_span":null,"name":"write_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":827},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4890,"byte_end":4902,"line_start":146,"line_end":146,"column_start":37,"column_end":49},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":789},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4904,"byte_end":4908,"line_start":146,"line_end":146,"column_start":51,"column_end":55},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":8298},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4937,"byte_end":4949,"line_start":148,"line_end":148,"column_start":26,"column_end":38},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":7843},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4979,"byte_end":4984,"line_start":150,"line_end":150,"column_start":28,"column_end":33},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":7836},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4986,"byte_end":4991,"line_start":150,"line_end":150,"column_start":35,"column_end":40},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":4885},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":4993,"byte_end":4999,"line_start":150,"line_end":150,"column_start":42,"column_end":48},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":5311},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5222,"byte_end":5235,"line_start":159,"line_end":159,"column_start":9,"column_end":22},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":5121},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5237,"byte_end":5252,"line_start":159,"line_end":159,"column_start":24,"column_end":39},"alias_span":null,"name":"EnumeratePixels","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":5166},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5254,"byte_end":5272,"line_start":159,"line_end":159,"column_start":41,"column_end":59},"alias_span":null,"name":"EnumeratePixelsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":5144},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5274,"byte_end":5287,"line_start":159,"line_end":159,"column_start":61,"column_end":74},"alias_span":null,"name":"EnumerateRows","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":5186},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5289,"byte_end":5305,"line_start":159,"line_end":159,"column_start":76,"column_end":92},"alias_span":null,"name":"EnumerateRowsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":5023},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5315,"byte_end":5321,"line_start":160,"line_end":160,"column_start":9,"column_end":15},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":5048},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5323,"byte_end":5332,"line_start":160,"line_end":160,"column_start":17,"column_end":26},"alias_span":null,"name":"PixelsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":5070},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5334,"byte_end":5338,"line_start":160,"line_end":160,"column_start":28,"column_end":32},"alias_span":null,"name":"Rows","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":5097},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5340,"byte_end":5347,"line_start":160,"line_end":160,"column_start":34,"column_end":41},"alias_span":null,"name":"RowsMut","value":"","parent":{"krate":0,"index":215}},{"kind":"Use","ref_id":{"krate":0,"index":6293},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/mod.rs","byte_start":26369,"byte_end":26373,"line_start":5,"line_end":5,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":244}},{"kind":"Use","ref_id":{"krate":0,"index":6318},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31436,"byte_end":31446,"line_start":7,"line_end":7,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6323},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31484,"byte_end":31494,"line_start":9,"line_end":9,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6324},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31484,"byte_end":31494,"line_start":9,"line_end":9,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6325},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31496,"byte_end":31504,"line_start":9,"line_end":9,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6326},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31496,"byte_end":31504,"line_start":9,"line_end":9,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6327},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31506,"byte_end":31514,"line_start":9,"line_end":9,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6328},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31506,"byte_end":31514,"line_start":9,"line_end":9,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6319},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31516,"byte_end":31523,"line_start":9,"line_end":9,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6320},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31516,"byte_end":31523,"line_start":9,"line_end":9,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6321},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31525,"byte_end":31533,"line_start":9,"line_end":9,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6322},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31525,"byte_end":31533,"line_start":9,"line_end":9,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":432},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31592,"byte_end":31607,"line_start":13,"line_end":13,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":436},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31609,"byte_end":31627,"line_start":13,"line_end":13,"column_start":22,"column_end":40},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":444},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31629,"byte_end":31653,"line_start":13,"line_end":13,"column_start":42,"column_end":66},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":434},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31655,"byte_end":31668,"line_start":13,"line_end":13,"column_start":68,"column_end":81},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":439},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31670,"byte_end":31686,"line_start":13,"line_end":13,"column_start":83,"column_end":99},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":446},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31692,"byte_end":31714,"line_start":14,"line_end":14,"column_start":5,"column_end":27},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":419},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31716,"byte_end":31725,"line_start":14,"line_end":14,"column_start":29,"column_end":38},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":426},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31727,"byte_end":31739,"line_start":14,"line_end":14,"column_start":40,"column_end":52},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":442},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31741,"byte_end":31759,"line_start":14,"line_end":14,"column_start":54,"column_end":72},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":421},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31761,"byte_end":31770,"line_start":14,"line_end":14,"column_start":74,"column_end":83},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":429},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31772,"byte_end":31784,"line_start":14,"line_end":14,"column_start":85,"column_end":97},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":417},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31790,"byte_end":31798,"line_start":15,"line_end":15,"column_start":5,"column_end":13},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":423},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31800,"byte_end":31811,"line_start":15,"line_end":15,"column_start":15,"column_end":26},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":675},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31859,"byte_end":31863,"line_start":19,"line_end":19,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":668},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31865,"byte_end":31874,"line_start":19,"line_end":19,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":673},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31876,"byte_end":31882,"line_start":19,"line_end":19,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":645},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31884,"byte_end":31893,"line_start":19,"line_end":19,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":678},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31895,"byte_end":31904,"line_start":19,"line_end":19,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":513},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31959,"byte_end":31967,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":505},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31969,"byte_end":31977,"line_start":23,"line_end":23,"column_start":15,"column_end":23},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":554},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31979,"byte_end":31985,"line_start":23,"line_end":23,"column_start":25,"column_end":31},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":493},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31987,"byte_end":31996,"line_start":23,"line_end":23,"column_start":33,"column_end":42},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":495},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31998,"byte_end":32013,"line_start":23,"line_end":23,"column_start":44,"column_end":59},"alias_span":null,"name":"grayscale_alpha","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":497},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32015,"byte_end":32034,"line_start":23,"line_end":23,"column_start":61,"column_end":80},"alias_span":null,"name":"grayscale_with_type","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":500},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32040,"byte_end":32065,"line_start":24,"line_end":24,"column_start":5,"column_end":30},"alias_span":null,"name":"grayscale_with_type_alpha","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":523},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32067,"byte_end":32076,"line_start":24,"line_end":24,"column_start":32,"column_end":41},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":559},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32078,"byte_end":32090,"line_start":24,"line_end":24,"column_start":43,"column_end":55},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":503},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32092,"byte_end":32098,"line_start":24,"line_end":24,"column_start":57,"column_end":63},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6313},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32100,"byte_end":32107,"line_start":24,"line_end":24,"column_start":65,"column_end":72},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":6314},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32100,"byte_end":32107,"line_start":24,"line_end":24,"column_start":65,"column_end":72},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":531},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32109,"byte_end":32117,"line_start":24,"line_end":24,"column_start":74,"column_end":82},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":257}},{"kind":"Use","ref_id":{"krate":0,"index":884},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":110871,"byte_end":110877,"line_start":10,"line_end":10,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":710}},{"kind":"Use","ref_id":{"krate":0,"index":1318},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","byte_start":200038,"byte_end":200048,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BmpDecoder","value":"","parent":{"krate":0,"index":1143}},{"kind":"Use","ref_id":{"krate":0,"index":1464},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","byte_start":200073,"byte_end":200083,"line_start":11,"line_end":11,"column_start":24,"column_end":34},"alias_span":null,"name":"BmpEncoder","value":"","parent":{"krate":0,"index":1143}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":351481,"byte_end":351482,"line_start":14,"line_end":14,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"SIGNATURE, rgbe8, HdrAdapter, Rgbe8Pixel","parent":{"krate":0,"index":2050}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":351507,"byte_end":351508,"line_start":15,"line_end":15,"column_start":24,"column_end":25},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":2050}},{"kind":"Use","ref_id":{"krate":0,"index":2462},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","byte_start":404016,"byte_end":404026,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"IcoDecoder","value":"","parent":{"krate":0,"index":2362}},{"kind":"Use","ref_id":{"krate":0,"index":2554},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","byte_start":404073,"byte_end":404083,"line_start":11,"line_end":11,"column_start":25,"column_end":35},"alias_span":null,"name":"IcoEncoder","value":"","parent":{"krate":0,"index":2362}},{"kind":"Use","ref_id":{"krate":0,"index":2557},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","byte_start":404085,"byte_end":404093,"line_start":11,"line_end":11,"column_start":37,"column_end":45},"alias_span":null,"name":"IcoFrame","value":"","parent":{"krate":0,"index":2362}},{"kind":"Use","ref_id":{"krate":0,"index":2640},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430413,"byte_end":430424,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":2580}},{"kind":"Use","ref_id":{"krate":0,"index":2813},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430450,"byte_end":430461,"line_start":11,"line_end":11,"column_start":25,"column_end":36},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":2580}},{"kind":"Use","ref_id":{"krate":0,"index":7023},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430463,"byte_end":430475,"line_start":11,"line_end":11,"column_start":38,"column_end":50},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":2580}},{"kind":"Use","ref_id":{"krate":0,"index":7005},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430477,"byte_end":430493,"line_start":11,"line_end":11,"column_start":52,"column_end":68},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":2580}},{"kind":"Use","ref_id":{"krate":0,"index":3436},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":562893,"byte_end":562903,"line_start":7,"line_end":7,"column_start":24,"column_end":34},"alias_span":null,"name":"PnmDecoder","value":"","parent":{"krate":0,"index":3233}},{"kind":"Use","ref_id":{"krate":0,"index":3621},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":562928,"byte_end":562938,"line_start":8,"line_end":8,"column_start":24,"column_end":34},"alias_span":null,"name":"PnmEncoder","value":"","parent":{"krate":0,"index":3233}},{"kind":"Use","ref_id":{"krate":0,"index":7325},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":563000,"byte_end":563015,"line_start":11,"line_end":11,"column_start":5,"column_end":20},"alias_span":null,"name":"ArbitraryHeader","value":"","parent":{"krate":0,"index":3233}},{"kind":"Use","ref_id":{"krate":0,"index":7335},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":563017,"byte_end":563034,"line_start":11,"line_end":11,"column_start":22,"column_end":39},"alias_span":null,"name":"ArbitraryTuplType","value":"","parent":{"krate":0,"index":3233}},{"kind":"Use","ref_id":{"krate":0,"index":7296},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":563036,"byte_end":563048,"line_start":11,"line_end":11,"column_start":41,"column_end":53},"alias_span":null,"name":"BitmapHeader","value":"","parent":{"krate":0,"index":3233}},{"kind":"Use","ref_id":{"krate":0,"index":7305},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":563050,"byte_end":563063,"line_start":11,"line_end":11,"column_start":55,"column_end":68},"alias_span":null,"name":"GraymapHeader","value":"","parent":{"krate":0,"index":3233}},{"kind":"Use","ref_id":{"krate":0,"index":7315},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":563065,"byte_end":563077,"line_start":11,"line_end":11,"column_start":70,"column_end":82},"alias_span":null,"name":"PixmapHeader","value":"","parent":{"krate":0,"index":3233}},{"kind":"Use","ref_id":{"krate":0,"index":3724},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":563105,"byte_end":563114,"line_start":13,"line_end":13,"column_start":24,"column_end":33},"alias_span":null,"name":"PnmHeader","value":"","parent":{"krate":0,"index":3233}},{"kind":"Use","ref_id":{"krate":0,"index":7272},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":563116,"byte_end":563126,"line_start":13,"line_end":13,"column_start":35,"column_end":45},"alias_span":null,"name":"PnmSubtype","value":"","parent":{"krate":0,"index":3233}},{"kind":"Use","ref_id":{"krate":0,"index":7256},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":563128,"byte_end":563142,"line_start":13,"line_end":13,"column_start":47,"column_end":61},"alias_span":null,"name":"SampleEncoding","value":"","parent":{"krate":0,"index":3233}},{"kind":"Use","ref_id":{"krate":0,"index":3856},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/mod.rs","byte_start":651522,"byte_end":651532,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"TgaDecoder","value":"","parent":{"krate":0,"index":3771}},{"kind":"Use","ref_id":{"krate":0,"index":3948},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/mod.rs","byte_start":651598,"byte_end":651608,"line_start":13,"line_end":13,"column_start":24,"column_end":34},"alias_span":null,"name":"TgaEncoder","value":"","parent":{"krate":0,"index":3771}},{"kind":"Use","ref_id":{"krate":0,"index":4268},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/mod.rs","byte_start":693118,"byte_end":693129,"line_start":3,"line_end":3,"column_start":24,"column_end":35},"alias_span":null,"name":"WebPDecoder","value":"","parent":{"krate":0,"index":4153}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":0,"byte_end":9202,"line_start":1,"line_end":276,"column_start":1,"column_end":46},"name":"","qualname":"::","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":118},{"krate":0,"index":121},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":128},{"krate":0,"index":131},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":138},{"krate":0,"index":141},{"krate":0,"index":144},{"krate":0,"index":215},{"krate":0,"index":244},{"krate":0,"index":257},{"krate":0,"index":710},{"krate":0,"index":927},{"krate":0,"index":1142},{"krate":0,"index":4869},{"krate":0,"index":4922},{"krate":0,"index":5334},{"krate":0,"index":5502},{"krate":0,"index":5782},{"krate":0,"index":5986},{"krate":0,"index":6144},{"krate":0,"index":6160},{"krate":0,"index":8515}],"decl_id":null,"docs":" # Overview","sig":null,"attributes":[{"value":"/ # Overview","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":0,"byte_end":14,"line_start":1,"line_end":1,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":15,"byte_end":18,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This crate provides native rust implementations of image encoding and decoding as well as some","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":19,"byte_end":117,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ basic image manipulation functions. Additional documentation can currently also be found in the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":118,"byte_end":217,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ [README.md file which is most easily viewed on","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":218,"byte_end":268,"line_start":5,"line_end":5,"column_start":1,"column_end":51}},{"value":"/ github](https://github.com/image-rs/image/blob/master/README.md).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":269,"byte_end":338,"line_start":6,"line_end":6,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":339,"byte_end":342,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ There are two core problems for which this library provides solutions: a unified interface for image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":343,"byte_end":447,"line_start":8,"line_end":8,"column_start":1,"column_end":105}},{"value":"/ encodings and simple generic buffers for their content. It's possible to use either feature","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":448,"byte_end":543,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ without the other. The focus is on a small and stable set of common operations that can be","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":544,"byte_end":638,"line_start":10,"line_end":10,"column_start":1,"column_end":95}},{"value":"/ supplemented by other specialized crates. The library also prefers safe solutions with few","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":639,"byte_end":733,"line_start":11,"line_end":11,"column_start":1,"column_end":95}},{"value":"/ dependencies.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":734,"byte_end":751,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":752,"byte_end":755,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ # High level API","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":756,"byte_end":776,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":777,"byte_end":780,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Load images using [`io::Reader`]:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":781,"byte_end":818,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":819,"byte_end":822,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":823,"byte_end":841,"line_start":18,"line_end":18,"column_start":1,"column_end":19}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":842,"byte_end":866,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/ use image::io::Reader as ImageReader;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":867,"byte_end":908,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":909,"byte_end":959,"line_start":21,"line_end":21,"column_start":1,"column_end":51}},{"value":"/ # let bytes = vec![0u8];","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":960,"byte_end":988,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":989,"byte_end":992,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ let img = ImageReader::open(\"myimage.png\")?.decode()?;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":993,"byte_end":1051,"line_start":24,"line_end":24,"column_start":1,"column_end":59}},{"value":"/ let img2 = ImageReader::new(Cursor::new(bytes)).with_guessed_format()?.decode()?;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1052,"byte_end":1137,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"/ # Ok(())","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1138,"byte_end":1150,"line_start":26,"line_end":26,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1151,"byte_end":1158,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1159,"byte_end":1166,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1167,"byte_end":1170,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ And save them using [`save`] or [`write_to`] methods:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1171,"byte_end":1228,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1229,"byte_end":1232,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1233,"byte_end":1251,"line_start":32,"line_end":32,"column_start":1,"column_end":19}},{"value":"/ # use std::io::{Write, Cursor};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1252,"byte_end":1287,"line_start":33,"line_end":33,"column_start":1,"column_end":36}},{"value":"/ # use image::ImageOutputFormat;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1288,"byte_end":1323,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/ # use image::DynamicImage;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1324,"byte_end":1354,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ # #[cfg(feature = \"png\")]","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1355,"byte_end":1384,"line_start":36,"line_end":36,"column_start":1,"column_end":30}},{"value":"/ # fn main() -> Result<(), image::ImageError> {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1385,"byte_end":1435,"line_start":37,"line_end":37,"column_start":1,"column_end":51}},{"value":"/ # let img: DynamicImage = unimplemented!();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1436,"byte_end":1483,"line_start":38,"line_end":38,"column_start":1,"column_end":48}},{"value":"/ # let img2: DynamicImage = unimplemented!();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1484,"byte_end":1532,"line_start":39,"line_end":39,"column_start":1,"column_end":49}},{"value":"/ img.save(\"empty.jpg\")?;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1533,"byte_end":1560,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1561,"byte_end":1564,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let mut bytes: Vec<u8> = Vec::new();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1565,"byte_end":1605,"line_start":42,"line_end":42,"column_start":1,"column_end":41}},{"value":"/ img2.write_to(&mut Cursor::new(&mut bytes), image::ImageOutputFormat::Png)?;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1606,"byte_end":1686,"line_start":43,"line_end":43,"column_start":1,"column_end":81}},{"value":"/ # Ok(())","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1687,"byte_end":1699,"line_start":44,"line_end":44,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1700,"byte_end":1707,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/ # #[cfg(not(feature = \"png\"))] fn main() {}","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1708,"byte_end":1755,"line_start":46,"line_end":46,"column_start":1,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1756,"byte_end":1763,"line_start":47,"line_end":47,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1764,"byte_end":1767,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ With default features, the crate includes support for [many common image formats](codecs/index.html#supported-formats).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1768,"byte_end":1891,"line_start":49,"line_end":49,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1892,"byte_end":1895,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ [`save`]: enum.DynamicImage.html#method.save","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1896,"byte_end":1944,"line_start":51,"line_end":51,"column_start":1,"column_end":49}},{"value":"/ [`write_to`]: enum.DynamicImage.html#method.write_to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":1945,"byte_end":2001,"line_start":52,"line_end":52,"column_start":1,"column_end":57}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2002,"byte_end":2043,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2044,"byte_end":2047,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Image buffers","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2048,"byte_end":2067,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2068,"byte_end":2071,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The two main types for storing images:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2072,"byte_end":2114,"line_start":57,"line_end":57,"column_start":1,"column_end":43}},{"value":"/ * [`ImageBuffer`] which holds statically typed image contents.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2115,"byte_end":2181,"line_start":58,"line_end":58,"column_start":1,"column_end":67}},{"value":"/ * [`DynamicImage`] which is an enum over the supported ImageBuffer formats","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2182,"byte_end":2260,"line_start":59,"line_end":59,"column_start":1,"column_end":79}},{"value":"/     and supports conversions between them.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2261,"byte_end":2307,"line_start":60,"line_end":60,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2308,"byte_end":2311,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ As well as a few more specialized options:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2312,"byte_end":2358,"line_start":62,"line_end":62,"column_start":1,"column_end":47}},{"value":"/ * [`GenericImage`] trait for a mutable image buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2359,"byte_end":2415,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"/ * [`GenericImageView`] trait for read only references to a GenericImage.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2416,"byte_end":2492,"line_start":64,"line_end":64,"column_start":1,"column_end":77}},{"value":"/ * [`flat`] module containing types for interoperability with generic channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2493,"byte_end":2573,"line_start":65,"line_end":65,"column_start":1,"column_end":81}},{"value":"/     matrices and foreign interfaces.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2574,"byte_end":2614,"line_start":66,"line_end":66,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2615,"byte_end":2618,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2619,"byte_end":2672,"line_start":68,"line_end":68,"column_start":1,"column_end":54}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2673,"byte_end":2718,"line_start":69,"line_end":69,"column_start":1,"column_end":46}},{"value":"/ [`ImageBuffer`]: struct.ImageBuffer.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2719,"byte_end":2763,"line_start":70,"line_end":70,"column_start":1,"column_end":45}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2764,"byte_end":2808,"line_start":71,"line_end":71,"column_start":1,"column_end":45}},{"value":"/ [`flat`]: flat/index.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2809,"byte_end":2838,"line_start":72,"line_end":72,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2839,"byte_end":2842,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Low level encoding/decoding API","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2843,"byte_end":2880,"line_start":74,"line_end":74,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2881,"byte_end":2884,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The [`ImageDecoder`] and [`ImageDecoderRect`] traits are implemented for many image file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2885,"byte_end":2977,"line_start":76,"line_end":76,"column_start":1,"column_end":93}},{"value":"/ formats. They decode image data by directly on raw byte slices. Given an ImageDecoder, you can","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":2978,"byte_end":3076,"line_start":77,"line_end":77,"column_start":1,"column_end":99}},{"value":"/ produce a DynamicImage via [`DynamicImage::from_decoder`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3077,"byte_end":3139,"line_start":78,"line_end":78,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3140,"byte_end":3143,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ [`ImageEncoder`] provides the analogous functionality for encoding image data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3144,"byte_end":3226,"line_start":80,"line_end":80,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3227,"byte_end":3230,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage::from_decoder`]: enum.DynamicImage.html#method.from_decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3231,"byte_end":3309,"line_start":82,"line_end":82,"column_start":1,"column_end":79}},{"value":"/ [`ImageDecoderRect`]: trait.ImageDecoderRect.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3310,"byte_end":3363,"line_start":83,"line_end":83,"column_start":1,"column_end":54}},{"value":"/ [`ImageDecoder`]: trait.ImageDecoder.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3364,"byte_end":3409,"line_start":84,"line_end":84,"column_start":1,"column_end":46}},{"value":"/ [`ImageEncoder`]: trait.ImageEncoder.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3410,"byte_end":3455,"line_start":85,"line_end":85,"column_start":1,"column_end":46}},{"value":"warn(missing_docs)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3456,"byte_end":3478,"line_start":86,"line_end":86,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3479,"byte_end":3510,"line_start":87,"line_end":87,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3511,"byte_end":3536,"line_start":88,"line_end":88,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3537,"byte_end":3557,"line_start":89,"line_end":89,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3558,"byte_end":3596,"line_start":90,"line_end":90,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3694,"byte_end":3735,"line_start":93,"line_end":93,"column_start":1,"column_end":42}},{"value":"allow(clippy :: wrong_self_convention, clippy :: enum_variant_names)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":3776,"byte_end":3844,"line_start":95,"line_end":95,"column_start":1,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":144},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":158},{"krate":0,"index":6161},{"krate":0,"index":6180},{"krate":0,"index":6182},{"krate":0,"index":6185},{"krate":0,"index":6187},{"krate":0,"index":6197},{"krate":0,"index":6199},{"krate":0,"index":6201},{"krate":0,"index":6204},{"krate":0,"index":6205},{"krate":0,"index":6208},{"krate":0,"index":6211},{"krate":0,"index":6213},{"krate":0,"index":6216},{"krate":0,"index":6218},{"krate":0,"index":6228},{"krate":0,"index":6230},{"krate":0,"index":6232},{"krate":0,"index":6235},{"krate":0,"index":6236},{"krate":0,"index":6239},{"krate":0,"index":6242},{"krate":0,"index":6244},{"krate":0,"index":6246},{"krate":0,"index":6248},{"krate":0,"index":6256},{"krate":0,"index":6258},{"krate":0,"index":6260},{"krate":0,"index":6263},{"krate":0,"index":6264},{"krate":0,"index":6267},{"krate":0,"index":6268},{"krate":0,"index":6270},{"krate":0,"index":6282},{"krate":0,"index":6284},{"krate":0,"index":6286},{"krate":0,"index":6289},{"krate":0,"index":6290},{"krate":0,"index":161},{"krate":0,"index":165},{"krate":0,"index":170},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191},{"krate":0,"index":193},{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":213}],"decl_id":null,"docs":" Contains detailed error representation.","sig":null,"attributes":[{"value":"/ Contains detailed error representation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":9204,"byte_end":9247,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":9248,"byte_end":9251,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ See the main [`ImageError`] which contains a variant for each specialized error type. The","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":9252,"byte_end":9345,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/ subtypes used in each variant are opaque by design. They can be roughly inspected through their","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":9346,"byte_end":9445,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"/ respective `kind` methods which work similar to `std::io::Error::kind`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":9446,"byte_end":9521,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":9522,"byte_end":9525,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ The error interface makes it possible to inspect the error of an underlying decoder or encoder,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":9526,"byte_end":9625,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"/ through the `Error::source` method. Note that this is not part of the stable interface and you","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":9626,"byte_end":9724,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ may not rely on a particular error value for a particular operation. This means mainly that","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":9725,"byte_end":9820,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"/ `image` does not promise to remain on a particular version of its underlying decoders but if","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":9821,"byte_end":9917,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"/ you ensure to use the same version of the dependency (or at least of the error type) through","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":9918,"byte_end":10014,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"/ external means then you could inspect the error type in slightly more detail.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10015,"byte_end":10096,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10097,"byte_end":10100,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ [`ImageError`]: enum.ImageError.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10101,"byte_end":10141,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6162},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10814,"byte_end":10822,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"Decoding","qualname":"::error::ImageError::Decoding","value":"ImageError::Decoding(DecodingError)","parent":{"krate":0,"index":6161},"children":[],"decl_id":null,"docs":" An error was encountered while decoding.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10531,"byte_end":10575,"line_start":28,"line_end":28,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10580,"byte_end":10583,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This means that the input data did not conform to the specification of some image format,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10588,"byte_end":10681,"line_start":30,"line_end":30,"column_start":5,"column_end":98}},{"value":"/ or that no format could be determined, or that it did not match format specific","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10686,"byte_end":10769,"line_start":31,"line_end":31,"column_start":5,"column_end":88}},{"value":"/ requirements set by the caller.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10774,"byte_end":10809,"line_start":32,"line_end":32,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6165},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11208,"byte_end":11216,"line_start":41,"line_end":41,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::error::ImageError::Encoding","value":"ImageError::Encoding(EncodingError)","parent":{"krate":0,"index":6161},"children":[],"decl_id":null,"docs":" An error was encountered while encoding.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10844,"byte_end":10888,"line_start":35,"line_end":35,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10893,"byte_end":10896,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The input image can not be encoded with the chosen format, for example because the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10901,"byte_end":10987,"line_start":37,"line_end":37,"column_start":5,"column_end":91}},{"value":"/ specification has no representation for its color space or because a necessary conversion","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10992,"byte_end":11085,"line_start":38,"line_end":38,"column_start":5,"column_end":98}},{"value":"/ is ambiguous. In some cases it might also happen that the dimensions can not be used with","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11090,"byte_end":11183,"line_start":39,"line_end":39,"column_start":5,"column_end":98}},{"value":"/ the format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11188,"byte_end":11203,"line_start":40,"line_end":40,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6168},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11456,"byte_end":11465,"line_start":47,"line_end":47,"column_start":5,"column_end":14},"name":"Parameter","qualname":"::error::ImageError::Parameter","value":"ImageError::Parameter(ParameterError)","parent":{"krate":0,"index":6161},"children":[],"decl_id":null,"docs":" An error was encountered in input arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in input arguments.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11238,"byte_end":11286,"line_start":43,"line_end":43,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11291,"byte_end":11294,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ This is a catch-all case for strictly internal operations such as scaling, conversions,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11299,"byte_end":11390,"line_start":45,"line_end":45,"column_start":5,"column_end":96}},{"value":"/ etc. that involve no external format specifications.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11395,"byte_end":11451,"line_start":46,"line_end":46,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6171},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11725,"byte_end":11731,"line_start":53,"line_end":53,"column_start":5,"column_end":11},"name":"Limits","qualname":"::error::ImageError::Limits","value":"ImageError::Limits(LimitError)","parent":{"krate":0,"index":6161},"children":[],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11488,"byte_end":11565,"line_start":49,"line_end":49,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11570,"byte_end":11573,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Errors of this type are limits set by the user or environment, *not* inherent in a specific","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11578,"byte_end":11673,"line_start":51,"line_end":51,"column_start":5,"column_end":100}},{"value":"/ format or operation that was executed.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11678,"byte_end":11720,"line_start":52,"line_end":52,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6174},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12069,"byte_end":12080,"line_start":61,"line_end":61,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ImageError::Unsupported","value":"ImageError::Unsupported(UnsupportedError)","parent":{"krate":0,"index":6161},"children":[],"decl_id":null,"docs":" An operation can not be completed by the chosen abstraction.","sig":null,"attributes":[{"value":"/ An operation can not be completed by the chosen abstraction.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11750,"byte_end":11814,"line_start":55,"line_end":55,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11819,"byte_end":11822,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ This means that it might be possible for the operation to succeed in general but","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11827,"byte_end":11911,"line_start":57,"line_end":57,"column_start":5,"column_end":89}},{"value":"/ * it requires a disabled feature,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11916,"byte_end":11953,"line_start":58,"line_end":58,"column_start":5,"column_end":42}},{"value":"/ * the implementation does not yet exist, or","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":11958,"byte_end":12005,"line_start":59,"line_end":59,"column_start":5,"column_end":52}},{"value":"/ * no abstraction for a lower level could be found.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12010,"byte_end":12064,"line_start":60,"line_end":60,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6177},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12171,"byte_end":12178,"line_start":64,"line_end":64,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":6161},"children":[],"decl_id":null,"docs":" An error occurred while interacting with the environment.\n","sig":null,"attributes":[{"value":"/ An error occurred while interacting with the environment.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12105,"byte_end":12166,"line_start":63,"line_end":63,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":6161},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10514,"byte_end":10524,"line_start":27,"line_end":27,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::error::ImageError","value":"pub enum ImageError {\n    Decoding(DecodingError),\n    Encoding(EncodingError),\n    Parameter(ParameterError),\n    Limits(LimitError),\n    Unsupported(UnsupportedError),\n    IoError(io::Error),\n}","parent":null,"children":[{"krate":0,"index":6162},{"krate":0,"index":6165},{"krate":0,"index":6168},{"krate":0,"index":6171},{"krate":0,"index":6174},{"krate":0,"index":6177}],"decl_id":null,"docs":" The generic error type for image operations.","sig":null,"attributes":[{"value":"/ The generic error type for image operations.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10256,"byte_end":10304,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10305,"byte_end":10308,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This high level enum allows, by variant matching, a rough separation of concerns between","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10309,"byte_end":10401,"line_start":24,"line_end":24,"column_start":1,"column_end":93}},{"value":"/ underlying IO, the caller, format specifications, and the `image` implementation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":10402,"byte_end":10487,"line_start":25,"line_end":25,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":6182},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12410,"byte_end":12426,"line_start":73,"line_end":73,"column_start":12,"column_end":28},"name":"UnsupportedError","qualname":"::error::UnsupportedError","value":"UnsupportedError {  }","parent":null,"children":[{"krate":0,"index":6183},{"krate":0,"index":6184}],"decl_id":null,"docs":" The implementation for an operation was not provided.","sig":null,"attributes":[{"value":"/ The implementation for an operation was not provided.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12194,"byte_end":12251,"line_start":67,"line_end":67,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12252,"byte_end":12255,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ See the variant [`Unsupported`] for more documentation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12256,"byte_end":12315,"line_start":69,"line_end":69,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12316,"byte_end":12319,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ [`Unsupported`]: enum.ImageError.html#variant.Unsupported","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12320,"byte_end":12381,"line_start":71,"line_end":71,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6188},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12683,"byte_end":12688,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Color","qualname":"::error::UnsupportedErrorKind::Color","value":"UnsupportedErrorKind::Color(ExtendedColorType)","parent":{"krate":0,"index":6187},"children":[],"decl_id":null,"docs":" The required color type can not be handled.\n","sig":null,"attributes":[{"value":"/ The required color type can not be handled.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12631,"byte_end":12678,"line_start":82,"line_end":82,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6191},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12755,"byte_end":12761,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Format","qualname":"::error::UnsupportedErrorKind::Format","value":"UnsupportedErrorKind::Format(ImageFormatHint)","parent":{"krate":0,"index":6187},"children":[],"decl_id":null,"docs":" An image format is not supported.\n","sig":null,"attributes":[{"value":"/ An image format is not supported.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12713,"byte_end":12750,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6194},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12905,"byte_end":12919,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"GenericFeature","qualname":"::error::UnsupportedErrorKind::GenericFeature","value":"UnsupportedErrorKind::GenericFeature(String)","parent":{"krate":0,"index":6187},"children":[],"decl_id":null,"docs":" Some feature specified by string.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ Some feature specified by string.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12784,"byte_end":12821,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12826,"byte_end":12900,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":6187},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12604,"byte_end":12624,"line_start":81,"line_end":81,"column_start":10,"column_end":30},"name":"UnsupportedErrorKind","qualname":"::error::UnsupportedErrorKind","value":"pub enum UnsupportedErrorKind {\n    Color(ExtendedColorType),\n    Format(ImageFormatHint),\n    GenericFeature(String),\n}","parent":null,"children":[{"krate":0,"index":6188},{"krate":0,"index":6191},{"krate":0,"index":6194}],"decl_id":null,"docs":" Details what feature is not supported.\n","sig":null,"attributes":[{"value":"/ Details what feature is not supported.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12493,"byte_end":12535,"line_start":78,"line_end":78,"column_start":1,"column_end":43}},{"value":"non_exhaustive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12577,"byte_end":12594,"line_start":80,"line_end":80,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":6208},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13225,"byte_end":13238,"line_start":98,"line_end":98,"column_start":12,"column_end":25},"name":"EncodingError","qualname":"::error::EncodingError","value":"EncodingError {  }","parent":null,"children":[{"krate":0,"index":6209},{"krate":0,"index":6210}],"decl_id":null,"docs":" An error was encountered while encoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding an image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12932,"byte_end":12985,"line_start":91,"line_end":91,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12986,"byte_end":12989,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Encoding`] variant. See its","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":12990,"byte_end":13084,"line_start":93,"line_end":93,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13085,"byte_end":13124,"line_start":94,"line_end":94,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13125,"byte_end":13128,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Encoding`]: enum.ImageError.html#variant.Encoding","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13129,"byte_end":13196,"line_start":96,"line_end":96,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":6213},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13619,"byte_end":13633,"line_start":110,"line_end":110,"column_start":12,"column_end":26},"name":"ParameterError","qualname":"::error::ParameterError","value":"ParameterError {  }","parent":null,"children":[{"krate":0,"index":6214},{"krate":0,"index":6215}],"decl_id":null,"docs":" An error was encountered in inputs arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in inputs arguments.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13327,"byte_end":13376,"line_start":103,"line_end":103,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13377,"byte_end":13380,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Parameter`] variant. See its","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13381,"byte_end":13476,"line_start":105,"line_end":105,"column_start":1,"column_end":96}},{"value":"/ documentation for more information.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13477,"byte_end":13516,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13517,"byte_end":13520,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Parameter`]: enum.ImageError.html#variant.Parameter","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13521,"byte_end":13590,"line_start":108,"line_end":108,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6219},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13899,"byte_end":13916,"line_start":120,"line_end":120,"column_start":5,"column_end":22},"name":"DimensionMismatch","qualname":"::error::ParameterErrorKind::DimensionMismatch","value":"ParameterErrorKind::DimensionMismatch","parent":{"krate":0,"index":6218},"children":[],"decl_id":null,"docs":" The dimensions passed are wrong.\n","sig":null,"attributes":[{"value":"/ The dimensions passed are wrong.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13858,"byte_end":13894,"line_start":119,"line_end":119,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6221},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14014,"byte_end":14027,"line_start":122,"line_end":122,"column_start":5,"column_end":18},"name":"FailedAlready","qualname":"::error::ParameterErrorKind::FailedAlready","value":"ParameterErrorKind::FailedAlready","parent":{"krate":0,"index":6218},"children":[],"decl_id":null,"docs":" Repeated an operation for which error that could not be cloned was emitted already.\n","sig":null,"attributes":[{"value":"/ Repeated an operation for which error that could not be cloned was emitted already.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13922,"byte_end":14009,"line_start":121,"line_end":121,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6223},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14155,"byte_end":14162,"line_start":125,"line_end":125,"column_start":5,"column_end":12},"name":"Generic","qualname":"::error::ParameterErrorKind::Generic","value":"ParameterErrorKind::Generic(String)","parent":{"krate":0,"index":6218},"children":[],"decl_id":null,"docs":" A string describing the parameter.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ A string describing the parameter.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14033,"byte_end":14071,"line_start":123,"line_end":123,"column_start":5,"column_end":43}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14076,"byte_end":14150,"line_start":124,"line_end":124,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6226},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14223,"byte_end":14233,"line_start":127,"line_end":127,"column_start":5,"column_end":15},"name":"NoMoreData","qualname":"::error::ParameterErrorKind::NoMoreData","value":"ParameterErrorKind::NoMoreData","parent":{"krate":0,"index":6218},"children":[],"decl_id":null,"docs":" The end of the image has been reached.\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14176,"byte_end":14218,"line_start":126,"line_end":126,"column_start":5,"column_end":47}}]},{"kind":"Enum","id":{"krate":0,"index":6218},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13833,"byte_end":13851,"line_start":118,"line_end":118,"column_start":10,"column_end":28},"name":"ParameterErrorKind","qualname":"::error::ParameterErrorKind","value":"pub enum ParameterErrorKind {\n    DimensionMismatch,\n    FailedAlready,\n    Generic(String),\n    NoMoreData,\n}","parent":null,"children":[{"krate":0,"index":6219},{"krate":0,"index":6221},{"krate":0,"index":6223},{"krate":0,"index":6226}],"decl_id":null,"docs":" Details how a parameter is malformed.\n","sig":null,"attributes":[{"value":"/ Details how a parameter is malformed.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13723,"byte_end":13764,"line_start":115,"line_end":115,"column_start":1,"column_end":42}},{"value":"non_exhaustive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":13806,"byte_end":13823,"line_start":117,"line_end":117,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":6239},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14531,"byte_end":14544,"line_start":137,"line_end":137,"column_start":12,"column_end":25},"name":"DecodingError","qualname":"::error::DecodingError","value":"DecodingError {  }","parent":null,"children":[{"krate":0,"index":6240},{"krate":0,"index":6241}],"decl_id":null,"docs":" An error was encountered while decoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding an image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14238,"byte_end":14291,"line_start":130,"line_end":130,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14292,"byte_end":14295,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Decoding`] variant. See its","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14296,"byte_end":14390,"line_start":132,"line_end":132,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14391,"byte_end":14430,"line_start":133,"line_end":133,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14431,"byte_end":14434,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Decoding`]: enum.ImageError.html#variant.Decoding","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14435,"byte_end":14502,"line_start":135,"line_end":135,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":6244},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14944,"byte_end":14954,"line_start":149,"line_end":149,"column_start":12,"column_end":22},"name":"LimitError","qualname":"::error::LimitError","value":"LimitError {  }","parent":null,"children":[{"krate":0,"index":6245}],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14633,"byte_end":14710,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14711,"byte_end":14714,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Limits`] variant. See its","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14715,"byte_end":14807,"line_start":144,"line_end":144,"column_start":1,"column_end":93}},{"value":"/ documentation for more information.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14808,"byte_end":14847,"line_start":145,"line_end":145,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14848,"byte_end":14851,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Limits`]: enum.ImageError.html#variant.Limits","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":14852,"byte_end":14915,"line_start":147,"line_end":147,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6249},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15504,"byte_end":15518,"line_start":163,"line_end":163,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::error::LimitErrorKind::DimensionError","value":"LimitErrorKind::DimensionError","parent":{"krate":0,"index":6248},"children":[],"decl_id":null,"docs":" The resulting image exceed dimension limits in either direction.\n","sig":null,"attributes":[{"value":"/ The resulting image exceed dimension limits in either direction.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15431,"byte_end":15499,"line_start":162,"line_end":162,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6251},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15602,"byte_end":15620,"line_start":165,"line_end":165,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::error::LimitErrorKind::InsufficientMemory","value":"LimitErrorKind::InsufficientMemory","parent":{"krate":0,"index":6248},"children":[],"decl_id":null,"docs":" The operation would have performed an allocation larger than allowed.\n","sig":null,"attributes":[{"value":"/ The operation would have performed an allocation larger than allowed.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15524,"byte_end":15597,"line_start":164,"line_end":164,"column_start":5,"column_end":78}}]},{"kind":"StructVariant","id":{"krate":0,"index":6253},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15699,"byte_end":15710,"line_start":167,"line_end":167,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::LimitErrorKind::Unsupported","value":"LimitErrorKind::Unsupported { limits, supported }","parent":{"krate":0,"index":6248},"children":[],"decl_id":null,"docs":" The specified strict limits are not supported for this operation\n","sig":null,"attributes":[{"value":"/ The specified strict limits are not supported for this operation","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15626,"byte_end":15694,"line_start":166,"line_end":166,"column_start":5,"column_end":73}}]},{"kind":"Enum","id":{"krate":0,"index":6248},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15410,"byte_end":15424,"line_start":161,"line_end":161,"column_start":10,"column_end":24},"name":"LimitErrorKind","qualname":"::error::LimitErrorKind","value":"pub enum LimitErrorKind {\n    DimensionError,\n    InsufficientMemory,\n    Unsupported {\n        limits: crate::io::Limits,\n        supported: crate::io::LimitSupport,\n    },\n}","parent":null,"children":[{"krate":0,"index":6249},{"krate":0,"index":6251},{"krate":0,"index":6253}],"decl_id":null,"docs":" Indicates the limit that prevented an operation from completing.","sig":null,"attributes":[{"value":"/ Indicates the limit that prevented an operation from completing.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15025,"byte_end":15093,"line_start":154,"line_end":154,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15094,"byte_end":15097,"line_start":155,"line_end":155,"column_start":1,"column_end":4}},{"value":"/ Note that this enumeration is not exhaustive and may in the future be extended to provide more","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15098,"byte_end":15196,"line_start":156,"line_end":156,"column_start":1,"column_end":99}},{"value":"/ detailed information or to incorporate other resources types.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15197,"byte_end":15262,"line_start":157,"line_end":157,"column_start":1,"column_end":66}},{"value":"non_exhaustive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15308,"byte_end":15325,"line_start":159,"line_end":159,"column_start":1,"column_end":18}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15326,"byte_end":15364,"line_start":160,"line_end":160,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6271},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16050,"byte_end":16055,"line_start":180,"line_end":180,"column_start":5,"column_end":10},"name":"Exact","qualname":"::error::ImageFormatHint::Exact","value":"ImageFormatHint::Exact(ImageFormat)","parent":{"krate":0,"index":6270},"children":[],"decl_id":null,"docs":" The format is known exactly.\n","sig":null,"attributes":[{"value":"/ The format is known exactly.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16013,"byte_end":16045,"line_start":179,"line_end":179,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6274},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16123,"byte_end":16127,"line_start":183,"line_end":183,"column_start":5,"column_end":9},"name":"Name","qualname":"::error::ImageFormatHint::Name","value":"ImageFormatHint::Name(String)","parent":{"krate":0,"index":6270},"children":[],"decl_id":null,"docs":" The format can be identified by a name.\n","sig":null,"attributes":[{"value":"/ The format can be identified by a name.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16075,"byte_end":16118,"line_start":182,"line_end":182,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6277},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16199,"byte_end":16212,"line_start":186,"line_end":186,"column_start":5,"column_end":18},"name":"PathExtension","qualname":"::error::ImageFormatHint::PathExtension","value":"ImageFormatHint::PathExtension(std::path::PathBuf)","parent":{"krate":0,"index":6270},"children":[],"decl_id":null,"docs":" A common path extension for the format is known.\n","sig":null,"attributes":[{"value":"/ A common path extension for the format is known.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16142,"byte_end":16194,"line_start":185,"line_end":185,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6280},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16299,"byte_end":16306,"line_start":189,"line_end":189,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::error::ImageFormatHint::Unknown","value":"ImageFormatHint::Unknown","parent":{"krate":0,"index":6270},"children":[],"decl_id":null,"docs":" The format is not known or could not be determined.\n","sig":null,"attributes":[{"value":"/ The format is not known or could not be determined.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16239,"byte_end":16294,"line_start":188,"line_end":188,"column_start":5,"column_end":60}}]},{"kind":"Enum","id":{"krate":0,"index":6270},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15991,"byte_end":16006,"line_start":178,"line_end":178,"column_start":10,"column_end":25},"name":"ImageFormatHint","qualname":"::error::ImageFormatHint","value":"pub enum ImageFormatHint {\n    Exact(ImageFormat),\n    Name(String),\n    PathExtension(std::path::PathBuf),\n    Unknown,\n}","parent":null,"children":[{"krate":0,"index":6271},{"krate":0,"index":6274},{"krate":0,"index":6277},{"krate":0,"index":6280}],"decl_id":null,"docs":" A best effort representation for image formats.\n","sig":null,"attributes":[{"value":"/ A best effort representation for image formats.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15871,"byte_end":15922,"line_start":175,"line_end":175,"column_start":1,"column_end":52}},{"value":"non_exhaustive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":15964,"byte_end":15981,"line_start":177,"line_end":177,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16557,"byte_end":16577,"line_start":197,"line_end":197,"column_start":12,"column_end":32},"name":"from_format_and_kind","qualname":"<UnsupportedError>::from_format_and_kind","value":"pub fn from_format_and_kind(ImageFormatHint, UnsupportedErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `UnsupportedError` for an image with details on the unsupported feature.","sig":null,"attributes":[{"value":"/ Create an `UnsupportedError` for an image with details on the unsupported feature.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16339,"byte_end":16425,"line_start":193,"line_end":193,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16430,"byte_end":16433,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ If the operation was not connected to a particular image format then the hint may be","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16438,"byte_end":16526,"line_start":195,"line_end":195,"column_start":5,"column_end":93}},{"value":"/ `Unknown`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16531,"byte_end":16545,"line_start":196,"line_end":196,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16772,"byte_end":16776,"line_start":202,"line_end":202,"column_start":12,"column_end":16},"name":"kind","qualname":"<UnsupportedError>::kind","value":"pub fn kind(&Self) -> UnsupportedErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `UnsupportedErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `UnsupportedErrorKind` of the error.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16694,"byte_end":16760,"line_start":201,"line_end":201,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16915,"byte_end":16926,"line_start":207,"line_end":207,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<UnsupportedError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16847,"byte_end":16903,"line_start":206,"line_end":206,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17118,"byte_end":17121,"line_start":214,"line_end":214,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<dyn Error +\n                                                             Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.\n","sig":null,"attributes":[{"value":"/ Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17017,"byte_end":17106,"line_start":213,"line_end":213,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17466,"byte_end":17482,"line_start":224,"line_end":224,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<DecodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create a `DecodingError` for an image format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17310,"byte_end":17359,"line_start":221,"line_end":221,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17364,"byte_end":17367,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17372,"byte_end":17454,"line_start":223,"line_end":223,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17681,"byte_end":17692,"line_start":232,"line_end":232,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<DecodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17613,"byte_end":17669,"line_start":231,"line_end":231,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17885,"byte_end":17888,"line_start":239,"line_end":239,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<dyn Error +\n                                                             Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.\n","sig":null,"attributes":[{"value":"/ Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17783,"byte_end":17873,"line_start":238,"line_end":238,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18234,"byte_end":18250,"line_start":249,"line_end":249,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<EncodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create an `EncodingError` for an image format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18077,"byte_end":18127,"line_start":246,"line_end":246,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18132,"byte_end":18135,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18140,"byte_end":18222,"line_start":248,"line_end":248,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":174},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18448,"byte_end":18459,"line_start":257,"line_end":257,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<EncodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Return the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Return the image format associated with this error.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18381,"byte_end":18436,"line_start":256,"line_end":256,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":176},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18631,"byte_end":18640,"line_start":264,"line_end":264,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ParameterError>::from_kind","value":"pub fn from_kind(ParameterErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ParameterError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a `ParameterError` directly from a corresponding kind.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18551,"byte_end":18619,"line_start":263,"line_end":263,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18847,"byte_end":18851,"line_start":272,"line_end":272,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParameterError>::kind","value":"pub fn kind(&Self) -> ParameterErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ParameterErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ParameterErrorKind` of the error.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18771,"byte_end":18835,"line_start":271,"line_end":271,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":19024,"byte_end":19033,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<LimitError>::from_kind","value":"pub fn from_kind(LimitErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic `LimitError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a generic `LimitError` directly from a corresponding kind.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18940,"byte_end":19012,"line_start":278,"line_end":278,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":19177,"byte_end":19181,"line_start":284,"line_end":284,"column_start":12,"column_end":16},"name":"kind","qualname":"<LimitError>::kind","value":"pub fn kind(&Self) -> LimitErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `LimitErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `LimitErrorKind` of the error.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":19105,"byte_end":19165,"line_start":283,"line_end":283,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":189},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":20060,"byte_end":20071,"line_start":320,"line_end":320,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::error::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":20002,"byte_end":20050,"line_start":319,"line_end":319,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":215},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5127,"byte_end":5133,"line_start":156,"line_end":156,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":223},{"krate":0,"index":226},{"krate":0,"index":229},{"krate":0,"index":232},{"krate":0,"index":235},{"krate":0,"index":238},{"krate":0,"index":241}],"decl_id":null,"docs":" Iterators and other auxiliary structure for the `ImageBuffer` type.\n","sig":null,"attributes":[{"value":"/ Iterators and other auxiliary structure for the `ImageBuffer` type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5047,"byte_end":5118,"line_start":155,"line_end":155,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":244},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/mod.rs","parent":null,"children":[{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":251},{"krate":0,"index":254}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"/ Mathematical helper functions and types.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/mod.rs","byte_start":26282,"byte_end":26326,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":6293},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/rect.rs","byte_start":26545,"byte_end":26549,"line_start":3,"line_end":3,"column_start":12,"column_end":16},"name":"Rect","qualname":"::math::rect::Rect","value":"Rect { x, y, width, height }","parent":null,"children":[{"krate":0,"index":6294},{"krate":0,"index":6295},{"krate":0,"index":6296},{"krate":0,"index":6297}],"decl_id":null,"docs":" A Rectangle defined by its top left corner, width and height.\n","sig":null,"attributes":[{"value":"/ A Rectangle defined by its top left corner, width and height.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/rect.rs","byte_start":26417,"byte_end":26482,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":6294},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/rect.rs","byte_start":26609,"byte_end":26610,"line_start":5,"line_end":5,"column_start":9,"column_end":10},"name":"x","qualname":"::math::rect::Rect::x","value":"u32","parent":{"krate":0,"index":6293},"children":[],"decl_id":null,"docs":" The x coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The x coordinate of the top left corner.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/rect.rs","byte_start":26556,"byte_end":26600,"line_start":4,"line_end":4,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":6295},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/rect.rs","byte_start":26674,"byte_end":26675,"line_start":7,"line_end":7,"column_start":9,"column_end":10},"name":"y","qualname":"::math::rect::Rect::y","value":"u32","parent":{"krate":0,"index":6293},"children":[],"decl_id":null,"docs":" The y coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The y coordinate of the top left corner.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/rect.rs","byte_start":26621,"byte_end":26665,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":6296},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/rect.rs","byte_start":26721,"byte_end":26726,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"width","qualname":"::math::rect::Rect::width","value":"u32","parent":{"krate":0,"index":6293},"children":[],"decl_id":null,"docs":" The rectangle's width.\n","sig":null,"attributes":[{"value":"/ The rectangle's width.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/rect.rs","byte_start":26686,"byte_end":26712,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":6297},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/rect.rs","byte_start":26773,"byte_end":26779,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"height","qualname":"::math::rect::Rect::height","value":"u32","parent":{"krate":0,"index":6293},"children":[],"decl_id":null,"docs":" The rectangle's height.\n","sig":null,"attributes":[{"value":"/ The rectangle's height.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/math/rect.rs","byte_start":26737,"byte_end":26764,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":257},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":261},{"krate":0,"index":262},{"krate":0,"index":265},{"krate":0,"index":268},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":278},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":316},{"krate":0,"index":319},{"krate":0,"index":322},{"krate":0,"index":325},{"krate":0,"index":328},{"krate":0,"index":331},{"krate":0,"index":334},{"krate":0,"index":337},{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":344},{"krate":0,"index":347},{"krate":0,"index":350},{"krate":0,"index":353},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":360},{"krate":0,"index":363},{"krate":0,"index":366},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":381},{"krate":0,"index":384},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":448},{"krate":0,"index":562},{"krate":0,"index":683},{"krate":0,"index":685},{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":694},{"krate":0,"index":697},{"krate":0,"index":702},{"krate":0,"index":707}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"/ Image Processing Functions","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":31260,"byte_end":31290,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":417},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":47952,"byte_end":47960,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"pub fn rotate90<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":47903,"byte_end":47944,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":419},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":48292,"byte_end":48301,"line_start":22,"line_end":22,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"pub fn rotate180<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":48242,"byte_end":48284,"line_start":21,"line_end":21,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":421},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":48634,"byte_end":48643,"line_start":35,"line_end":35,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"pub fn rotate270<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":48584,"byte_end":48626,"line_start":34,"line_end":34,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":423},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":49031,"byte_end":49042,"line_start":48,"line_end":48,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"pub fn rotate90_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":48926,"byte_end":49023,"line_start":47,"line_end":47,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":49816,"byte_end":49828,"line_start":74,"line_end":74,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"pub fn rotate180_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":49710,"byte_end":49808,"line_start":73,"line_end":73,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":429},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":50611,"byte_end":50623,"line_start":100,"line_end":100,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"pub fn rotate270_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":50505,"byte_end":50603,"line_start":99,"line_end":99,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":432},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":51329,"byte_end":51344,"line_start":126,"line_end":126,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"pub fn flip_horizontal<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":51291,"byte_end":51321,"line_start":125,"line_end":125,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":434},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":51669,"byte_end":51682,"line_start":139,"line_end":139,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"pub fn flip_vertical<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":51633,"byte_end":51661,"line_start":138,"line_end":138,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":436},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":52064,"byte_end":52082,"line_start":152,"line_end":152,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"pub fn flip_horizontal_in<I,\n                          Container>(&I,\n                                     &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":51969,"byte_end":52056,"line_start":151,"line_end":151,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":439},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":52843,"byte_end":52859,"line_start":178,"line_end":178,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"pub fn flip_vertical_in<I,\n                        Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image vertically and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":52750,"byte_end":52835,"line_start":177,"line_end":177,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":442},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":53586,"byte_end":53604,"line_start":204,"line_end":204,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"pub fn rotate180_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise in place.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":53527,"byte_end":53578,"line_start":203,"line_end":203,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":444},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":54384,"byte_end":54408,"line_start":235,"line_end":235,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"pub fn flip_horizontal_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally in place.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":54336,"byte_end":54376,"line_start":234,"line_end":234,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":446},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":54814,"byte_end":54836,"line_start":250,"line_end":250,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"pub fn flip_vertical_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[{"value":"/ Flip an image vertically in place.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/affine.rs","byte_start":54768,"byte_end":54806,"line_start":249,"line_end":249,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":448},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":452},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":459},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":475},{"krate":0,"index":478},{"krate":0,"index":479},{"krate":0,"index":482},{"krate":0,"index":485},{"krate":0,"index":488},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":510},{"krate":0,"index":513},{"krate":0,"index":519},{"krate":0,"index":523},{"krate":0,"index":528},{"krate":0,"index":531},{"krate":0,"index":6313},{"krate":0,"index":6315},{"krate":0,"index":6317},{"krate":0,"index":537},{"krate":0,"index":543},{"krate":0,"index":550},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":559}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"/ Functions for altering and converting the color of pixelbufs","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":59797,"byte_end":59861,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":493},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":60270,"byte_end":60279,"line_start":15,"line_end":15,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"pub fn grayscale<I: GenericImageView>(&I)\n-> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale. Alpha channel is discarded.\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale. Alpha channel is discarded.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":60190,"byte_end":60262,"line_start":14,"line_end":14,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":495},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":60487,"byte_end":60502,"line_start":22,"line_end":22,"column_start":8,"column_end":23},"name":"grayscale_alpha","qualname":"::imageops::colorops::grayscale_alpha","value":"pub fn grayscale_alpha<I: GenericImageView>(&I)\n-> ImageBuffer<LumaA<Subpixel<I>>, Vec<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale. Alpha channel is preserved.\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale. Alpha channel is preserved.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":60407,"byte_end":60479,"line_start":21,"line_end":21,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":497},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":60755,"byte_end":60774,"line_start":29,"line_end":29,"column_start":8,"column_end":27},"name":"grayscale_with_type","qualname":"::imageops::colorops::grayscale_with_type","value":"pub fn grayscale_with_type<NewPixel, I: GenericImageView>(&I)\n-> ImageBuffer<NewPixel, Vec<NewPixel::Subpixel>> where NewPixel: Pixel +\nFromColor<Luma<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to a grayscale image with the specified pixel type. Alpha channel is discarded.\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to a grayscale image with the specified pixel type. Alpha channel is discarded.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":60637,"byte_end":60747,"line_start":28,"line_end":28,"column_start":1,"column_end":111}}]},{"kind":"Function","id":{"krate":0,"index":500},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":61364,"byte_end":61389,"line_start":49,"line_end":49,"column_start":8,"column_end":33},"name":"grayscale_with_type_alpha","qualname":"::imageops::colorops::grayscale_with_type_alpha","value":"pub fn grayscale_with_type_alpha<NewPixel, I: GenericImageView>(&I)\n-> ImageBuffer<NewPixel, Vec<NewPixel::Subpixel>> where NewPixel: Pixel +\nFromColor<LumaA<Subpixel<I>>>","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to a grayscale image with the specified pixel type. Alpha channel is preserved.\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to a grayscale image with the specified pixel type. Alpha channel is preserved.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":61246,"byte_end":61356,"line_start":48,"line_end":48,"column_start":1,"column_end":111}}]},{"kind":"Function","id":{"krate":0,"index":503},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":61961,"byte_end":61967,"line_start":70,"line_end":70,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"pub fn invert<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":61868,"byte_end":61916,"line_start":68,"line_end":68,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":61917,"byte_end":61953,"line_start":69,"line_end":69,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":505},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":62529,"byte_end":62537,"line_start":89,"line_end":89,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"pub fn contrast<I, P, S>(&I, f32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":62269,"byte_end":62315,"line_start":84,"line_end":84,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":62316,"byte_end":62375,"line_start":85,"line_end":85,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":62376,"byte_end":62460,"line_start":86,"line_end":86,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":62461,"byte_end":62464,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ *[See also `contrast_in_place`.][contrast_in_place]*","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":62465,"byte_end":62521,"line_start":88,"line_end":88,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":510},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":63529,"byte_end":63546,"line_start":123,"line_end":123,"column_start":8,"column_end":25},"name":"contrast_in_place","qualname":"::imageops::colorops::contrast_in_place","value":"pub fn contrast_in_place<I>(&mut I, f32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image in place.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image in place.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":63278,"byte_end":63333,"line_start":118,"line_end":118,"column_start":1,"column_end":56}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":63334,"byte_end":63393,"line_start":119,"line_end":119,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":63394,"byte_end":63478,"line_start":120,"line_end":120,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":63479,"byte_end":63482,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ *[See also `contrast`.][contrast]*","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":63483,"byte_end":63521,"line_start":122,"line_end":122,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":513},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":64487,"byte_end":64495,"line_start":156,"line_end":156,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"pub fn brighten<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":64252,"byte_end":64284,"line_start":151,"line_end":151,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":64285,"byte_end":64341,"line_start":152,"line_end":152,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":64342,"byte_end":64418,"line_start":153,"line_end":153,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":64419,"byte_end":64422,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ *[See also `brighten_in_place`.][brighten_in_place]*","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":64423,"byte_end":64479,"line_start":155,"line_end":155,"column_start":1,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":519},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":65423,"byte_end":65440,"line_start":189,"line_end":189,"column_start":8,"column_end":25},"name":"brighten_in_place","qualname":"::imageops::colorops::brighten_in_place","value":"pub fn brighten_in_place<I>(&mut I, i32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image in place.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.","sig":null,"attributes":[{"value":"/ Brighten the supplied image in place.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":65197,"byte_end":65238,"line_start":184,"line_end":184,"column_start":1,"column_end":42}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":65239,"byte_end":65295,"line_start":185,"line_end":185,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":65296,"byte_end":65372,"line_start":186,"line_end":186,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":65373,"byte_end":65376,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ *[See also `brighten`.][brighten]*","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":65377,"byte_end":65415,"line_start":188,"line_end":188,"column_start":1,"column_end":39}}]},{"kind":"Function","id":{"krate":0,"index":523},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":66442,"byte_end":66451,"line_start":222,"line_end":222,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"pub fn huerotate<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":66163,"byte_end":66197,"line_start":216,"line_end":216,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":66198,"byte_end":66249,"line_start":217,"line_end":217,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":66250,"byte_end":66319,"line_start":218,"line_end":218,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":66320,"byte_end":66371,"line_start":219,"line_end":219,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":66372,"byte_end":66375,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ *[See also `huerotate_in_place`.][huerotate_in_place]*","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":66376,"byte_end":66434,"line_start":221,"line_end":221,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":528},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":68669,"byte_end":68687,"line_start":288,"line_end":288,"column_start":8,"column_end":26},"name":"huerotate_in_place","qualname":"::imageops::colorops::huerotate_in_place","value":"pub fn huerotate_in_place<I>(&mut I, i32) where I: GenericImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image in place.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image in place.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":68399,"byte_end":68442,"line_start":282,"line_end":282,"column_start":1,"column_end":44}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":68443,"byte_end":68494,"line_start":283,"line_end":283,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":68495,"byte_end":68564,"line_start":284,"line_end":284,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":68565,"byte_end":68616,"line_start":285,"line_end":285,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":68617,"byte_end":68620,"line_start":286,"line_end":286,"column_start":1,"column_end":4}},{"value":"/ *[See also `huerotate`.][huerotate]*","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":68621,"byte_end":68661,"line_start":287,"line_end":287,"column_start":1,"column_end":41}}]},{"kind":"Trait","id":{"krate":0,"index":531},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":70661,"byte_end":70669,"line_start":351,"line_end":351,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":535},{"krate":0,"index":536}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":70635,"byte_end":70650,"line_start":350,"line_end":350,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":532},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":70733,"byte_end":70738,"line_start":353,"line_end":353,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":70676,"byte_end":70723,"line_start":352,"line_end":352,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":70831,"byte_end":70839,"line_start":356,"line_end":356,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"pub fn index_of(&Self, &Self::Color) -> usize","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" Returns the index of the closest match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closest match of `color`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":70744,"byte_end":70797,"line_start":354,"line_end":354,"column_start":5,"column_end":58}},{"value":"/ in the color map.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":70802,"byte_end":70823,"line_start":355,"line_end":355,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71047,"byte_end":71053,"line_start":359,"line_end":359,"column_start":8,"column_end":14},"name":"lookup","qualname":"::imageops::colorops::ColorMap::lookup","value":"pub fn lookup(&Self, usize) -> Option<Self::Color>","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" Looks up color by index in the color map.  If `idx` is out of range for the color map, or\n ColorMap doesn't implement `lookup` `None` is returned.\n","sig":null,"attributes":[{"value":"/ Looks up color by index in the color map.  If `idx` is out of range for the color map, or","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":70882,"byte_end":70975,"line_start":357,"line_end":357,"column_start":5,"column_end":98}},{"value":"/ ColorMap doesn't implement `lookup` `None` is returned.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":70980,"byte_end":71039,"line_start":358,"line_end":358,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":535},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71234,"byte_end":71244,"line_start":364,"line_end":364,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"::imageops::colorops::ColorMap::has_lookup","value":"pub fn has_lookup(&Self) -> bool","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" Determine if this implementation of ColorMap overrides the default `lookup`.\n","sig":null,"attributes":[{"value":"/ Determine if this implementation of ColorMap overrides the default `lookup`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71146,"byte_end":71226,"line_start":363,"line_end":363,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71349,"byte_end":71358,"line_start":368,"line_end":368,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"pub fn map_color(&Self, &mut Self::Color)","parent":{"krate":0,"index":531},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71286,"byte_end":71341,"line_start":367,"line_end":367,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":6313},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72503,"byte_end":72510,"line_start":401,"line_end":401,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71395,"byte_end":71419,"line_start":371,"line_end":371,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71420,"byte_end":71423,"line_start":372,"line_end":372,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71424,"byte_end":71438,"line_start":373,"line_end":373,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71439,"byte_end":71446,"line_start":374,"line_end":374,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, BiLevel, ColorMap};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71447,"byte_end":71516,"line_start":375,"line_end":375,"column_start":1,"column_end":70}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71517,"byte_end":71552,"line_start":376,"line_end":376,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71553,"byte_end":71556,"line_start":377,"line_end":377,"column_start":1,"column_end":4}},{"value":"/ let (w, h) = (16, 16);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71557,"byte_end":71583,"line_start":378,"line_end":378,"column_start":1,"column_end":27}},{"value":"/ // Create an image with a smooth horizontal gradient from black (0) to white (255).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71584,"byte_end":71671,"line_start":379,"line_end":379,"column_start":1,"column_end":88}},{"value":"/ let gray = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> { [(255 * x / w) as u8].into() });","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71672,"byte_end":71767,"line_start":380,"line_end":380,"column_start":1,"column_end":96}},{"value":"/ // Mapping the gray image through the `BiLevel` filter should map gray pixels less than half","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71768,"byte_end":71864,"line_start":381,"line_end":381,"column_start":1,"column_end":97}},{"value":"/ // intensity (127) to black (0), and anything greater to white (255).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71865,"byte_end":71938,"line_start":382,"line_end":382,"column_start":1,"column_end":74}},{"value":"/ let cmap = BiLevel;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71939,"byte_end":71962,"line_start":383,"line_end":383,"column_start":1,"column_end":24}},{"value":"/ let palletized = index_colors(&gray, &cmap);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":71963,"byte_end":72011,"line_start":384,"line_end":384,"column_start":1,"column_end":49}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72012,"byte_end":72064,"line_start":385,"line_end":385,"column_start":1,"column_end":53}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72065,"byte_end":72108,"line_start":386,"line_end":386,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72109,"byte_end":72145,"line_start":387,"line_end":387,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72146,"byte_end":72195,"line_start":388,"line_end":388,"column_start":1,"column_end":50}},{"value":"/ });","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72196,"byte_end":72203,"line_start":389,"line_end":389,"column_start":1,"column_end":8}},{"value":"/ // Create an black and white image of expected output.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72204,"byte_end":72262,"line_start":390,"line_end":390,"column_start":1,"column_end":59}},{"value":"/ let bw = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72263,"byte_end":72323,"line_start":391,"line_end":391,"column_start":1,"column_end":61}},{"value":"/     if x <= (w / 2) {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72324,"byte_end":72349,"line_start":392,"line_end":392,"column_start":1,"column_end":26}},{"value":"/         [0].into()","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72350,"byte_end":72372,"line_start":393,"line_end":393,"column_start":1,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72373,"byte_end":72389,"line_start":394,"line_end":394,"column_start":1,"column_end":17}},{"value":"/         [255].into()","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72390,"byte_end":72414,"line_start":395,"line_end":395,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72415,"byte_end":72424,"line_start":396,"line_end":396,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72425,"byte_end":72432,"line_start":397,"line_end":397,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(mapped, bw);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72433,"byte_end":72460,"line_start":398,"line_end":398,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72461,"byte_end":72468,"line_start":399,"line_end":399,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":554},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":74924,"byte_end":74930,"line_start":491,"line_end":491,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"pub fn dither<Pix, Map>(&mut ImageBuffer<Pix, Vec<u8>>, &Map) where\nMap: ColorMap<Color = Pix> + ?Sized, Pix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":74772,"byte_end":74853,"line_start":489,"line_end":489,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":74854,"byte_end":74916,"line_start":490,"line_end":490,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":559},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":76484,"byte_end":76496,"line_start":529,"line_end":529,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"pub fn index_colors<Pix, Map>(&ImageBuffer<Pix, Vec<u8>>, &Map)\n-> ImageBuffer<Luma<u8>, Vec<u8>> where Map: ColorMap<Color = Pix> + ?Sized,\nPix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":76387,"byte_end":76476,"line_start":528,"line_end":528,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6319},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82995,"byte_end":83002,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":6318},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82970,"byte_end":82990,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6321},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":83031,"byte_end":83039,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":6318},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":83009,"byte_end":83026,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6323},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":83067,"byte_end":83077,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":6318},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":83046,"byte_end":83062,"line_start":89,"line_end":89,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6325},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":83108,"byte_end":83116,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":6318},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":83084,"byte_end":83103,"line_start":92,"line_end":92,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6327},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":83153,"byte_end":83161,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":6318},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":83123,"byte_end":83148,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":6318},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82953,"byte_end":82963,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"pub enum FilterType { Nearest, Triangle, CatmullRom, Gaussian, Lanczos3, }","parent":null,"children":[{"krate":0,"index":6319},{"krate":0,"index":6321},{"krate":0,"index":6323},{"krate":0,"index":6325},{"krate":0,"index":6327}],"decl_id":null,"docs":" Available Sampling Filters.","sig":null,"attributes":[{"value":"/ Available Sampling Filters.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80511,"byte_end":80542,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80543,"byte_end":80546,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80547,"byte_end":80562,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80563,"byte_end":80566,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ To test the different sampling filters on a real example, you can find two","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80567,"byte_end":80645,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ examples called","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80646,"byte_end":80665,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80666,"byte_end":80749,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80750,"byte_end":80757,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80758,"byte_end":80837,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ in the `examples` directory of the crate source code.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80838,"byte_end":80895,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80896,"byte_end":80899,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Here is a 3.58 MiB","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80900,"byte_end":80922,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":80923,"byte_end":81014,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ that has been scaled down to 300x225 px:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81015,"byte_end":81059,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81060,"byte_end":81063,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81064,"byte_end":81161,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81162,"byte_end":81236,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81237,"byte_end":81277,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81278,"byte_end":81416,"line_start":33,"line_end":33,"column_start":1,"column_end":139}},{"value":"/     Nearest Neighbor","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81417,"byte_end":81441,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81442,"byte_end":81454,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81455,"byte_end":81495,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81496,"byte_end":81634,"line_start":37,"line_end":37,"column_start":1,"column_end":139}},{"value":"/     Linear: Triangle","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81635,"byte_end":81659,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81660,"byte_end":81672,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81673,"byte_end":81713,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81714,"byte_end":81854,"line_start":41,"line_end":41,"column_start":1,"column_end":141}},{"value":"/     Cubic: Catmull-Rom","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81855,"byte_end":81881,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/   </div>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81882,"byte_end":81894,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81895,"byte_end":81935,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":81936,"byte_end":82076,"line_start":45,"line_end":45,"column_start":1,"column_end":141}},{"value":"/     Gaussian","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82077,"byte_end":82093,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/   </div>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82094,"byte_end":82106,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82107,"byte_end":82147,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82148,"byte_end":82287,"line_start":49,"line_end":49,"column_start":1,"column_end":140}},{"value":"/     Lanczos with window 3","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82288,"byte_end":82317,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/   </div>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82318,"byte_end":82330,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ </div>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82331,"byte_end":82341,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82342,"byte_end":82345,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Speed","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82346,"byte_end":82358,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82359,"byte_end":82362,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Time required to create each of the examples above, tested on an Intel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82363,"byte_end":82437,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ i7-4770 CPU with Rust 1.37 in release mode:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82438,"byte_end":82485,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82486,"byte_end":82489,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ <table style=\"width: auto;\">","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82490,"byte_end":82522,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/   <tr>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82523,"byte_end":82533,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/     <th>Nearest</th>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82534,"byte_end":82558,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     <td>31 ms</td>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82559,"byte_end":82581,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/   </tr>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82582,"byte_end":82593,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82594,"byte_end":82604,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/     <th>Triangle</th>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82605,"byte_end":82630,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/     <td>414 ms</td>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82631,"byte_end":82654,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82655,"byte_end":82666,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82667,"byte_end":82677,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/     <th>CatmullRom</th>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82678,"byte_end":82705,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/     <td>817 ms</td>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82706,"byte_end":82729,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82730,"byte_end":82741,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82742,"byte_end":82752,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/     <th>Gaussian</th>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82753,"byte_end":82778,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     <td>1180 ms</td>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82779,"byte_end":82803,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82804,"byte_end":82815,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82816,"byte_end":82826,"line_start":76,"line_end":76,"column_start":1,"column_end":11}},{"value":"/     <th>Lanczos3</th>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82827,"byte_end":82852,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     <td>1170 ms</td>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82853,"byte_end":82877,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82878,"byte_end":82889,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ </table>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":82890,"byte_end":82902,"line_start":80,"line_end":80,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":645},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":93428,"byte_end":93437,"line_start":424,"line_end":424,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"pub fn thumbnail<I, P, S>(&I, u32, u32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + Enlargeable + 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":92682,"byte_end":92739,"line_start":412,"line_end":412,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":92740,"byte_end":92743,"line_start":413,"line_end":413,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":92744,"byte_end":92842,"line_start":414,"line_end":414,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":92843,"byte_end":92938,"line_start":415,"line_end":415,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":92939,"byte_end":92942,"line_start":416,"line_end":416,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":92943,"byte_end":93037,"line_start":417,"line_end":417,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":93038,"byte_end":93135,"line_start":418,"line_end":418,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":93136,"byte_end":93232,"line_start":419,"line_end":419,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":93233,"byte_end":93269,"line_start":420,"line_end":420,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":93270,"byte_end":93273,"line_start":421,"line_end":421,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":93274,"byte_end":93373,"line_start":422,"line_end":422,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":93374,"byte_end":93420,"line_start":423,"line_end":423,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":668},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":101553,"byte_end":101562,"line_start":671,"line_end":671,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"pub fn filter3x3<I, P, S>(&I, &[f32]) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":101430,"byte_end":101481,"line_start":669,"line_end":669,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":101482,"byte_end":101545,"line_start":670,"line_end":670,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":673},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":104065,"byte_end":104071,"line_start":753,"line_end":753,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"pub fn resize<I: GenericImageView>(&I, u32, u32, FilterType)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":103892,"byte_end":103950,"line_start":750,"line_end":750,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":103951,"byte_end":104009,"line_start":751,"line_end":751,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":104010,"byte_end":104057,"line_start":752,"line_end":752,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":675},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":105261,"byte_end":105265,"line_start":793,"line_end":793,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"pub fn blur<I: GenericImageView>(&I, f32)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":105149,"byte_end":105200,"line_start":791,"line_end":791,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":105201,"byte_end":105253,"line_start":792,"line_end":792,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":678},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":106180,"byte_end":106189,"line_start":821,"line_end":821,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"pub fn unsharpen<I, P, S>(&I, f32, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for minimal brightness change that will be sharpened.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":105892,"byte_end":105945,"line_start":816,"line_end":816,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":105946,"byte_end":105997,"line_start":817,"line_end":817,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for minimal brightness change that will be sharpened.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":105998,"byte_end":106088,"line_start":818,"line_end":818,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":106089,"byte_end":106092,"line_start":819,"line_end":819,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":106093,"byte_end":106172,"line_start":820,"line_end":820,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":683},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32372,"byte_end":32376,"line_start":35,"line_end":35,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"pub fn crop<I: GenericImageView>(&mut I, u32, u32, u32, u32)\n-> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n The coordinates set the position of the top left corner of the crop.\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32252,"byte_end":32291,"line_start":33,"line_end":33,"column_start":1,"column_end":40}},{"value":"/ The coordinates set the position of the top left corner of the crop.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32292,"byte_end":32364,"line_start":34,"line_end":34,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":685},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32743,"byte_end":32751,"line_start":48,"line_end":48,"column_start":8,"column_end":16},"name":"crop_imm","qualname":"::imageops::crop_imm","value":"pub fn crop_imm<I: GenericImageView>(&I, u32, u32, u32, u32) -> SubImage<&I>","parent":null,"children":[],"decl_id":null,"docs":" Return an immutable view into an image\n The coordinates set the position of the top left corner of the crop.\n","sig":null,"attributes":[{"value":"/ Return an immutable view into an image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32620,"byte_end":32662,"line_start":46,"line_end":46,"column_start":1,"column_end":43}},{"value":"/ The coordinates set the position of the top left corner of the crop.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32663,"byte_end":32735,"line_start":47,"line_end":47,"column_start":1,"column_end":73}}]},{"kind":"Function","id":{"krate":0,"index":689},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35535,"byte_end":35549,"line_start":132,"line_end":132,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"pub fn overlay_bounds((u32, u32), (u32, u32), u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33363,"byte_end":33426,"line_start":77,"line_end":77,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33427,"byte_end":33430,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33431,"byte_end":33528,"line_start":79,"line_end":79,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33529,"byte_end":33614,"line_start":80,"line_end":80,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33615,"byte_end":33652,"line_start":81,"line_end":81,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33653,"byte_end":33687,"line_start":82,"line_end":82,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33688,"byte_end":33739,"line_start":83,"line_end":83,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33740,"byte_end":33743,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33744,"byte_end":33837,"line_start":85,"line_end":85,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33838,"byte_end":33937,"line_start":86,"line_end":86,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33938,"byte_end":33958,"line_start":87,"line_end":87,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33959,"byte_end":33962,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":33963,"byte_end":34019,"line_start":89,"line_end":89,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34020,"byte_end":34081,"line_start":90,"line_end":90,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34082,"byte_end":34132,"line_start":91,"line_end":91,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34133,"byte_end":34136,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34137,"byte_end":34236,"line_start":93,"line_end":93,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34237,"byte_end":34330,"line_start":94,"line_end":94,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34331,"byte_end":34404,"line_start":95,"line_end":95,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34405,"byte_end":34408,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34409,"byte_end":34420,"line_start":97,"line_end":97,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34421,"byte_end":34451,"line_start":98,"line_end":98,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34452,"byte_end":34507,"line_start":99,"line_end":99,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34508,"byte_end":34567,"line_start":100,"line_end":100,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34568,"byte_end":34636,"line_start":101,"line_end":101,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34637,"byte_end":34640,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34641,"byte_end":34743,"line_start":103,"line_end":103,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34744,"byte_end":34747,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34748,"byte_end":34759,"line_start":105,"line_end":105,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34760,"byte_end":34832,"line_start":106,"line_end":106,"column_start":1,"column_end":73}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34833,"byte_end":34870,"line_start":107,"line_end":107,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34871,"byte_end":34874,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34875,"byte_end":34896,"line_start":109,"line_end":109,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34897,"byte_end":34927,"line_start":110,"line_end":110,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34928,"byte_end":34971,"line_start":111,"line_end":111,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34972,"byte_end":34993,"line_start":112,"line_end":112,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":34994,"byte_end":35015,"line_start":113,"line_end":113,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35016,"byte_end":35019,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35020,"byte_end":35083,"line_start":115,"line_end":115,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35084,"byte_end":35087,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ x + x_range","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35088,"byte_end":35103,"line_start":117,"line_end":117,"column_start":1,"column_end":16}},{"value":"/ <= x + bottom_width.saturating_sub(x)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35104,"byte_end":35145,"line_start":118,"line_end":118,"column_start":1,"column_end":42}},{"value":"/  = x + (bottom_width - x)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35146,"byte_end":35175,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/  = bottom_width","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35176,"byte_end":35195,"line_start":120,"line_end":120,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35196,"byte_end":35199,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35200,"byte_end":35242,"line_start":122,"line_end":122,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35243,"byte_end":35246,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35247,"byte_end":35258,"line_start":124,"line_end":124,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35259,"byte_end":35331,"line_start":125,"line_end":125,"column_start":1,"column_end":73}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35332,"byte_end":35384,"line_start":126,"line_end":126,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35385,"byte_end":35425,"line_start":127,"line_end":127,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35426,"byte_end":35481,"line_start":128,"line_end":128,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35482,"byte_end":35489,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35490,"byte_end":35493,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":35494,"byte_end":35527,"line_start":131,"line_end":131,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":691},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":38854,"byte_end":38861,"line_start":215,"line_end":215,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"pub fn overlay<I, J>(&mut I, &J, i64, i64) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":38797,"byte_end":38846,"line_start":214,"line_end":214,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":694},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39966,"byte_end":39970,"line_start":250,"line_end":250,"column_start":8,"column_end":12},"name":"tile","qualname":"::imageops::tile","value":"pub fn tile<I, J>(&mut I, &J) where I: GenericImage, J: GenericImageView<Pixel\n= I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Tile an image by repeating it multiple times","sig":null,"attributes":[{"value":"/ Tile an image by repeating it multiple times","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39648,"byte_end":39696,"line_start":238,"line_end":238,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39697,"byte_end":39700,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39701,"byte_end":39715,"line_start":240,"line_end":240,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39716,"byte_end":39729,"line_start":241,"line_end":241,"column_start":1,"column_end":14}},{"value":"/ use image::{RgbaImage};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39730,"byte_end":39757,"line_start":242,"line_end":242,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39758,"byte_end":39761,"line_start":243,"line_end":243,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbaImage::new(1920, 1080);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39762,"byte_end":39807,"line_start":244,"line_end":244,"column_start":1,"column_end":46}},{"value":"/ let tile = image::open(\"tile.png\").unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39808,"byte_end":39856,"line_start":245,"line_end":245,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39857,"byte_end":39860,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ image::imageops::tile(&mut img, &tile);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39861,"byte_end":39904,"line_start":247,"line_end":247,"column_start":1,"column_end":44}},{"value":"/ img.save(\"tiled_wallpaper.png\").unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39905,"byte_end":39950,"line_start":248,"line_end":248,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":39951,"byte_end":39958,"line_start":249,"line_end":249,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":697},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40743,"byte_end":40760,"line_start":276,"line_end":276,"column_start":8,"column_end":25},"name":"vertical_gradient","qualname":"::imageops::vertical_gradient","value":"pub fn vertical_gradient<S, P, I>(&mut I, &P, &P) where I: GenericImage<Pixel\n= P>, P: Pixel<Subpixel = S> + 'static, S: Primitive + Lerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear vertical gradient","sig":null,"attributes":[{"value":"/ Fill the image with a linear vertical gradient","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40291,"byte_end":40341,"line_start":262,"line_end":262,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40342,"byte_end":40345,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40346,"byte_end":40393,"line_start":264,"line_end":264,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40394,"byte_end":40397,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40398,"byte_end":40412,"line_start":266,"line_end":266,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40413,"byte_end":40426,"line_start":267,"line_end":267,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40427,"byte_end":40467,"line_start":268,"line_end":268,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40468,"byte_end":40471,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40472,"byte_end":40515,"line_start":270,"line_end":270,"column_start":1,"column_end":44}},{"value":"/ let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40516,"byte_end":40566,"line_start":271,"line_end":271,"column_start":1,"column_end":51}},{"value":"/ let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40567,"byte_end":40621,"line_start":272,"line_end":272,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40622,"byte_end":40625,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ image::imageops::vertical_gradient(&mut img, start, end);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40626,"byte_end":40687,"line_start":274,"line_end":274,"column_start":1,"column_end":62}},{"value":"/ img.save(\"vertical_gradient.png\").unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":40688,"byte_end":40735,"line_start":275,"line_end":275,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":702},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41762,"byte_end":41781,"line_start":309,"line_end":309,"column_start":8,"column_end":27},"name":"horizontal_gradient","qualname":"::imageops::horizontal_gradient","value":"pub fn horizontal_gradient<S, P, I>(&mut I, &P, &P) where\nI: GenericImage<Pixel = P>, P: Pixel<Subpixel = S> + 'static, S: Primitive +\nLerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear horizontal gradient","sig":null,"attributes":[{"value":"/ Fill the image with a linear horizontal gradient","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41304,"byte_end":41356,"line_start":295,"line_end":295,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41357,"byte_end":41360,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41361,"byte_end":41408,"line_start":297,"line_end":297,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41409,"byte_end":41412,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41413,"byte_end":41427,"line_start":299,"line_end":299,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41428,"byte_end":41441,"line_start":300,"line_end":300,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41442,"byte_end":41482,"line_start":301,"line_end":301,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41483,"byte_end":41486,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41487,"byte_end":41530,"line_start":303,"line_end":303,"column_start":1,"column_end":44}},{"value":"/ let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41531,"byte_end":41581,"line_start":304,"line_end":304,"column_start":1,"column_end":51}},{"value":"/ let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41582,"byte_end":41636,"line_start":305,"line_end":305,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41637,"byte_end":41640,"line_start":306,"line_end":306,"column_start":1,"column_end":4}},{"value":"/ image::imageops::horizontal_gradient(&mut img, start, end);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41641,"byte_end":41704,"line_start":307,"line_end":307,"column_start":1,"column_end":64}},{"value":"/ img.save(\"horizontal_gradient.png\").unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":41705,"byte_end":41754,"line_start":308,"line_end":308,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":42395,"byte_end":42402,"line_start":329,"line_end":329,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"pub fn replace<I, J>(&mut I, &J, i64, i64) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":42322,"byte_end":42387,"line_start":328,"line_end":328,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":710},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":718},{"krate":0,"index":721},{"krate":0,"index":724},{"krate":0,"index":829},{"krate":0,"index":912},{"krate":0,"index":6337},{"krate":0,"index":6339},{"krate":0,"index":6341},{"krate":0,"index":6343},{"krate":0,"index":6344},{"krate":0,"index":6346},{"krate":0,"index":6347},{"krate":0,"index":6350},{"krate":0,"index":915},{"krate":0,"index":6353},{"krate":0,"index":6358},{"krate":0,"index":6360},{"krate":0,"index":6362},{"krate":0,"index":6363},{"krate":0,"index":6365},{"krate":0,"index":6366},{"krate":0,"index":6369},{"krate":0,"index":917},{"krate":0,"index":919}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[{"value":"/ Input and output of images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":110698,"byte_end":110729,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Function","id":{"krate":0,"index":789},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":117646,"byte_end":117650,"line_start":36,"line_end":36,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"pub fn load<R: BufRead + Seek>(R, ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader.","sig":null,"attributes":[{"value":"/ Create a new image from a Reader.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":117299,"byte_end":117336,"line_start":26,"line_end":26,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":117337,"byte_end":117340,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ Assumes the reader is already buffered. For optimal performance,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":117341,"byte_end":117409,"line_start":28,"line_end":28,"column_start":1,"column_end":69}},{"value":"/ consider wrapping the reader with a `BufReader::new()`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":117410,"byte_end":117469,"line_start":29,"line_end":29,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":117470,"byte_end":117473,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":117474,"byte_end":117520,"line_start":31,"line_end":31,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":117521,"byte_end":117524,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":117525,"byte_end":117566,"line_start":33,"line_end":33,"column_start":1,"column_end":42}},{"value":"allow(unused_variables)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":117567,"byte_end":117593,"line_start":34,"line_end":34,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":792},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":117826,"byte_end":117832,"line_start":41,"line_end":41,"column_start":10,"column_end":16},"name":"Result","qualname":"::io::free_functions::DecoderVisitor::Result","value":"type Result;","parent":{"krate":0,"index":791},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":827},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":127229,"byte_end":127241,"line_start":285,"line_end":285,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"pub fn guess_format(&[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":126968,"byte_end":127008,"line_start":280,"line_end":280,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":127009,"byte_end":127012,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":127013,"byte_end":127106,"line_start":282,"line_end":282,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":127107,"byte_end":127149,"line_start":283,"line_end":283,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":127150,"byte_end":127221,"line_start":284,"line_end":284,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":884},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129737,"byte_end":129743,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[{"value":"/ A multi-format image reader.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":127995,"byte_end":128027,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128028,"byte_end":128031,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Wraps an input reader to facilitate automatic detection of an image's format, appropriate","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128032,"byte_end":128125,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128126,"byte_end":128221,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128222,"byte_end":128225,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128226,"byte_end":128238,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128239,"byte_end":128242,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Opening a file, deducing the format based on the file path automatically, and trying to decode","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128243,"byte_end":128341,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ the image contained can be performed by constructing the reader and immediately consuming it.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128342,"byte_end":128439,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128440,"byte_end":128443,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128444,"byte_end":128457,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128458,"byte_end":128486,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128487,"byte_end":128515,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128516,"byte_end":128559,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ let image = Reader::open(\"path/to/image.png\")?","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128560,"byte_end":128610,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/     .decode()?;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128611,"byte_end":128630,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128631,"byte_end":128645,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128646,"byte_end":128653,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128654,"byte_end":128657,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is also possible to make a guess based on the content. This is especially handy if the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128658,"byte_end":128751,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ source is some blob in memory and you have constructed the reader in another way. Here is an","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128752,"byte_end":128848,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128849,"byte_end":128948,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128949,"byte_end":128952,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128953,"byte_end":128960,"line_start":35,"line_end":35,"column_start":1,"column_end":8}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128961,"byte_end":128989,"line_start":36,"line_end":36,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":128990,"byte_end":129018,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129019,"byte_end":129062,"line_start":38,"line_end":38,"column_start":1,"column_end":44}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129063,"byte_end":129087,"line_start":39,"line_end":39,"column_start":1,"column_end":25}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129088,"byte_end":129115,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129116,"byte_end":129119,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ let raw_data = b\"P1 2 2\\n\\","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129120,"byte_end":129150,"line_start":42,"line_end":42,"column_start":1,"column_end":31}},{"value":"/     0 1\\n\\","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129151,"byte_end":129165,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"/     1 0\\n\";","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129166,"byte_end":129181,"line_start":44,"line_end":44,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129182,"byte_end":129185,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(Cursor::new(raw_data))","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129186,"byte_end":129241,"line_start":46,"line_end":46,"column_start":1,"column_end":56}},{"value":"/     .with_guessed_format()","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129242,"byte_end":129272,"line_start":47,"line_end":47,"column_start":1,"column_end":31}},{"value":"/     .expect(\"Cursor io never fails\");","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129273,"byte_end":129314,"line_start":48,"line_end":48,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(reader.format(), Some(ImageFormat::Pnm));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129315,"byte_end":129371,"line_start":49,"line_end":49,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129372,"byte_end":129375,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ # #[cfg(feature = \"pnm\")]","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129376,"byte_end":129405,"line_start":51,"line_end":51,"column_start":1,"column_end":30}},{"value":"/ let image = reader.decode()?;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129406,"byte_end":129439,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129440,"byte_end":129454,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129455,"byte_end":129462,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129463,"byte_end":129466,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ As a final fallback or if only a specific format must be used, the reader always allows manual","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129467,"byte_end":129565,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ specification of the supposed image format with [`set_format`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129566,"byte_end":129633,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129634,"byte_end":129637,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`set_format`]: #method.set_format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129638,"byte_end":129676,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ [`ImageDecoder`]: ../trait.ImageDecoder.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129677,"byte_end":129725,"line_start":60,"line_end":60,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130480,"byte_end":130483,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[{"value":"/ Create a new image reader without a preset format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129978,"byte_end":130032,"line_start":71,"line_end":71,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130037,"byte_end":130040,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ Assumes the reader is already buffered. For optimal performance,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130045,"byte_end":130113,"line_start":73,"line_end":73,"column_start":5,"column_end":73}},{"value":"/ consider wrapping the reader with a `BufReader::new()`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130118,"byte_end":130177,"line_start":74,"line_end":74,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130182,"byte_end":130185,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ It is possible to guess the format based on the content of the read object with","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130190,"byte_end":130273,"line_start":76,"line_end":76,"column_start":5,"column_end":88}},{"value":"/ [`with_guessed_format`], or to set the format directly with [`set_format`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130278,"byte_end":130357,"line_start":77,"line_end":77,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130362,"byte_end":130365,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130370,"byte_end":130426,"line_start":79,"line_end":79,"column_start":5,"column_end":61}},{"value":"/ [`set_format`]: method.set_format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130431,"byte_end":130468,"line_start":80,"line_end":80,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130862,"byte_end":130873,"line_start":93,"line_end":93,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"pub fn with_format(R, ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.","sig":null,"attributes":[{"value":"/ Construct a reader with specified format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130660,"byte_end":130705,"line_start":89,"line_end":89,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130710,"byte_end":130713,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ Assumes the reader is already buffered. For optimal performance,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130718,"byte_end":130786,"line_start":91,"line_end":91,"column_start":5,"column_end":73}},{"value":"/ consider wrapping the reader with a `BufReader::new()`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":130791,"byte_end":130850,"line_start":92,"line_end":92,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131131,"byte_end":131137,"line_start":102,"line_end":102,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"pub fn format(&Self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[{"value":"/ Get the currently determined format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131079,"byte_end":131119,"line_start":101,"line_end":101,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131272,"byte_end":131282,"line_start":107,"line_end":107,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"pub fn set_format(&mut Self, ImageFormat)","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[{"value":"/ Supply the format as which to interpret the read image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131201,"byte_end":131260,"line_start":106,"line_end":106,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131612,"byte_end":131624,"line_start":115,"line_end":115,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"pub fn clear_format(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[{"value":"/ Remove the current information on the image format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131364,"byte_end":131419,"line_start":111,"line_end":111,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131424,"byte_end":131427,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Note that many operations require format information to be present and will return e.g. an","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131432,"byte_end":131526,"line_start":113,"line_end":113,"column_start":5,"column_end":99}},{"value":"/ `ImageError::Unsupported` when the image format has not been set.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131531,"byte_end":131600,"line_start":114,"line_end":114,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131721,"byte_end":131730,"line_start":120,"line_end":120,"column_start":12,"column_end":21},"name":"no_limits","qualname":"<Reader<R>>::no_limits","value":"pub fn no_limits(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Disable all decoding limits.\n","sig":null,"attributes":[{"value":"/ Disable all decoding limits.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131677,"byte_end":131709,"line_start":119,"line_end":119,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131857,"byte_end":131863,"line_start":125,"line_end":125,"column_start":12,"column_end":18},"name":"limits","qualname":"<Reader<R>>::limits","value":"pub fn limits(&mut Self, super::Limits)","parent":null,"children":[],"decl_id":null,"docs":" Set a custom set of decoding limits.\n","sig":null,"attributes":[{"value":"/ Set a custom set of decoding limits.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131805,"byte_end":131845,"line_start":124,"line_end":124,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131975,"byte_end":131985,"line_start":130,"line_end":130,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the reader.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":131941,"byte_end":131963,"line_start":129,"line_end":129,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132468,"byte_end":132472,"line_start":144,"line_end":144,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"pub fn open<P>(P) -> io::Result<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[{"value":"/ Open a file to read, format will be guessed from path.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132062,"byte_end":132120,"line_start":136,"line_end":136,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132125,"byte_end":132128,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ This will not attempt any io operation on the opened file.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132133,"byte_end":132195,"line_start":138,"line_end":138,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132200,"byte_end":132203,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ If you want to inspect the content for a better guess on the format, which does not depend","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132208,"byte_end":132302,"line_start":140,"line_end":140,"column_start":5,"column_end":99}},{"value":"/ on file extensions, follow this call with a call to [`with_guessed_format`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132307,"byte_end":132387,"line_start":141,"line_end":141,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132392,"byte_end":132395,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132400,"byte_end":132456,"line_start":143,"line_end":143,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":134152,"byte_end":134171,"line_start":189,"line_end":189,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"pub fn with_guessed_format(Self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[{"value":"/ Make a format guess based on the content, replacing it on success.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132878,"byte_end":132948,"line_start":161,"line_end":161,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132953,"byte_end":132956,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132961,"byte_end":133050,"line_start":163,"line_end":163,"column_start":5,"column_end":94}},{"value":"/ format if the guess was successful. If the guess was unable to determine a format then","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133055,"byte_end":133145,"line_start":164,"line_end":164,"column_start":5,"column_end":95}},{"value":"/ the current format of the reader is unchanged.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133150,"byte_end":133200,"line_start":165,"line_end":165,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133205,"byte_end":133208,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the underlying reader fails. The format is unchanged. The error is a","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133213,"byte_end":133305,"line_start":167,"line_end":167,"column_start":5,"column_end":97}},{"value":"/ `std::io::Error` and not `ImageError` since the only error case is an error when the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133310,"byte_end":133398,"line_start":168,"line_end":168,"column_start":5,"column_end":93}},{"value":"/ underlying reader seeks.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133403,"byte_end":133431,"line_start":169,"line_end":169,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133436,"byte_end":133439,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ When an error occurs, the reader may not have been properly reset and it is potentially","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133444,"byte_end":133535,"line_start":171,"line_end":171,"column_start":5,"column_end":96}},{"value":"/ hazardous to continue with more io.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133540,"byte_end":133579,"line_start":172,"line_end":172,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133584,"byte_end":133587,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133592,"byte_end":133604,"line_start":174,"line_end":174,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133609,"byte_end":133612,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This supplements the path based type deduction from [`open`](Reader::open) with content based deduction.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133617,"byte_end":133725,"line_start":176,"line_end":176,"column_start":5,"column_end":113}},{"value":"/ This is more common in Linux and UNIX operating systems and also helpful if the path can","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133730,"byte_end":133822,"line_start":177,"line_end":177,"column_start":5,"column_end":97}},{"value":"/ not be directly controlled.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133827,"byte_end":133858,"line_start":178,"line_end":178,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133863,"byte_end":133866,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133871,"byte_end":133884,"line_start":180,"line_end":180,"column_start":5,"column_end":18}},{"value":"/ # use image::ImageError;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133889,"byte_end":133917,"line_start":181,"line_end":181,"column_start":5,"column_end":33}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133922,"byte_end":133950,"line_start":182,"line_end":182,"column_start":5,"column_end":33}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":133955,"byte_end":133998,"line_start":183,"line_end":183,"column_start":5,"column_end":48}},{"value":"/ let image = Reader::open(\"image.unknown\")?","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":134003,"byte_end":134049,"line_start":184,"line_end":184,"column_start":5,"column_end":51}},{"value":"/     .with_guessed_format()?","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":134054,"byte_end":134085,"line_start":185,"line_end":185,"column_start":5,"column_end":36}},{"value":"/     .decode()?;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":134090,"byte_end":134109,"line_start":186,"line_end":186,"column_start":5,"column_end":24}},{"value":"/ # Ok(()) }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":134114,"byte_end":134128,"line_start":187,"line_end":187,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":134133,"byte_end":134140,"line_start":188,"line_end":188,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":135139,"byte_end":135154,"line_start":216,"line_end":216,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"pub fn into_dimensions(Self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[{"value":"/ Read the image dimensions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":134926,"byte_end":134956,"line_start":211,"line_end":211,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":134961,"byte_end":134964,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":134969,"byte_end":135044,"line_start":213,"line_end":213,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":135049,"byte_end":135052,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":135057,"byte_end":135127,"line_start":215,"line_end":215,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":135548,"byte_end":135554,"line_start":226,"line_end":226,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"pub fn decode(Self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[{"value":"/ Read the image (replaces `load`).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":135328,"byte_end":135365,"line_start":221,"line_end":221,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":135370,"byte_end":135373,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":135378,"byte_end":135453,"line_start":223,"line_end":223,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":135458,"byte_end":135461,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":135466,"byte_end":135536,"line_start":225,"line_end":225,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":6337},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111025,"byte_end":111037,"line_start":15,"line_end":15,"column_start":12,"column_end":24},"name":"LimitSupport","qualname":"::io::LimitSupport","value":"LimitSupport {  }","parent":null,"children":[{"krate":0,"index":6338}],"decl_id":null,"docs":" Set of supported strict limits for a decoder.\n","sig":null,"attributes":[{"value":"/ Set of supported strict limits for a decoder.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":110880,"byte_end":110929,"line_start":12,"line_end":12,"column_start":1,"column_end":50}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":110975,"byte_end":111013,"line_start":14,"line_end":14,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":6353},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112580,"byte_end":112586,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"Limits","qualname":"::io::Limits","value":"Limits { max_image_width, max_image_height, max_alloc }","parent":null,"children":[{"krate":0,"index":6354},{"krate":0,"index":6355},{"krate":0,"index":6356},{"krate":0,"index":6357}],"decl_id":null,"docs":" Resource limits for decoding.","sig":null,"attributes":[{"value":"/ Resource limits for decoding.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111210,"byte_end":111243,"line_start":27,"line_end":27,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111244,"byte_end":111247,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Limits can be either *strict* or *non-strict*. Non-strict limits are best-effort","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111248,"byte_end":111332,"line_start":29,"line_end":29,"column_start":1,"column_end":85}},{"value":"/ limits where the library does not guarantee that limit will not be exceeded. Do note","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111333,"byte_end":111421,"line_start":30,"line_end":30,"column_start":1,"column_end":89}},{"value":"/ that it is still considered a bug if a non-strict limit is exceeded, however as","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111422,"byte_end":111505,"line_start":31,"line_end":31,"column_start":1,"column_end":84}},{"value":"/ some of the underlying decoders do not support not support such limits one cannot","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111506,"byte_end":111591,"line_start":32,"line_end":32,"column_start":1,"column_end":86}},{"value":"/ rely on these limits being supported. For stric limits the library makes a stronger","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111592,"byte_end":111679,"line_start":33,"line_end":33,"column_start":1,"column_end":88}},{"value":"/ guarantee that the limit will not be exceeded. Exceeding a strict limit is considered","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111680,"byte_end":111769,"line_start":34,"line_end":34,"column_start":1,"column_end":90}},{"value":"/ a critical bug. If a decoder cannot guarantee that it will uphold a strict limit it","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111770,"byte_end":111857,"line_start":35,"line_end":35,"column_start":1,"column_end":88}},{"value":"/ *must* fail with `image::error::LimitErrorKind::Unsupported`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111858,"byte_end":111923,"line_start":36,"line_end":36,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111924,"byte_end":111927,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ Currently the only strict limits supported are the `max_image_width` and `max_image_height`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111928,"byte_end":112023,"line_start":38,"line_end":38,"column_start":1,"column_end":96}},{"value":"/ limits, however more will be added in the future. [`LimitSupport`] will default to support","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112024,"byte_end":112118,"line_start":39,"line_end":39,"column_start":1,"column_end":95}},{"value":"/ being false and decoders should enable support for the limits they support in","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112119,"byte_end":112200,"line_start":40,"line_end":40,"column_start":1,"column_end":82}},{"value":"/ [`ImageDecoder::set_limits`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112201,"byte_end":112234,"line_start":41,"line_end":41,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112235,"byte_end":112238,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ The limit check should only ever fail if a limit will be exceeded or an unsupported strict","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112239,"byte_end":112333,"line_start":43,"line_end":43,"column_start":1,"column_end":95}},{"value":"/ limit is used.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112334,"byte_end":112352,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112353,"byte_end":112356,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ [`LimitSupport`]: ./struct.LimitSupport.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112357,"byte_end":112405,"line_start":46,"line_end":46,"column_start":1,"column_end":49}},{"value":"/ [`ImageDecoder::set_limits`]: ../trait.ImageDecoder.html#method.set_limits","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112406,"byte_end":112484,"line_start":47,"line_end":47,"column_start":1,"column_end":79}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112530,"byte_end":112568,"line_start":49,"line_end":49,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":6354},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112685,"byte_end":112700,"line_start":52,"line_end":52,"column_start":9,"column_end":24},"name":"max_image_width","qualname":"::io::Limits::max_image_width","value":"std::option::Option<u32>","parent":{"krate":0,"index":6353},"children":[],"decl_id":null,"docs":" The maximum allowed image width. This limit is strict. The default is no limit.\n","sig":null,"attributes":[{"value":"/ The maximum allowed image width. This limit is strict. The default is no limit.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112593,"byte_end":112676,"line_start":51,"line_end":51,"column_start":5,"column_end":88}}]},{"kind":"Field","id":{"krate":0,"index":6355},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112812,"byte_end":112828,"line_start":54,"line_end":54,"column_start":9,"column_end":25},"name":"max_image_height","qualname":"::io::Limits::max_image_height","value":"std::option::Option<u32>","parent":{"krate":0,"index":6353},"children":[],"decl_id":null,"docs":" The maximum allowed image height. This limit is strict. The default is no limit.\n","sig":null,"attributes":[{"value":"/ The maximum allowed image height. This limit is strict. The default is no limit.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112719,"byte_end":112803,"line_start":53,"line_end":53,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":6356},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113076,"byte_end":113085,"line_start":58,"line_end":58,"column_start":9,"column_end":18},"name":"max_alloc","qualname":"::io::Limits::max_alloc","value":"std::option::Option<u64>","parent":{"krate":0,"index":6353},"children":[],"decl_id":null,"docs":" The maximum allowed sum of allocations allocated by the decoder at any one time exluding\n allocator overhead. This limit is non-strict by default and some decoders may ignore it.\n The default is 512MiB.\n","sig":null,"attributes":[{"value":"/ The maximum allowed sum of allocations allocated by the decoder at any one time exluding","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112847,"byte_end":112939,"line_start":55,"line_end":55,"column_start":5,"column_end":97}},{"value":"/ allocator overhead. This limit is non-strict by default and some decoders may ignore it.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":112944,"byte_end":113036,"line_start":56,"line_end":56,"column_start":5,"column_end":97}},{"value":"/ The default is 512MiB.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113041,"byte_end":113067,"line_start":57,"line_end":57,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":920},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113424,"byte_end":113433,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"no_limits","qualname":"<Limits>::no_limits","value":"pub fn no_limits() -> Limits","parent":null,"children":[],"decl_id":null,"docs":" Disable all limits.\n","sig":null,"attributes":[{"value":"/ Disable all limits.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113389,"byte_end":113412,"line_start":74,"line_end":74,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":921},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113707,"byte_end":113720,"line_start":85,"line_end":85,"column_start":12,"column_end":25},"name":"check_support","qualname":"<Limits>::check_support","value":"pub fn check_support(&Self, &LimitSupport) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" This function checks that all currently set strict limits are supported.\n","sig":null,"attributes":[{"value":"/ This function checks that all currently set strict limits are supported.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113619,"byte_end":113695,"line_start":84,"line_end":84,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":922},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113932,"byte_end":113948,"line_start":91,"line_end":91,"column_start":12,"column_end":28},"name":"check_dimensions","qualname":"<Limits>::check_dimensions","value":"pub fn check_dimensions(&Self, u32, u32) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" This function checks the `max_image_width` and `max_image_height` limits given\n the image width and height.\n","sig":null,"attributes":[{"value":"/ This function checks the `max_image_width` and `max_image_height` limits given","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113802,"byte_end":113884,"line_start":89,"line_end":89,"column_start":5,"column_end":87}},{"value":"/ the image width and height.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113889,"byte_end":113920,"line_start":90,"line_end":90,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":923},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":114728,"byte_end":114735,"line_start":113,"line_end":113,"column_start":12,"column_end":19},"name":"reserve","qualname":"<Limits>::reserve","value":"pub fn reserve(&mut Self, u64) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" This function checks that the current limit allows for reserving the set amount\n of bytes, it then reduces the limit accordingly.\n","sig":null,"attributes":[{"value":"/ This function checks that the current limit allows for reserving the set amount","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":114576,"byte_end":114659,"line_start":111,"line_end":111,"column_start":5,"column_end":88}},{"value":"/ of bytes, it then reduces the limit accordingly.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":114664,"byte_end":114716,"line_start":112,"line_end":112,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":115222,"byte_end":115235,"line_start":128,"line_end":128,"column_start":12,"column_end":25},"name":"reserve_usize","qualname":"<Limits>::reserve_usize","value":"pub fn reserve_usize(&mut Self, usize) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" This function acts identically to [`reserve`], but takes a `usize` for convenience.\n","sig":null,"attributes":[{"value":"/ This function acts identically to [`reserve`], but takes a `usize` for convenience.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":115123,"byte_end":115210,"line_start":127,"line_end":127,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":925},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":115919,"byte_end":115923,"line_start":147,"line_end":147,"column_start":12,"column_end":16},"name":"free","qualname":"<Limits>::free","value":"pub fn free(&mut Self, u64)","parent":null,"children":[],"decl_id":null,"docs":" This function increases the `max_alloc` limit with amount. Should only be used\n together with [`reserve`].","sig":null,"attributes":[{"value":"/ This function increases the `max_alloc` limit with amount. Should only be used","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":115745,"byte_end":115827,"line_start":143,"line_end":143,"column_start":5,"column_end":87}},{"value":"/ together with [`reserve`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":115832,"byte_end":115862,"line_start":144,"line_end":144,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":115867,"byte_end":115870,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ [`reserve`]: #method.reserve","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":115875,"byte_end":115907,"line_start":146,"line_end":146,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":926},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":116185,"byte_end":116195,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"free_usize","qualname":"<Limits>::free_usize","value":"pub fn free_usize(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" This function acts identically to [`free`], but takes a `usize` for convenience.\n","sig":null,"attributes":[{"value":"/ This function acts identically to [`free`], but takes a `usize` for convenience.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":116089,"byte_end":116173,"line_start":153,"line_end":153,"column_start":5,"column_end":89}}]},{"kind":"Mod","id":{"krate":0,"index":927},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","parent":null,"children":[{"krate":0,"index":928},{"krate":0,"index":929},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":935},{"krate":0,"index":938},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":945},{"krate":0,"index":948},{"krate":0,"index":951},{"krate":0,"index":954},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":961},{"krate":0,"index":964},{"krate":0,"index":967},{"krate":0,"index":970},{"krate":0,"index":973},{"krate":0,"index":976},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":983},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":6372},{"krate":0,"index":6377},{"krate":0,"index":6380},{"krate":0,"index":6383},{"krate":0,"index":6390},{"krate":0,"index":6392},{"krate":0,"index":6393},{"krate":0,"index":6395},{"krate":0,"index":6396},{"krate":0,"index":6399},{"krate":0,"index":6400},{"krate":0,"index":6402},{"krate":0,"index":6405},{"krate":0,"index":6409},{"krate":0,"index":6411},{"krate":0,"index":6412},{"krate":0,"index":6414},{"krate":0,"index":6415},{"krate":0,"index":6418},{"krate":0,"index":6419},{"krate":0,"index":6421},{"krate":0,"index":6423},{"krate":0,"index":996},{"krate":0,"index":1019},{"krate":0,"index":1023},{"krate":0,"index":1065},{"krate":0,"index":6425},{"krate":0,"index":6430},{"krate":0,"index":6434},{"krate":0,"index":6438},{"krate":0,"index":6443},{"krate":0,"index":6447},{"krate":0,"index":6451},{"krate":0,"index":6460},{"krate":0,"index":6462},{"krate":0,"index":6463},{"krate":0,"index":6465},{"krate":0,"index":6466},{"krate":0,"index":6469},{"krate":0,"index":6470},{"krate":0,"index":6472},{"krate":0,"index":6475},{"krate":0,"index":6486},{"krate":0,"index":6488},{"krate":0,"index":6489},{"krate":0,"index":6491},{"krate":0,"index":6492},{"krate":0,"index":6494},{"krate":0,"index":6495},{"krate":0,"index":6497},{"krate":0,"index":1070},{"krate":0,"index":1083},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1102},{"krate":0,"index":1106},{"krate":0,"index":1116},{"krate":0,"index":1126},{"krate":0,"index":1132},{"krate":0,"index":1137},{"krate":0,"index":1139},{"krate":0,"index":1140}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"/ Image representations for ffi.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136040,"byte_end":136074,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136075,"byte_end":136078,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136079,"byte_end":136090,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136091,"byte_end":136094,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136095,"byte_end":136193,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"/ your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136194,"byte_end":136293,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"/ to help you transition from raw memory data to Rust representation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136294,"byte_end":136365,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136366,"byte_end":136369,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136370,"byte_end":136383,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/ use std::ptr;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136384,"byte_end":136401,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"/ use std::slice;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136402,"byte_end":136421,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"/ use image::Rgb;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136422,"byte_end":136441,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"/ use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136442,"byte_end":136491,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"/ use image::imageops::thumbnail;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136492,"byte_end":136527,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136528,"byte_end":136531,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ #[no_mangle]","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136532,"byte_end":136548,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"/ pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136549,"byte_end":136593,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"/     data: *const u8, len: usize,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136594,"byte_end":136630,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"/     layout: *const SampleLayout","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136631,"byte_end":136666,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ )","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136667,"byte_end":136672,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"/     -> bool","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136673,"byte_end":136688,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"/ {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136689,"byte_end":136694,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"/     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136695,"byte_end":136761,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"/     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136762,"byte_end":136812,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136813,"byte_end":136816,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/     let buffer = FlatSamples {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136817,"byte_end":136851,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"/         samples,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136852,"byte_end":136872,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/         layout,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136873,"byte_end":136892,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"/         color_hint: None,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136893,"byte_end":136922,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136923,"byte_end":136933,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136934,"byte_end":136937,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136938,"byte_end":136992,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/         Err(_) => return false, // Invalid layout.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":136993,"byte_end":137047,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"/         Ok(view) => view,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137048,"byte_end":137077,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/     };","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137078,"byte_end":137088,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137089,"byte_end":137092,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/     thumbnail(&view, 64, 64)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137093,"byte_end":137125,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"/         .save(\"output.png\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137126,"byte_end":137157,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/         .map(|_| true)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137158,"byte_end":137184,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"/         .unwrap_or_else(|_| false)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137185,"byte_end":137223,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137224,"byte_end":137229,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137230,"byte_end":137237,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137238,"byte_end":137241,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6372},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139252,"byte_end":139263,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":6374},{"krate":0,"index":6375},{"krate":0,"index":6376}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137669,"byte_end":137716,"line_start":59,"line_end":59,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137717,"byte_end":137720,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137721,"byte_end":137818,"line_start":61,"line_end":61,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. It also allows grouping by color planes instead of by pixel as long as","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137819,"byte_end":137916,"line_start":62,"line_end":62,"column_start":1,"column_end":98}},{"value":"/ the strides of each extent are constant. This struct itself has no invariants on the strides","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":137917,"byte_end":138013,"line_start":63,"line_end":63,"column_start":1,"column_end":97}},{"value":"/ but not every possible configuration can be interpreted as a [`GenericImageView`] or","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138014,"byte_end":138102,"line_start":64,"line_end":64,"column_start":1,"column_end":89}},{"value":"/ [`GenericImage`]. The methods [`as_view`] and [`as_view_mut`] construct the actual implementors","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138103,"byte_end":138202,"line_start":65,"line_end":65,"column_start":1,"column_end":100}},{"value":"/ of these traits and perform necessary checks. To manually perform this and other layout checks","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138203,"byte_end":138301,"line_start":66,"line_end":66,"column_start":1,"column_end":99}},{"value":"/ use [`is_normal`] or [`has_aliased_samples`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138302,"byte_end":138351,"line_start":67,"line_end":67,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138352,"byte_end":138355,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ Instances can be constructed not only by hand. The buffer instances returned by library","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138356,"byte_end":138447,"line_start":69,"line_end":69,"column_start":1,"column_end":92}},{"value":"/ functions such as [`ImageBuffer::as_flat_samples`] guarantee that the conversion to a generic","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138448,"byte_end":138545,"line_start":70,"line_end":70,"column_start":1,"column_end":98}},{"value":"/ image or generic view succeeds. A very different constructor is [`with_monocolor`]. It uses a","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138546,"byte_end":138643,"line_start":71,"line_end":71,"column_start":1,"column_end":98}},{"value":"/ single pixel as the backing storage for an arbitrarily sized read-only raster by mapping each","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138644,"byte_end":138741,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"/ pixel to the same samples by setting some strides to `0`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138742,"byte_end":138803,"line_start":73,"line_end":73,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138804,"byte_end":138807,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: ../trait.GenericImage.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138808,"byte_end":138856,"line_start":75,"line_end":75,"column_start":1,"column_end":49}},{"value":"/ [`GenericImageView`]: ../trait.GenericImageView.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138857,"byte_end":138913,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/ [`ImageBuffer::as_flat_samples`]: ../struct.ImageBuffer.html#method.as_flat_samples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":138914,"byte_end":139001,"line_start":77,"line_end":77,"column_start":1,"column_end":88}},{"value":"/ [`is_normal`]: #method.is_normal","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139002,"byte_end":139038,"line_start":78,"line_end":78,"column_start":1,"column_end":37}},{"value":"/ [`has_aliased_samples`]: #method.has_aliased_samples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139039,"byte_end":139095,"line_start":79,"line_end":79,"column_start":1,"column_end":57}},{"value":"/ [`as_view`]: #method.as_view","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139096,"byte_end":139128,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/ [`as_view_mut`]: #method.as_view_mut","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139129,"byte_end":139169,"line_start":81,"line_end":81,"column_start":1,"column_end":41}},{"value":"/ [`with_monocolor`]: #method.with_monocolor","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139170,"byte_end":139216,"line_start":82,"line_end":82,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":6374},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139341,"byte_end":139348,"line_start":86,"line_end":86,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":6372},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139278,"byte_end":139332,"line_start":85,"line_end":85,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":6375},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139432,"byte_end":139438,"line_start":89,"line_end":89,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":6372},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139363,"byte_end":139423,"line_start":88,"line_end":88,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":6376},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139893,"byte_end":139903,"line_start":97,"line_end":97,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":6372},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139459,"byte_end":139495,"line_start":91,"line_end":91,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139500,"byte_end":139503,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139508,"byte_end":139593,"line_start":93,"line_end":93,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139598,"byte_end":139690,"line_start":94,"line_end":94,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139695,"byte_end":139784,"line_start":95,"line_end":95,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139789,"byte_end":139884,"line_start":96,"line_end":96,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":6383},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140053,"byte_end":140065,"line_start":103,"line_end":103,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":6384},{"krate":0,"index":6385},{"krate":0,"index":6386},{"krate":0,"index":6387},{"krate":0,"index":6388},{"krate":0,"index":6389}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139927,"byte_end":139979,"line_start":100,"line_end":100,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":139980,"byte_end":139990,"line_start":101,"line_end":101,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":6384},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140149,"byte_end":140157,"line_start":105,"line_end":105,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":6383},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140072,"byte_end":140140,"line_start":104,"line_end":104,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":6385},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140243,"byte_end":140257,"line_start":108,"line_end":108,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":6383},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140168,"byte_end":140234,"line_start":107,"line_end":107,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":6386},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140319,"byte_end":140324,"line_start":111,"line_end":111,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":6383},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140271,"byte_end":140310,"line_start":110,"line_end":110,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":6387},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140411,"byte_end":140423,"line_start":114,"line_end":114,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":6383},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140336,"byte_end":140402,"line_start":113,"line_end":113,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":6388},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140486,"byte_end":140492,"line_start":117,"line_end":117,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":6383},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140437,"byte_end":140477,"line_start":116,"line_end":116,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":6389},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140579,"byte_end":140592,"line_start":120,"line_end":120,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":6383},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140504,"byte_end":140570,"line_start":119,"line_end":119,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141567,"byte_end":141583,"line_start":144,"line_end":144,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"pub fn row_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140773,"byte_end":140829,"line_start":128,"line_end":128,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140834,"byte_end":140837,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140842,"byte_end":140937,"line_start":130,"line_end":130,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140942,"byte_end":141011,"line_start":131,"line_end":131,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141016,"byte_end":141019,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141024,"byte_end":141031,"line_start":133,"line_end":133,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141036,"byte_end":141086,"line_start":134,"line_end":134,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141091,"byte_end":141152,"line_start":135,"line_end":135,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141157,"byte_end":141215,"line_start":136,"line_end":136,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141220,"byte_end":141227,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141232,"byte_end":141235,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141240,"byte_end":141252,"line_start":139,"line_end":139,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141257,"byte_end":141260,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141265,"byte_end":141360,"line_start":141,"line_end":141,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141365,"byte_end":141456,"line_start":142,"line_end":142,"column_start":5,"column_end":96}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":141461,"byte_end":141555,"line_start":143,"line_end":143,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142844,"byte_end":142863,"line_start":174,"line_end":174,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"pub fn column_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142031,"byte_end":142090,"line_start":158,"line_end":158,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142095,"byte_end":142098,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142103,"byte_end":142193,"line_start":160,"line_end":160,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142198,"byte_end":142283,"line_start":161,"line_end":161,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142288,"byte_end":142291,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142296,"byte_end":142303,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142308,"byte_end":142358,"line_start":164,"line_end":164,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142363,"byte_end":142427,"line_start":165,"line_end":165,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142432,"byte_end":142493,"line_start":166,"line_end":166,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142498,"byte_end":142505,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142510,"byte_end":142513,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142518,"byte_end":142530,"line_start":169,"line_end":169,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142535,"byte_end":142538,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142543,"byte_end":142638,"line_start":171,"line_end":171,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142643,"byte_end":142733,"line_start":172,"line_end":172,"column_start":5,"column_end":95}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":142738,"byte_end":142832,"line_start":173,"line_end":173,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":143489,"byte_end":143500,"line_start":192,"line_end":192,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":143314,"byte_end":143373,"line_start":188,"line_end":188,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":143378,"byte_end":143381,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":143386,"byte_end":143457,"line_start":190,"line_end":190,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":143462,"byte_end":143477,"line_start":191,"line_end":191,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":143817,"byte_end":143824,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":143615,"byte_end":143666,"line_start":196,"line_end":196,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":143671,"byte_end":143674,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":143679,"byte_end":143772,"line_start":198,"line_end":198,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":143777,"byte_end":143805,"line_start":199,"line_end":199,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144245,"byte_end":144251,"line_start":212,"line_end":212,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":143993,"byte_end":144047,"line_start":208,"line_end":208,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144052,"byte_end":144055,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144060,"byte_end":144150,"line_start":210,"line_end":210,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144155,"byte_end":144233,"line_start":211,"line_end":211,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146404,"byte_end":146414,"line_start":267,"line_end":267,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144339,"byte_end":144429,"line_start":216,"line_end":216,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144434,"byte_end":144437,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144442,"byte_end":144537,"line_start":218,"line_end":218,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144542,"byte_end":144632,"line_start":219,"line_end":219,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144637,"byte_end":144728,"line_start":220,"line_end":220,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144733,"byte_end":144790,"line_start":221,"line_end":221,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144795,"byte_end":144798,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144803,"byte_end":144820,"line_start":223,"line_end":223,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144825,"byte_end":144828,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144833,"byte_end":144917,"line_start":225,"line_end":225,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":144922,"byte_end":145013,"line_start":226,"line_end":226,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145018,"byte_end":145021,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145026,"byte_end":145051,"line_start":228,"line_end":228,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145056,"byte_end":145059,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145064,"byte_end":145118,"line_start":230,"line_end":230,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145123,"byte_end":145147,"line_start":231,"line_end":231,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145152,"byte_end":145169,"line_start":232,"line_end":232,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145174,"byte_end":145199,"line_start":233,"line_end":233,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145204,"byte_end":145222,"line_start":234,"line_end":234,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145227,"byte_end":145230,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145235,"byte_end":145246,"line_start":236,"line_end":236,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145251,"byte_end":145274,"line_start":237,"line_end":237,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145279,"byte_end":145298,"line_start":238,"line_end":238,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145303,"byte_end":145345,"line_start":239,"line_end":239,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145350,"byte_end":145357,"line_start":240,"line_end":240,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145362,"byte_end":145365,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145370,"byte_end":145462,"line_start":242,"line_end":242,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145467,"byte_end":145557,"line_start":243,"line_end":243,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145562,"byte_end":145565,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145570,"byte_end":145598,"line_start":245,"line_end":245,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145603,"byte_end":145606,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145611,"byte_end":145703,"line_start":247,"line_end":247,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145708,"byte_end":145802,"line_start":248,"line_end":248,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145807,"byte_end":145862,"line_start":249,"line_end":249,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145867,"byte_end":145870,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145875,"byte_end":145899,"line_start":251,"line_end":251,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145904,"byte_end":145921,"line_start":252,"line_end":252,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145926,"byte_end":145951,"line_start":253,"line_end":253,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145956,"byte_end":145974,"line_start":254,"line_end":254,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145979,"byte_end":145982,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":145987,"byte_end":145998,"line_start":256,"line_end":256,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146003,"byte_end":146019,"line_start":257,"line_end":257,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146024,"byte_end":146043,"line_start":258,"line_end":258,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146048,"byte_end":146071,"line_start":259,"line_end":259,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146076,"byte_end":146105,"line_start":260,"line_end":260,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146110,"byte_end":146145,"line_start":261,"line_end":261,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146150,"byte_end":146157,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146162,"byte_end":146165,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146170,"byte_end":146264,"line_start":264,"line_end":264,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146269,"byte_end":146362,"line_start":265,"line_end":265,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146367,"byte_end":146392,"line_start":266,"line_end":266,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146747,"byte_end":146751,"line_start":277,"line_end":277,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":146681,"byte_end":146735,"line_start":276,"line_end":276,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":147871,"byte_end":147890,"line_start":303,"line_end":303,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":147521,"byte_end":147570,"line_start":298,"line_end":298,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":147575,"byte_end":147578,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":147583,"byte_end":147676,"line_start":300,"line_end":300,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":147681,"byte_end":147775,"line_start":301,"line_end":301,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":147780,"byte_end":147859,"line_start":302,"line_end":302,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":149135,"byte_end":149144,"line_start":333,"line_end":333,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":148625,"byte_end":148690,"line_start":326,"line_end":326,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":148695,"byte_end":148698,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":148703,"byte_end":148796,"line_start":328,"line_end":328,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":148801,"byte_end":148896,"line_start":329,"line_end":329,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":148901,"byte_end":148993,"line_start":330,"line_end":330,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":148998,"byte_end":149092,"line_start":331,"line_end":331,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":149097,"byte_end":149123,"line_start":332,"line_end":332,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1011},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":150845,"byte_end":150854,"line_start":388,"line_end":388,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":150503,"byte_end":150564,"line_start":383,"line_end":383,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":150569,"byte_end":150572,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":150577,"byte_end":150666,"line_start":385,"line_end":385,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":150671,"byte_end":150765,"line_start":386,"line_end":386,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":150770,"byte_end":150833,"line_start":387,"line_end":387,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1012},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":151128,"byte_end":151133,"line_start":395,"line_end":395,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":150981,"byte_end":151026,"line_start":392,"line_end":392,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":151031,"byte_end":151034,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":151039,"byte_end":151116,"line_start":394,"line_end":394,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1013},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":151728,"byte_end":151749,"line_start":408,"line_end":408,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":151357,"byte_end":151416,"line_start":403,"line_end":403,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":151421,"byte_end":151424,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":151429,"byte_end":151518,"line_start":405,"line_end":405,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":151523,"byte_end":151617,"line_start":406,"line_end":406,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":151622,"byte_end":151716,"line_start":407,"line_end":407,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1017},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":152680,"byte_end":152695,"line_start":429,"line_end":429,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":152379,"byte_end":152419,"line_start":424,"line_end":424,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":152424,"byte_end":152427,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":152432,"byte_end":152524,"line_start":426,"line_end":426,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":152529,"byte_end":152624,"line_start":427,"line_end":427,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":152629,"byte_end":152668,"line_start":428,"line_end":428,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153222,"byte_end":153231,"line_start":439,"line_end":439,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":152897,"byte_end":152962,"line_start":434,"line_end":434,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":152967,"byte_end":152970,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":152975,"byte_end":153063,"line_start":436,"line_end":436,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153068,"byte_end":153163,"line_start":437,"line_end":437,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153168,"byte_end":153210,"line_start":438,"line_end":438,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1025},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153906,"byte_end":153917,"line_start":466,"line_end":466,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153731,"byte_end":153790,"line_start":462,"line_end":462,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153795,"byte_end":153798,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153803,"byte_end":153874,"line_start":464,"line_end":464,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153879,"byte_end":153894,"line_start":465,"line_end":465,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154199,"byte_end":154206,"line_start":474,"line_end":474,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153997,"byte_end":154048,"line_start":470,"line_end":470,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154053,"byte_end":154056,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154061,"byte_end":154154,"line_start":472,"line_end":472,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154159,"byte_end":154187,"line_start":473,"line_end":473,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1027},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154534,"byte_end":154540,"line_start":482,"line_end":482,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154282,"byte_end":154336,"line_start":478,"line_end":478,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154341,"byte_end":154344,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154349,"byte_end":154439,"line_start":480,"line_end":480,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154444,"byte_end":154522,"line_start":481,"line_end":481,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154654,"byte_end":154660,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"pub fn as_ref<T>(&Self) -> FlatSamples<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154608,"byte_end":154642,"line_start":486,"line_end":486,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154951,"byte_end":154957,"line_start":499,"line_end":499,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"pub fn as_mut<T>(&mut Self) -> FlatSamples<&mut [T]> where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":154897,"byte_end":154939,"line_start":498,"line_end":498,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1032},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155253,"byte_end":155259,"line_start":511,"line_end":511,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"pub fn to_vec<T>(&Self) -> FlatSamples<Vec<T>> where T: Clone,\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155202,"byte_end":155241,"line_start":510,"line_end":510,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1034},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156545,"byte_end":156555,"line_start":544,"line_end":544,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"pub fn get_sample<T>(&Self, u8, u32, u32) -> Option<&T> where\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155525,"byte_end":155564,"line_start":523,"line_end":523,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155569,"byte_end":155572,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155577,"byte_end":155672,"line_start":525,"line_end":525,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155677,"byte_end":155755,"line_start":526,"line_end":526,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155760,"byte_end":155763,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155768,"byte_end":155775,"line_start":528,"line_end":528,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155780,"byte_end":155808,"line_start":529,"line_end":529,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155813,"byte_end":155872,"line_start":530,"line_end":530,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155877,"byte_end":155880,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155885,"byte_end":155925,"line_start":532,"line_end":532,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155930,"byte_end":155980,"line_start":533,"line_end":533,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155985,"byte_end":155988,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":155993,"byte_end":156026,"line_start":535,"line_end":535,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156031,"byte_end":156081,"line_start":536,"line_end":536,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156086,"byte_end":156093,"line_start":537,"line_end":537,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156098,"byte_end":156101,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156106,"byte_end":156196,"line_start":539,"line_end":539,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156201,"byte_end":156282,"line_start":540,"line_end":540,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156287,"byte_end":156382,"line_start":541,"line_end":541,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156387,"byte_end":156474,"line_start":542,"line_end":542,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156479,"byte_end":156533,"line_start":543,"line_end":543,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1037},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":158168,"byte_end":158182,"line_start":578,"line_end":578,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"pub fn get_mut_sample<T>(&mut Self, u8, u32, u32) -> Option<&mut T> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156758,"byte_end":156805,"line_start":552,"line_end":552,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156810,"byte_end":156813,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156818,"byte_end":156907,"line_start":554,"line_end":554,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":156912,"byte_end":156999,"line_start":555,"line_end":555,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157004,"byte_end":157099,"line_start":556,"line_end":556,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157104,"byte_end":157167,"line_start":557,"line_end":557,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157172,"byte_end":157175,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157180,"byte_end":157274,"line_start":559,"line_end":559,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157279,"byte_end":157348,"line_start":560,"line_end":560,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157353,"byte_end":157356,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157361,"byte_end":157368,"line_start":562,"line_end":562,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157373,"byte_end":157401,"line_start":563,"line_end":563,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157406,"byte_end":157469,"line_start":564,"line_end":564,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157474,"byte_end":157477,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157482,"byte_end":157543,"line_start":566,"line_end":566,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157548,"byte_end":157599,"line_start":567,"line_end":567,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157604,"byte_end":157607,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157612,"byte_end":157645,"line_start":569,"line_end":569,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157650,"byte_end":157704,"line_start":570,"line_end":570,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157709,"byte_end":157716,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157721,"byte_end":157724,"line_start":572,"line_end":572,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157729,"byte_end":157819,"line_start":573,"line_end":573,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157824,"byte_end":157905,"line_start":574,"line_end":574,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":157910,"byte_end":158005,"line_start":575,"line_end":575,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":158010,"byte_end":158097,"line_start":576,"line_end":576,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":158102,"byte_end":158156,"line_start":577,"line_end":577,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1039},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":158850,"byte_end":158857,"line_start":594,"line_end":594,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"pub fn as_view<P>(&Self) -> Result<View<&[P::Subpixel], P>, Error> where\nP: PixelWithColorType, Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":158438,"byte_end":158495,"line_start":588,"line_end":588,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":158500,"byte_end":158503,"line_start":589,"line_end":589,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":158508,"byte_end":158598,"line_start":590,"line_end":590,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":158603,"byte_end":158697,"line_start":591,"line_end":591,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":158702,"byte_end":158796,"line_start":592,"line_end":592,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":158801,"byte_end":158838,"line_start":593,"line_end":593,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1041},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":160461,"byte_end":160485,"line_start":633,"line_end":633,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"pub fn as_view_with_mut_samples<P>(&mut Self)\n-> Result<View<&mut [P::Subpixel], P>, Error> where P: PixelWithColorType,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":159496,"byte_end":159555,"line_start":618,"line_end":618,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":159560,"byte_end":159563,"line_start":619,"line_end":619,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":159568,"byte_end":159660,"line_start":620,"line_end":620,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":159665,"byte_end":159756,"line_start":621,"line_end":621,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":159761,"byte_end":159854,"line_start":622,"line_end":622,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":159859,"byte_end":159890,"line_start":623,"line_end":623,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":159895,"byte_end":159898,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":159903,"byte_end":159993,"line_start":625,"line_end":625,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":159998,"byte_end":160092,"line_start":626,"line_end":626,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":160097,"byte_end":160191,"line_start":627,"line_end":627,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":160196,"byte_end":160233,"line_start":628,"line_end":628,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":160238,"byte_end":160241,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":160246,"byte_end":160340,"line_start":630,"line_end":630,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":160345,"byte_end":160431,"line_start":631,"line_end":631,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":160436,"byte_end":160449,"line_start":632,"line_end":632,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1043},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161875,"byte_end":161886,"line_start":668,"line_end":668,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"pub fn as_view_mut<P>(&mut Self)\n-> Result<ViewMut<&mut [P::Subpixel], P>, Error> where P: PixelWithColorType,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161132,"byte_end":161177,"line_start":657,"line_end":657,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161182,"byte_end":161185,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161190,"byte_end":161280,"line_start":659,"line_end":659,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161285,"byte_end":161372,"line_start":660,"line_end":660,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161377,"byte_end":161444,"line_start":661,"line_end":661,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161449,"byte_end":161452,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161457,"byte_end":161552,"line_start":663,"line_end":663,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161557,"byte_end":161650,"line_start":664,"line_end":664,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161655,"byte_end":161750,"line_start":665,"line_end":665,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161755,"byte_end":161830,"line_start":666,"line_end":666,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":161835,"byte_end":161863,"line_start":667,"line_end":667,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1045},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":162911,"byte_end":162919,"line_start":700,"line_end":700,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"pub fn as_slice<T>(&Self) -> &[T] where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":162687,"byte_end":162719,"line_start":696,"line_end":696,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":162724,"byte_end":162727,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":162732,"byte_end":162824,"line_start":698,"line_end":698,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":162829,"byte_end":162899,"line_start":699,"line_end":699,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1047},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":163247,"byte_end":163259,"line_start":711,"line_end":711,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"pub fn as_mut_slice<T>(&mut Self) -> &mut [T] where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":163023,"byte_end":163055,"line_start":707,"line_end":707,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":163060,"byte_end":163063,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":163068,"byte_end":163160,"line_start":709,"line_end":709,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":163165,"byte_end":163235,"line_start":710,"line_end":710,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1049},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":163707,"byte_end":163718,"line_start":723,"line_end":723,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"pub fn image_slice<T>(&Self) -> Option<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":163371,"byte_end":163433,"line_start":718,"line_end":718,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":163438,"byte_end":163441,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":163446,"byte_end":163541,"line_start":720,"line_end":720,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":163546,"byte_end":163641,"line_start":721,"line_end":721,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":163646,"byte_end":163695,"line_start":722,"line_end":722,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1051},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":164153,"byte_end":164168,"line_start":741,"line_end":741,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"pub fn image_mut_slice<T>(&mut Self) -> Option<&mut [T]> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":164082,"byte_end":164141,"line_start":740,"line_end":740,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1053},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":164840,"byte_end":164855,"line_start":763,"line_end":763,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"pub fn try_into_buffer<P>(Self)\n-> Result<ImageBuffer<P, Buffer>, (Error, Self)> where P: PixelWithColorType +\n'static, P::Subpixel: 'static, Buffer: Deref<Target = [P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":164544,"byte_end":164583,"line_start":758,"line_end":758,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":164588,"byte_end":164591,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":164596,"byte_end":164692,"line_start":760,"line_end":760,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":164697,"byte_end":164792,"line_start":761,"line_end":761,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":164797,"byte_end":164828,"line_start":762,"line_end":762,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167775,"byte_end":167785,"line_start":840,"line_end":840,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":165710,"byte_end":165800,"line_start":789,"line_end":789,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":165805,"byte_end":165808,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":165813,"byte_end":165908,"line_start":791,"line_end":791,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":165913,"byte_end":166003,"line_start":792,"line_end":792,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166008,"byte_end":166099,"line_start":793,"line_end":793,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166104,"byte_end":166161,"line_start":794,"line_end":794,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166166,"byte_end":166169,"line_start":795,"line_end":795,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166174,"byte_end":166191,"line_start":796,"line_end":796,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166196,"byte_end":166199,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166204,"byte_end":166288,"line_start":798,"line_end":798,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166293,"byte_end":166384,"line_start":799,"line_end":799,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166389,"byte_end":166392,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166397,"byte_end":166422,"line_start":801,"line_end":801,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166427,"byte_end":166430,"line_start":802,"line_end":802,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166435,"byte_end":166489,"line_start":803,"line_end":803,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166494,"byte_end":166518,"line_start":804,"line_end":804,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166523,"byte_end":166540,"line_start":805,"line_end":805,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166545,"byte_end":166570,"line_start":806,"line_end":806,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166575,"byte_end":166593,"line_start":807,"line_end":807,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166598,"byte_end":166601,"line_start":808,"line_end":808,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166606,"byte_end":166617,"line_start":809,"line_end":809,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166622,"byte_end":166645,"line_start":810,"line_end":810,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166650,"byte_end":166669,"line_start":811,"line_end":811,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166674,"byte_end":166716,"line_start":812,"line_end":812,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166721,"byte_end":166728,"line_start":813,"line_end":813,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166733,"byte_end":166736,"line_start":814,"line_end":814,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166741,"byte_end":166833,"line_start":815,"line_end":815,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166838,"byte_end":166928,"line_start":816,"line_end":816,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166933,"byte_end":166936,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166941,"byte_end":166969,"line_start":818,"line_end":818,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166974,"byte_end":166977,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":166982,"byte_end":167074,"line_start":820,"line_end":820,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167079,"byte_end":167173,"line_start":821,"line_end":821,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167178,"byte_end":167233,"line_start":822,"line_end":822,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167238,"byte_end":167241,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167246,"byte_end":167270,"line_start":824,"line_end":824,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167275,"byte_end":167292,"line_start":825,"line_end":825,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167297,"byte_end":167322,"line_start":826,"line_end":826,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167327,"byte_end":167345,"line_start":827,"line_end":827,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167350,"byte_end":167353,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167358,"byte_end":167369,"line_start":829,"line_end":829,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167374,"byte_end":167390,"line_start":830,"line_end":830,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167395,"byte_end":167414,"line_start":831,"line_end":831,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167419,"byte_end":167442,"line_start":832,"line_end":832,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167447,"byte_end":167476,"line_start":833,"line_end":833,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167481,"byte_end":167516,"line_start":834,"line_end":834,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167521,"byte_end":167528,"line_start":835,"line_end":835,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167533,"byte_end":167536,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167541,"byte_end":167635,"line_start":837,"line_end":837,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167640,"byte_end":167733,"line_start":838,"line_end":838,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167738,"byte_end":167763,"line_start":839,"line_end":839,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1057},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167922,"byte_end":167926,"line_start":845,"line_end":845,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167856,"byte_end":167910,"line_start":844,"line_end":844,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168347,"byte_end":168366,"line_start":854,"line_end":854,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":167997,"byte_end":168046,"line_start":849,"line_end":849,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168051,"byte_end":168054,"line_start":850,"line_end":850,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168059,"byte_end":168152,"line_start":851,"line_end":851,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168157,"byte_end":168251,"line_start":852,"line_end":852,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168256,"byte_end":168335,"line_start":853,"line_end":853,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1059},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168947,"byte_end":168956,"line_start":865,"line_end":865,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168437,"byte_end":168502,"line_start":858,"line_end":858,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168507,"byte_end":168510,"line_start":859,"line_end":859,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168515,"byte_end":168608,"line_start":860,"line_end":860,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168613,"byte_end":168708,"line_start":861,"line_end":861,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168713,"byte_end":168805,"line_start":862,"line_end":862,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168810,"byte_end":168904,"line_start":863,"line_end":863,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":168909,"byte_end":168935,"line_start":864,"line_end":864,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169381,"byte_end":169390,"line_start":874,"line_end":874,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169039,"byte_end":169100,"line_start":869,"line_end":869,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169105,"byte_end":169108,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169113,"byte_end":169202,"line_start":871,"line_end":871,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169207,"byte_end":169301,"line_start":872,"line_end":872,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169306,"byte_end":169369,"line_start":873,"line_end":873,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1061},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169640,"byte_end":169645,"line_start":881,"line_end":881,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169493,"byte_end":169538,"line_start":878,"line_end":878,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169543,"byte_end":169546,"line_start":879,"line_end":879,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169551,"byte_end":169628,"line_start":880,"line_end":880,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1062},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170124,"byte_end":170145,"line_start":890,"line_end":890,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169753,"byte_end":169812,"line_start":885,"line_end":885,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169817,"byte_end":169820,"line_start":886,"line_end":886,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169825,"byte_end":169914,"line_start":887,"line_end":887,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":169919,"byte_end":170013,"line_start":888,"line_end":888,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170018,"byte_end":170112,"line_start":889,"line_end":889,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170577,"byte_end":170592,"line_start":899,"line_end":899,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170276,"byte_end":170316,"line_start":894,"line_end":894,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170321,"byte_end":170324,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170329,"byte_end":170421,"line_start":896,"line_end":896,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170426,"byte_end":170521,"line_start":897,"line_end":897,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170526,"byte_end":170565,"line_start":898,"line_end":898,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1064},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171027,"byte_end":171036,"line_start":908,"line_end":908,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170702,"byte_end":170767,"line_start":903,"line_end":903,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170772,"byte_end":170775,"line_start":904,"line_end":904,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170780,"byte_end":170868,"line_start":905,"line_end":905,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170873,"byte_end":170968,"line_start":906,"line_end":906,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":170973,"byte_end":171015,"line_start":907,"line_end":907,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171922,"byte_end":171936,"line_start":934,"line_end":934,"column_start":12,"column_end":26},"name":"with_monocolor","qualname":"<FlatSamples<&'buf [Subpixel]>>::with_monocolor","value":"pub fn with_monocolor<P>(&'buf P, u32, u32) -> Self where P: Pixel<Subpixel =\nSubpixel>, Subpixel: crate::Primitive","parent":null,"children":[],"decl_id":null,"docs":" Create a monocolor image from a single pixel.","sig":null,"attributes":[{"value":"/ Create a monocolor image from a single pixel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171210,"byte_end":171259,"line_start":914,"line_end":914,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171264,"byte_end":171267,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ This can be used as a very cheap source of a `GenericImageView` with an arbitrary number of","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171272,"byte_end":171367,"line_start":916,"line_end":916,"column_start":5,"column_end":100}},{"value":"/ pixels of a single color, without any dynamic allocation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171372,"byte_end":171433,"line_start":917,"line_end":917,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171438,"byte_end":171441,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171446,"byte_end":171461,"line_start":919,"line_end":919,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171466,"byte_end":171469,"line_start":920,"line_end":920,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171474,"byte_end":171481,"line_start":921,"line_end":921,"column_start":5,"column_end":12}},{"value":"/ # fn paint_something<T>(_: T) {}","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171486,"byte_end":171522,"line_start":922,"line_end":922,"column_start":5,"column_end":41}},{"value":"/ use image::{flat::FlatSamples, GenericImage, RgbImage, Rgb};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171527,"byte_end":171591,"line_start":923,"line_end":923,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171596,"byte_end":171599,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ let background = Rgb([20, 20, 20]);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171604,"byte_end":171643,"line_start":925,"line_end":925,"column_start":5,"column_end":44}},{"value":"/ let bg = FlatSamples::with_monocolor(&background, 200, 200);;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171648,"byte_end":171713,"line_start":926,"line_end":926,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171718,"byte_end":171721,"line_start":927,"line_end":927,"column_start":5,"column_end":8}},{"value":"/ let mut image = RgbImage::new(200, 200);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171726,"byte_end":171770,"line_start":928,"line_end":928,"column_start":5,"column_end":49}},{"value":"/ paint_something(&mut image);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171775,"byte_end":171807,"line_start":929,"line_end":929,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171812,"byte_end":171815,"line_start":930,"line_end":930,"column_start":5,"column_end":8}},{"value":"/ // Reset the canvas","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171820,"byte_end":171843,"line_start":931,"line_end":931,"column_start":5,"column_end":28}},{"value":"/ image.copy_from(&bg.as_view().unwrap(), 0, 0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171848,"byte_end":171898,"line_start":932,"line_end":932,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171903,"byte_end":171910,"line_start":933,"line_end":933,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":6425},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173263,"byte_end":173267,"line_start":971,"line_end":971,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":6428},{"krate":0,"index":6429}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":172561,"byte_end":172613,"line_start":956,"line_end":956,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":172614,"byte_end":172617,"line_start":957,"line_end":957,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":172618,"byte_end":172716,"line_start":958,"line_end":958,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":172717,"byte_end":172766,"line_start":959,"line_end":959,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":172767,"byte_end":172770,"line_start":960,"line_end":960,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":172771,"byte_end":172869,"line_start":961,"line_end":961,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":172870,"byte_end":172969,"line_start":962,"line_end":962,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":172970,"byte_end":173040,"line_start":963,"line_end":963,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173041,"byte_end":173044,"line_start":964,"line_end":964,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173045,"byte_end":173067,"line_start":965,"line_end":965,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173068,"byte_end":173071,"line_start":966,"line_end":966,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173072,"byte_end":173155,"line_start":967,"line_end":967,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173156,"byte_end":173223,"line_start":968,"line_end":968,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173224,"byte_end":173227,"line_start":969,"line_end":969,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6438},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174114,"byte_end":174121,"line_start":994,"line_end":994,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":6441},{"krate":0,"index":6442}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173392,"byte_end":173438,"line_start":979,"line_end":979,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173439,"byte_end":173442,"line_start":980,"line_end":980,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173443,"byte_end":173540,"line_start":981,"line_end":981,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173541,"byte_end":173639,"line_start":982,"line_end":982,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173640,"byte_end":173737,"line_start":983,"line_end":983,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173738,"byte_end":173779,"line_start":984,"line_end":984,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173780,"byte_end":173783,"line_start":985,"line_end":985,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173784,"byte_end":173806,"line_start":986,"line_end":986,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173807,"byte_end":173810,"line_start":987,"line_end":987,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173811,"byte_end":173894,"line_start":988,"line_end":988,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173895,"byte_end":173932,"line_start":989,"line_end":989,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":173933,"byte_end":174006,"line_start":990,"line_end":990,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174007,"byte_end":174074,"line_start":991,"line_end":991,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174075,"byte_end":174078,"line_start":992,"line_end":992,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6452},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174830,"byte_end":174838,"line_start":1013,"line_end":1013,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":6451},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174707,"byte_end":174747,"line_start":1010,"line_end":1010,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174752,"byte_end":174755,"line_start":1011,"line_end":1011,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174760,"byte_end":174825,"line_start":1012,"line_end":1012,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6454},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174995,"byte_end":175013,"line_start":1018,"line_end":1018,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":6451},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174845,"byte_end":174903,"line_start":1015,"line_end":1015,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174908,"byte_end":174911,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174916,"byte_end":174990,"line_start":1017,"line_end":1017,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6457},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175622,"byte_end":175632,"line_start":1029,"line_end":1029,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":6451},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175032,"byte_end":175085,"line_start":1020,"line_end":1020,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175090,"byte_end":175093,"line_start":1021,"line_end":1021,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175098,"byte_end":175189,"line_start":1022,"line_end":1022,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175194,"byte_end":175234,"line_start":1023,"line_end":1023,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175239,"byte_end":175242,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175247,"byte_end":175342,"line_start":1025,"line_end":1025,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175347,"byte_end":175438,"line_start":1026,"line_end":1026,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175443,"byte_end":175538,"line_start":1027,"line_end":1027,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175543,"byte_end":175617,"line_start":1028,"line_end":1028,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":6451},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174695,"byte_end":174700,"line_start":1009,"line_end":1009,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"pub enum Error {\n    TooLarge,\n    NormalFormRequired(NormalForm),\n    WrongColor(ColorType),\n}","parent":null,"children":[{"krate":0,"index":6452},{"krate":0,"index":6454},{"krate":0,"index":6457}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174246,"byte_end":174327,"line_start":1002,"line_end":1002,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174328,"byte_end":174331,"line_start":1003,"line_end":1003,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174332,"byte_end":174405,"line_start":1004,"line_end":1004,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174406,"byte_end":174482,"line_start":1005,"line_end":1005,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174483,"byte_end":174560,"line_start":1006,"line_end":1006,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":174561,"byte_end":174634,"line_start":1007,"line_end":1007,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6476},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176131,"byte_end":176140,"line_start":1042,"line_end":1042,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":6475},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175908,"byte_end":175937,"line_start":1038,"line_end":1038,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175942,"byte_end":175945,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175950,"byte_end":176033,"line_start":1040,"line_end":1040,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176038,"byte_end":176126,"line_start":1041,"line_end":1041,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6478},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176370,"byte_end":176381,"line_start":1048,"line_end":1048,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":6475},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176147,"byte_end":176178,"line_start":1044,"line_end":1044,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176183,"byte_end":176186,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176191,"byte_end":176279,"line_start":1046,"line_end":1046,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176284,"byte_end":176365,"line_start":1047,"line_end":1047,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6480},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176665,"byte_end":176676,"line_start":1055,"line_end":1055,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":6475},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176388,"byte_end":176415,"line_start":1050,"line_end":1050,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176420,"byte_end":176423,"line_start":1051,"line_end":1051,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176428,"byte_end":176521,"line_start":1052,"line_end":1052,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176526,"byte_end":176616,"line_start":1053,"line_end":1053,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176621,"byte_end":176660,"line_start":1054,"line_end":1054,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6482},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176886,"byte_end":176900,"line_start":1061,"line_end":1061,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":6475},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176683,"byte_end":176748,"line_start":1057,"line_end":1057,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176753,"byte_end":176756,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176761,"byte_end":176854,"line_start":1059,"line_end":1059,"column_start":5,"column_end":98}},{"value":"/ in row-major form.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176859,"byte_end":176881,"line_start":1060,"line_end":1060,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6484},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177116,"byte_end":177133,"line_start":1067,"line_end":1067,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":6475},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176907,"byte_end":176975,"line_start":1063,"line_end":1063,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176980,"byte_end":176983,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":176988,"byte_end":177081,"line_start":1065,"line_end":1065,"column_start":5,"column_end":98}},{"value":"/ in column-major form.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177086,"byte_end":177111,"line_start":1066,"line_end":1066,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":6475},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175891,"byte_end":175901,"line_start":1037,"line_end":1037,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"pub enum NormalForm {\n    Unaliased,\n    PixelPacked,\n    ImagePacked,\n    RowMajorPacked,\n    ColumnMajorPacked,\n}","parent":null,"children":[{"krate":0,"index":6476},{"krate":0,"index":6478},{"krate":0,"index":6480},{"krate":0,"index":6482},{"krate":0,"index":6484}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175648,"byte_end":175686,"line_start":1032,"line_end":1032,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175687,"byte_end":175690,"line_start":1033,"line_end":1033,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175691,"byte_end":175790,"line_start":1034,"line_end":1034,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":175791,"byte_end":175830,"line_start":1035,"line_end":1035,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177342,"byte_end":177352,"line_start":1077,"line_end":1077,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177223,"byte_end":177254,"line_start":1074,"line_end":1074,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177259,"byte_end":177262,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177267,"byte_end":177330,"line_start":1076,"line_end":1076,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177835,"byte_end":177839,"line_start":1087,"line_end":1087,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177414,"byte_end":177465,"line_start":1081,"line_end":1081,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177470,"byte_end":177473,"line_start":1082,"line_end":1082,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177478,"byte_end":177567,"line_start":1083,"line_end":1083,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177572,"byte_end":177665,"line_start":1084,"line_end":1084,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177670,"byte_end":177757,"line_start":1085,"line_end":1085,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177762,"byte_end":177823,"line_start":1086,"line_end":1086,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":178118,"byte_end":178125,"line_start":1095,"line_end":1095,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177904,"byte_end":177944,"line_start":1091,"line_end":1091,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177949,"byte_end":177952,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177957,"byte_end":178047,"line_start":1093,"line_end":1093,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":178052,"byte_end":178106,"line_start":1094,"line_end":1094,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":178444,"byte_end":178454,"line_start":1103,"line_end":1103,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":178185,"byte_end":178247,"line_start":1099,"line_end":1099,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":178252,"byte_end":178255,"line_start":1100,"line_end":1100,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":178260,"byte_end":178350,"line_start":1101,"line_end":1101,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":178355,"byte_end":178432,"line_start":1102,"line_end":1102,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":179329,"byte_end":179343,"line_start":1121,"line_end":1121,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>\nwhere Buffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":178787,"byte_end":178857,"line_start":1113,"line_end":1113,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":178862,"byte_end":178865,"line_start":1114,"line_end":1114,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":178870,"byte_end":178964,"line_start":1115,"line_end":1115,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":178969,"byte_end":179064,"line_start":1116,"line_end":1116,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":179069,"byte_end":179136,"line_start":1117,"line_end":1117,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":179141,"byte_end":179144,"line_start":1118,"line_end":1118,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":179149,"byte_end":179243,"line_start":1119,"line_end":1119,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":179248,"byte_end":179317,"line_start":1120,"line_end":1120,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":179926,"byte_end":179936,"line_start":1137,"line_end":1137,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":179744,"byte_end":179834,"line_start":1134,"line_end":1134,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":179839,"byte_end":179842,"line_start":1135,"line_end":1135,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":179847,"byte_end":179914,"line_start":1136,"line_end":1136,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180270,"byte_end":180281,"line_start":1145,"line_end":1145,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180007,"byte_end":180069,"line_start":1141,"line_end":1141,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180074,"byte_end":180077,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180082,"byte_end":180173,"line_start":1143,"line_end":1143,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180178,"byte_end":180258,"line_start":1144,"line_end":1144,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180738,"byte_end":180753,"line_start":1154,"line_end":1154,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel] where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180374,"byte_end":180444,"line_start":1149,"line_end":1149,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180449,"byte_end":180452,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180457,"byte_end":180551,"line_start":1151,"line_end":1151,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180556,"byte_end":180652,"line_start":1152,"line_end":1152,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180657,"byte_end":180726,"line_start":1153,"line_end":1153,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181281,"byte_end":181290,"line_start":1167,"line_end":1167,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180951,"byte_end":180978,"line_start":1162,"line_end":1162,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180983,"byte_end":180986,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":180991,"byte_end":181078,"line_start":1164,"line_end":1164,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181083,"byte_end":181176,"line_start":1165,"line_end":1165,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181181,"byte_end":181269,"line_start":1166,"line_end":1166,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182294,"byte_end":182305,"line_start":1190,"line_end":1190,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<ViewMut<Buffer, P>, (Error, Self)> where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181445,"byte_end":181503,"line_start":1172,"line_end":1172,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181508,"byte_end":181511,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181516,"byte_end":181611,"line_start":1174,"line_end":1174,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181616,"byte_end":181706,"line_start":1175,"line_end":1175,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181711,"byte_end":181799,"line_start":1176,"line_end":1176,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181804,"byte_end":181880,"line_start":1177,"line_end":1177,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181885,"byte_end":181888,"line_start":1178,"line_end":1178,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181893,"byte_end":181900,"line_start":1179,"line_end":1179,"column_start":5,"column_end":12}},{"value":"/ # use image::RgbImage;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181905,"byte_end":181931,"line_start":1180,"line_end":1180,"column_start":5,"column_end":31}},{"value":"/ # use image::Rgb;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181936,"byte_end":181957,"line_start":1181,"line_end":1181,"column_start":5,"column_end":26}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":181962,"byte_end":182027,"line_start":1182,"line_end":1182,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182032,"byte_end":182101,"line_start":1183,"line_end":1183,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182106,"byte_end":182109,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182114,"byte_end":182145,"line_start":1185,"line_end":1185,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182150,"byte_end":182153,"line_start":1186,"line_end":1186,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182158,"byte_end":182218,"line_start":1187,"line_end":1187,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182223,"byte_end":182270,"line_start":1188,"line_end":1188,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182275,"byte_end":182282,"line_start":1189,"line_end":1189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182953,"byte_end":182963,"line_start":1213,"line_end":1213,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182834,"byte_end":182865,"line_start":1210,"line_end":1210,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182870,"byte_end":182873,"line_start":1211,"line_end":1211,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182878,"byte_end":182941,"line_start":1212,"line_end":1212,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1087},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183447,"byte_end":183451,"line_start":1223,"line_end":1223,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183025,"byte_end":183077,"line_start":1217,"line_end":1217,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183082,"byte_end":183085,"line_start":1218,"line_end":1218,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183090,"byte_end":183179,"line_start":1219,"line_end":1219,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183184,"byte_end":183277,"line_start":1220,"line_end":1220,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183282,"byte_end":183369,"line_start":1221,"line_end":1221,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183374,"byte_end":183435,"line_start":1222,"line_end":1222,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183824,"byte_end":183831,"line_start":1232,"line_end":1232,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183516,"byte_end":183556,"line_start":1227,"line_end":1227,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183561,"byte_end":183564,"line_start":1228,"line_end":1228,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183569,"byte_end":183659,"line_start":1229,"line_end":1229,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183664,"byte_end":183756,"line_start":1230,"line_end":1230,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183761,"byte_end":183812,"line_start":1231,"line_end":1231,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":184073,"byte_end":184083,"line_start":1239,"line_end":1239,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183891,"byte_end":183981,"line_start":1236,"line_end":1236,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183986,"byte_end":183989,"line_start":1237,"line_end":1237,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":183994,"byte_end":184061,"line_start":1238,"line_end":1238,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":184394,"byte_end":184404,"line_start":1247,"line_end":1247,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel> where\nBuffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":184154,"byte_end":184197,"line_start":1243,"line_end":1243,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":184202,"byte_end":184205,"line_start":1244,"line_end":1244,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":184210,"byte_end":184300,"line_start":1245,"line_end":1245,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":184305,"byte_end":184382,"line_start":1246,"line_end":1246,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":185035,"byte_end":185049,"line_start":1264,"line_end":1264,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":184789,"byte_end":184838,"line_start":1260,"line_end":1260,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":184843,"byte_end":184846,"line_start":1261,"line_end":1261,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":184851,"byte_end":184941,"line_start":1262,"line_end":1262,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":184946,"byte_end":185023,"line_start":1263,"line_end":1263,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":185661,"byte_end":185672,"line_start":1278,"line_end":1278,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel] where Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":185398,"byte_end":185460,"line_start":1274,"line_end":1274,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":185465,"byte_end":185468,"line_start":1275,"line_end":1275,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":185473,"byte_end":185564,"line_start":1276,"line_end":1276,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":185569,"byte_end":185649,"line_start":1277,"line_end":1277,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1093},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":185888,"byte_end":185903,"line_start":1286,"line_end":1286,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":185821,"byte_end":185876,"line_start":1285,"line_end":1285,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":186371,"byte_end":186380,"line_start":1296,"line_end":1296,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":186041,"byte_end":186068,"line_start":1291,"line_end":1291,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":186073,"byte_end":186076,"line_start":1292,"line_end":1292,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":186081,"byte_end":186168,"line_start":1293,"line_end":1293,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":186173,"byte_end":186266,"line_start":1294,"line_end":1294,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":186271,"byte_end":186359,"line_start":1295,"line_end":1295,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":1142},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7667,"byte_end":7673,"line_start":217,"line_end":217,"column_start":9,"column_end":15},"name":"codecs","qualname":"::codecs","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1143},{"krate":0,"index":1492},{"krate":0,"index":1582},{"krate":0,"index":1737},{"krate":0,"index":1872},{"krate":0,"index":2050},{"krate":0,"index":2362},{"krate":0,"index":2580},{"krate":0,"index":2914},{"krate":0,"index":3009},{"krate":0,"index":3233},{"krate":0,"index":3771},{"krate":0,"index":4033},{"krate":0,"index":4153}],"decl_id":null,"docs":" Encoding and decoding for various image file formats.","sig":null,"attributes":[{"value":"/ Encoding and decoding for various image file formats.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5515,"byte_end":5572,"line_start":176,"line_end":176,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5573,"byte_end":5576,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ # Supported formats","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5577,"byte_end":5600,"line_start":178,"line_end":178,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5601,"byte_end":5604,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ | Format | Decoding | Encoding |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5605,"byte_end":5641,"line_start":180,"line_end":180,"column_start":1,"column_end":37}},{"value":"/ | ------ | -------- | -------- |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5642,"byte_end":5678,"line_start":181,"line_end":181,"column_start":1,"column_end":37}},{"value":"/ | PNG    | All supported color types | Same as decoding |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5679,"byte_end":5740,"line_start":182,"line_end":182,"column_start":1,"column_end":62}},{"value":"/ | JPEG   | Baseline and progressive | Baseline JPEG |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5741,"byte_end":5798,"line_start":183,"line_end":183,"column_start":1,"column_end":58}},{"value":"/ | GIF    | Yes | Yes |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5799,"byte_end":5825,"line_start":184,"line_end":184,"column_start":1,"column_end":27}},{"value":"/ | BMP    | Yes | Rgb8, Rgba8, Gray8, GrayA8 |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5826,"byte_end":5875,"line_start":185,"line_end":185,"column_start":1,"column_end":50}},{"value":"/ | ICO    | Yes | Yes |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5876,"byte_end":5902,"line_start":186,"line_end":186,"column_start":1,"column_end":27}},{"value":"/ | TIFF   | Baseline(no fax support) + LZW + PackBits | Rgb8, Rgba8, Gray8 |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5903,"byte_end":5982,"line_start":187,"line_end":187,"column_start":1,"column_end":80}},{"value":"/ | WebP   | Yes | No |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5983,"byte_end":6008,"line_start":188,"line_end":188,"column_start":1,"column_end":26}},{"value":"/ | AVIF   | Only 8-bit | Lossy |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6009,"byte_end":6044,"line_start":189,"line_end":189,"column_start":1,"column_end":36}},{"value":"/ | PNM    | PBM, PGM, PPM, standard PAM | Yes |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6045,"byte_end":6095,"line_start":190,"line_end":190,"column_start":1,"column_end":51}},{"value":"/ | DDS    | DXT1, DXT3, DXT5 | No |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6096,"byte_end":6134,"line_start":191,"line_end":191,"column_start":1,"column_end":39}},{"value":"/ | TGA    | Yes | Rgb8, Rgba8, Bgr8, Bgra8, Gray8, GrayA8 |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6135,"byte_end":6197,"line_start":192,"line_end":192,"column_start":1,"column_end":63}},{"value":"/ | OpenEXR  | Rgb32F, Rgba32F (no dwa compression) | Rgb32F, Rgba32F (no dwa compression) |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6198,"byte_end":6292,"line_start":193,"line_end":193,"column_start":1,"column_end":95}},{"value":"/ | farbfeld | Yes | Yes |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6293,"byte_end":6321,"line_start":194,"line_end":194,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6322,"byte_end":6325,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ ## A note on format specific features","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6326,"byte_end":6367,"line_start":196,"line_end":196,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6368,"byte_end":6371,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"/ One of the main goals of `image` is stability, in runtime but also for programmers. This","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6372,"byte_end":6464,"line_start":198,"line_end":198,"column_start":1,"column_end":93}},{"value":"/ ensures that performance as well as safety fixes reach a majority of its user base with little","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6465,"byte_end":6563,"line_start":199,"line_end":199,"column_start":1,"column_end":99}},{"value":"/ effort. Re-exporting all details of its dependencies would run counter to this goal as it","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6564,"byte_end":6657,"line_start":200,"line_end":200,"column_start":1,"column_end":94}},{"value":"/ linked _all_ major version bumps between them and `image`. As such, we are wary of exposing too","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6658,"byte_end":6757,"line_start":201,"line_end":201,"column_start":1,"column_end":100}},{"value":"/ many details, or configuration options, that are not shared between different image formats.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6758,"byte_end":6854,"line_start":202,"line_end":202,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6855,"byte_end":6858,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ Nevertheless, the advantage of precise control is hard to ignore. We will thus consider","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6859,"byte_end":6950,"line_start":204,"line_end":204,"column_start":1,"column_end":92}},{"value":"/ _wrappers_, not direct re-exports, in either of the following cases:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":6951,"byte_end":7023,"line_start":205,"line_end":205,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7024,"byte_end":7027,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ 1. A standard specifies that configuration _x_ is required for decoders/encoders and there","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7028,"byte_end":7122,"line_start":207,"line_end":207,"column_start":1,"column_end":95}},{"value":"/    exists an essentially canonical way to control it.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7123,"byte_end":7180,"line_start":208,"line_end":208,"column_start":1,"column_end":58}},{"value":"/ 2. At least two different implementations agree on some (sub-)set of features in practice.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7181,"byte_end":7275,"line_start":209,"line_end":209,"column_start":1,"column_end":95}},{"value":"/ 3. A technical argument including measurements of the performance, space benefits, or otherwise","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7276,"byte_end":7375,"line_start":210,"line_end":210,"column_start":1,"column_end":100}},{"value":"/    objectively quantified benefits can be made, and the added interface is unlikely to require","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7376,"byte_end":7474,"line_start":211,"line_end":211,"column_start":1,"column_end":99}},{"value":"/    breaking changes.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7475,"byte_end":7499,"line_start":212,"line_end":212,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7500,"byte_end":7503,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ Features that fulfill two or more criteria are preferred.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7504,"byte_end":7565,"line_start":214,"line_end":214,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7566,"byte_end":7569,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ Re-exports of dependencies that reach version `1` will be discussed when it happens.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7570,"byte_end":7658,"line_start":216,"line_end":216,"column_start":1,"column_end":89}}]},{"kind":"Mod","id":{"krate":0,"index":1143},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::codecs::bmp","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","parent":null,"children":[{"krate":0,"index":1144},{"krate":0,"index":1147},{"krate":0,"index":1150},{"krate":0,"index":1427}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7766,"byte_end":7789,"line_start":220,"line_end":220,"column_start":5,"column_end":28}},{"value":"/  Decoding and Encoding of BMP Images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","byte_start":199733,"byte_end":199773,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","byte_start":199774,"byte_end":199777,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder and encoder for BMP (Windows Bitmap) images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","byte_start":199778,"byte_end":199836,"line_start":3,"line_end":3,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","byte_start":199837,"byte_end":199840,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","byte_start":199841,"byte_end":199861,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375%28v=vs.85%29.aspx>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","byte_start":199862,"byte_end":199954,"line_start":6,"line_end":6,"column_start":1,"column_end":93}},{"value":"/  * <https://en.wikipedia.org/wiki/BMP_file_format>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","byte_start":199955,"byte_end":200009,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/mod.rs","byte_start":200010,"byte_end":200013,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1318},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":217588,"byte_end":217598,"line_start":545,"line_end":545,"column_start":12,"column_end":22},"name":"BmpDecoder","qualname":"::codecs::bmp::decoder::BmpDecoder","value":"BmpDecoder {  }","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329},{"krate":0,"index":1330},{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1335}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[{"value":"/ A bmp decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":217559,"byte_end":217576,"line_start":544,"line_end":544,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":220186,"byte_end":220189,"line_start":633,"line_end":633,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<BmpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":220113,"byte_end":220174,"line_start":632,"line_end":632,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1367},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":221691,"byte_end":221708,"line_start":688,"line_end":688,"column_start":12,"column_end":29},"name":"set_indexed_color","qualname":"<BmpDecoder<R>>::set_indexed_color","value":"pub fn set_indexed_color(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" If true, the palette in BMP does not apply to the image even if it is found.\n In other words, the output image is the indexed color.\n","sig":null,"attributes":[{"value":"/ If true, the palette in BMP does not apply to the image even if it is found.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":221536,"byte_end":221616,"line_start":686,"line_end":686,"column_start":5,"column_end":85}},{"value":"/ In other words, the output image is the indexed color.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":221621,"byte_end":221679,"line_start":687,"line_end":687,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1375},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":232949,"byte_end":232976,"line_start":984,"line_end":984,"column_start":12,"column_end":39},"name":"read_metadata_in_ico_format","qualname":"<BmpDecoder<R>>::read_metadata_in_ico_format","value":"pub fn read_metadata_in_ico_format(&mut Self) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":232895,"byte_end":232918,"line_start":982,"line_end":982,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1382},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":235588,"byte_end":235599,"line_start":1060,"line_end":1060,"column_start":12,"column_end":23},"name":"get_palette","qualname":"<BmpDecoder<R>>::get_palette","value":"pub fn get_palette(&Self) -> Option<&[[u8; ]]>","parent":null,"children":[],"decl_id":null,"docs":" Get the palette that is embedded in the BMP image, if any.\n","sig":null,"attributes":[{"value":"/ Get the palette that is embedded in the BMP image, if any.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":235514,"byte_end":235576,"line_start":1059,"line_end":1059,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1403},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":253829,"byte_end":253838,"line_start":1483,"line_end":1483,"column_start":12,"column_end":21},"name":"BmpReader","qualname":"::codecs::bmp::decoder::BmpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":253772,"byte_end":253817,"line_start":1482,"line_end":1482,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":1464},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":259645,"byte_end":259655,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"BmpEncoder","qualname":"::codecs::bmp::encoder::BmpEncoder","value":"BmpEncoder {  }","parent":null,"children":[{"krate":0,"index":1467}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[{"value":"/ The representation of a BMP encoder.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":259593,"byte_end":259633,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1471},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":259814,"byte_end":259817,"line_start":19,"line_end":19,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpEncoder>::new","value":"pub fn new(&'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":259743,"byte_end":259802,"line_start":18,"line_end":18,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":1472},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":260025,"byte_end":260031,"line_start":26,"line_end":26,"column_start":12,"column_end":18},"name":"encode","qualname":"<BmpEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, color::ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":259886,"byte_end":259919,"line_start":23,"line_end":23,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":259924,"byte_end":259976,"line_start":24,"line_end":24,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":259981,"byte_end":260013,"line_start":25,"line_end":25,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1473},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":260406,"byte_end":260425,"line_start":38,"line_end":38,"column_start":12,"column_end":31},"name":"encode_with_palette","qualname":"<BmpEncoder>::encode_with_palette","value":"pub fn encode_with_palette(&mut Self, &[u8], u32, u32, color::ColorType,\n                           Option<&[[u8; ]]>) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Same as ```encode```, but allow a palette to be passed in.\n The ```palette``` is ignored for color types other than Luma/Luma-with-alpha.\n","sig":null,"attributes":[{"value":"/ Same as ```encode```, but allow a palette to be passed in.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":260246,"byte_end":260308,"line_start":36,"line_end":36,"column_start":5,"column_end":67}},{"value":"/ The ```palette``` is ignored for color types other than Luma/Luma-with-alpha.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":260313,"byte_end":260394,"line_start":37,"line_end":37,"column_start":5,"column_end":86}}]},{"kind":"Mod","id":{"krate":0,"index":1492},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dds","qualname":"::codecs::dds","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","parent":null,"children":[{"krate":0,"index":1493},{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1500},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1507},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1514},{"krate":0,"index":1517},{"krate":0,"index":1520},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1527},{"krate":0,"index":1530},{"krate":0,"index":1533},{"krate":0,"index":1536},{"krate":0,"index":1539},{"krate":0,"index":1542},{"krate":0,"index":1543},{"krate":0,"index":1546},{"krate":0,"index":6673},{"krate":0,"index":6697},{"krate":0,"index":6699},{"krate":0,"index":6700},{"krate":0,"index":6702},{"krate":0,"index":6705},{"krate":0,"index":6706},{"krate":0,"index":6709},{"krate":0,"index":6710},{"krate":0,"index":6712},{"krate":0,"index":6714},{"krate":0,"index":1549},{"krate":0,"index":1551},{"krate":0,"index":1553},{"krate":0,"index":6716},{"krate":0,"index":6726},{"krate":0,"index":6728},{"krate":0,"index":6734},{"krate":0,"index":6736},{"krate":0,"index":6745},{"krate":0,"index":1554},{"krate":0,"index":1557},{"krate":0,"index":1563},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1573}],"decl_id":null,"docs":"  Decoding of DDS images","sig":null,"attributes":[{"value":"cfg(feature = \"dds\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7811,"byte_end":7834,"line_start":222,"line_end":222,"column_start":5,"column_end":28}},{"value":"/  Decoding of DDS images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":272319,"byte_end":272346,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":272347,"byte_end":272350,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  DDS (DirectDraw Surface) is a container format for storing DXT (S3TC) compressed images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":272351,"byte_end":272444,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":272445,"byte_end":272448,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":272449,"byte_end":272469,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://docs.microsoft.com/en-us/windows/win32/direct3ddds/dx-graphics-dds-pguide> - Description of the DDS format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":272470,"byte_end":272593,"line_start":6,"line_end":6,"column_start":1,"column_end":124}}]},{"kind":"Struct","id":{"krate":0,"index":1566},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":280220,"byte_end":280230,"line_start":242,"line_end":242,"column_start":12,"column_end":22},"name":"DdsDecoder","qualname":"::codecs::dds::DdsDecoder","value":"DdsDecoder {  }","parent":null,"children":[{"krate":0,"index":1568}],"decl_id":null,"docs":" The representation of a DDS decoder\n","sig":null,"attributes":[{"value":"/ The representation of a DDS decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":280169,"byte_end":280208,"line_start":241,"line_end":241,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1571},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":280399,"byte_end":280402,"line_start":249,"line_end":249,"column_start":12,"column_end":15},"name":"new","qualname":"<DdsDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":280330,"byte_end":280387,"line_start":248,"line_end":248,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":1582},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"dxt","qualname":"::codecs::dxt","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","parent":null,"children":[{"krate":0,"index":1583},{"krate":0,"index":1586},{"krate":0,"index":1587},{"krate":0,"index":1590},{"krate":0,"index":1593},{"krate":0,"index":1596},{"krate":0,"index":1599},{"krate":0,"index":1602},{"krate":0,"index":1605},{"krate":0,"index":1606},{"krate":0,"index":1609},{"krate":0,"index":1612},{"krate":0,"index":1615},{"krate":0,"index":1618},{"krate":0,"index":1619},{"krate":0,"index":1622},{"krate":0,"index":1625},{"krate":0,"index":1628},{"krate":0,"index":1631},{"krate":0,"index":6747},{"krate":0,"index":6754},{"krate":0,"index":6756},{"krate":0,"index":6757},{"krate":0,"index":6759},{"krate":0,"index":6760},{"krate":0,"index":6762},{"krate":0,"index":6763},{"krate":0,"index":1634},{"krate":0,"index":1638},{"krate":0,"index":1645},{"krate":0,"index":1649},{"krate":0,"index":1658},{"krate":0,"index":1666},{"krate":0,"index":1670},{"krate":0,"index":1674},{"krate":0,"index":1677},{"krate":0,"index":1681},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1687},{"krate":0,"index":1688},{"krate":0,"index":1689},{"krate":0,"index":1690},{"krate":0,"index":1692},{"krate":0,"index":1695},{"krate":0,"index":1697},{"krate":0,"index":1699},{"krate":0,"index":1700},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1721},{"krate":0,"index":1725},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1733},{"krate":0,"index":1735}],"decl_id":null,"docs":"  Decoding of DXT (S3TC) compression","sig":null,"attributes":[{"value":"cfg(feature = \"dxt\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7856,"byte_end":7879,"line_start":224,"line_end":224,"column_start":5,"column_end":28}},{"value":"deprecated =\n  \"DXT support will be removed or reworked in a future version. Prefer the `squish` crate instead. See https://github.com/image-rs/image/issues/1623\"","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7884,"byte_end":8047,"line_start":225,"line_end":225,"column_start":5,"column_end":168}},{"value":"/  Decoding of DXT (S3TC) compression","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":285840,"byte_end":285879,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":285880,"byte_end":285883,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  DXT is an image format that supports lossy compression","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":285884,"byte_end":285943,"line_start":3,"line_end":3,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":285944,"byte_end":285947,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":285948,"byte_end":285968,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_compression_s3tc.txt> - Description of the DXT compression OpenGL extensions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":285969,"byte_end":286121,"line_start":6,"line_end":6,"column_start":1,"column_end":153}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":286122,"byte_end":286125,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/  Note: this module only implements bare DXT encoding/decoding, it does not parse formats that can contain DXT files like .dds","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":286126,"byte_end":286255,"line_start":8,"line_end":8,"column_start":1,"column_end":130}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6748},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":286877,"byte_end":286881,"line_start":24,"line_end":24,"column_start":5,"column_end":9},"name":"DXT1","qualname":"::codecs::dxt::DxtVariant::DXT1","value":"DxtVariant::DXT1","parent":{"krate":0,"index":6747},"children":[],"decl_id":null,"docs":" The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is\n compressed into an 8 byte block of DXT1 data\n","sig":null,"attributes":[{"value":"/ The DXT1 format. 48 bytes of RGB data in a 4x4 pixel square is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":286753,"byte_end":286819,"line_start":22,"line_end":22,"column_start":5,"column_end":71}},{"value":"/ compressed into an 8 byte block of DXT1 data","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":286824,"byte_end":286872,"line_start":23,"line_end":23,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6750},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":287012,"byte_end":287016,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"name":"DXT3","qualname":"::codecs::dxt::DxtVariant::DXT3","value":"DxtVariant::DXT3","parent":{"krate":0,"index":6747},"children":[],"decl_id":null,"docs":" The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT3 data\n","sig":null,"attributes":[{"value":"/ The DXT3 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":286887,"byte_end":286954,"line_start":25,"line_end":25,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT3 data","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":286959,"byte_end":287007,"line_start":26,"line_end":26,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6752},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":287147,"byte_end":287151,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"name":"DXT5","qualname":"::codecs::dxt::DxtVariant::DXT5","value":"DxtVariant::DXT5","parent":{"krate":0,"index":6747},"children":[],"decl_id":null,"docs":" The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is\n compressed into a 16 byte block of DXT5 data\n","sig":null,"attributes":[{"value":"/ The DXT5 format. 64 bytes of RGBA data in a 4x4 pixel square is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":287022,"byte_end":287089,"line_start":28,"line_end":28,"column_start":5,"column_end":72}},{"value":"/ compressed into a 16 byte block of DXT5 data","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":287094,"byte_end":287142,"line_start":29,"line_end":29,"column_start":5,"column_end":53}}]},{"kind":"Enum","id":{"krate":0,"index":6747},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":286736,"byte_end":286746,"line_start":21,"line_end":21,"column_start":10,"column_end":20},"name":"DxtVariant","qualname":"::codecs::dxt::DxtVariant","value":"pub enum DxtVariant { DXT1, DXT3, DXT5, }","parent":null,"children":[{"krate":0,"index":6748},{"krate":0,"index":6750},{"krate":0,"index":6752}],"decl_id":null,"docs":" What version of DXT compression are we using?\n Note that DXT2 and DXT4 are left away as they're\n just DXT3 and DXT5 with premultiplied alpha\n","sig":null,"attributes":[{"value":"/ What version of DXT compression are we using?","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":286531,"byte_end":286580,"line_start":17,"line_end":17,"column_start":1,"column_end":50}},{"value":"/ Note that DXT2 and DXT4 are left away as they're","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":286581,"byte_end":286633,"line_start":18,"line_end":18,"column_start":1,"column_end":53}},{"value":"/ just DXT3 and DXT5 with premultiplied alpha","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":286634,"byte_end":286681,"line_start":19,"line_end":19,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1637},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":287772,"byte_end":287782,"line_start":52,"line_end":52,"column_start":12,"column_end":22},"name":"color_type","qualname":"<DxtVariant>::color_type","value":"pub fn color_type(Self) -> ColorType","parent":null,"children":[],"decl_id":null,"docs":" Returns the color type that is stored in this DXT variant\n","sig":null,"attributes":[{"value":"/ Returns the color type that is stored in this DXT variant","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":287699,"byte_end":287760,"line_start":51,"line_end":51,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1638},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":287989,"byte_end":287999,"line_start":61,"line_end":61,"column_start":12,"column_end":22},"name":"DxtDecoder","qualname":"::codecs::dxt::DxtDecoder","value":"DxtDecoder {  }","parent":null,"children":[{"krate":0,"index":1640},{"krate":0,"index":1641},{"krate":0,"index":1642},{"krate":0,"index":1643},{"krate":0,"index":1644}],"decl_id":null,"docs":" DXT decoder\n","sig":null,"attributes":[{"value":"/ DXT decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":287962,"byte_end":287977,"line_start":60,"line_end":60,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1647},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":288579,"byte_end":288582,"line_start":77,"line_end":77,"column_start":12,"column_end":15},"name":"new","qualname":"<DxtDecoder<R>>::new","value":"pub fn new(R, u32, u32, DxtVariant) -> Result<DxtDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new DXT decoder that decodes from the stream ```r```.\n As DXT is often stored as raw buffers with the width/height\n somewhere else the width and height of the image need\n to be passed in ```width``` and ```height```, as well as the\n DXT variant in ```variant```.\n width and height are required to be powers of 2 and at least 4.\n otherwise an error will be returned\n","sig":null,"attributes":[{"value":"/ Create a new DXT decoder that decodes from the stream ```r```.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":288148,"byte_end":288214,"line_start":70,"line_end":70,"column_start":5,"column_end":71}},{"value":"/ As DXT is often stored as raw buffers with the width/height","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":288219,"byte_end":288282,"line_start":71,"line_end":71,"column_start":5,"column_end":68}},{"value":"/ somewhere else the width and height of the image need","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":288287,"byte_end":288344,"line_start":72,"line_end":72,"column_start":5,"column_end":62}},{"value":"/ to be passed in ```width``` and ```height```, as well as the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":288349,"byte_end":288413,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ DXT variant in ```variant```.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":288418,"byte_end":288451,"line_start":74,"line_end":74,"column_start":5,"column_end":38}},{"value":"/ width and height are required to be powers of 2 and at least 4.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":288456,"byte_end":288523,"line_start":75,"line_end":75,"column_start":5,"column_end":72}},{"value":"/ otherwise an error will be returned","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":288528,"byte_end":288567,"line_start":76,"line_end":76,"column_start":5,"column_end":44}}]},{"kind":"Struct","id":{"krate":0,"index":1666},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292004,"byte_end":292013,"line_start":187,"line_end":187,"column_start":12,"column_end":21},"name":"DxtReader","qualname":"::codecs::dxt::DxtReader","value":"DxtReader {  }","parent":null,"children":[{"krate":0,"index":1668},{"krate":0,"index":1669}],"decl_id":null,"docs":" DXT reader\n","sig":null,"attributes":[{"value":"/ DXT reader","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":291978,"byte_end":291992,"line_start":186,"line_end":186,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":1674},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292326,"byte_end":292336,"line_start":200,"line_end":200,"column_start":12,"column_end":22},"name":"DxtEncoder","qualname":"::codecs::dxt::DxtEncoder","value":"DxtEncoder {  }","parent":null,"children":[{"krate":0,"index":1676}],"decl_id":null,"docs":" DXT encoder\n","sig":null,"attributes":[{"value":"/ DXT encoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292299,"byte_end":292314,"line_start":199,"line_end":199,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1679},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292467,"byte_end":292470,"line_start":206,"line_end":206,"column_start":12,"column_end":15},"name":"new","qualname":"<DxtEncoder<W>>::new","value":"pub fn new(W) -> DxtEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292397,"byte_end":292455,"line_start":205,"line_end":205,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292734,"byte_end":292740,"line_start":214,"line_end":214,"column_start":12,"column_end":18},"name":"encode","qualname":"<DxtEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, DxtVariant) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image data ```data```\n that has dimensions ```width``` and ```height```\n in ```DxtVariant``` ```variant```\n data is assumed to be in variant.color_type()\n","sig":null,"attributes":[{"value":"/ Encodes the image data ```data```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292532,"byte_end":292569,"line_start":210,"line_end":210,"column_start":5,"column_end":42}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292574,"byte_end":292626,"line_start":211,"line_end":211,"column_start":5,"column_end":57}},{"value":"/ in ```DxtVariant``` ```variant```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292631,"byte_end":292668,"line_start":212,"line_end":212,"column_start":5,"column_end":42}},{"value":"/ data is assumed to be in variant.color_type()","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292673,"byte_end":292722,"line_start":213,"line_end":213,"column_start":5,"column_end":54}}]},{"kind":"Mod","id":{"krate":0,"index":1737},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"farbfeld","qualname":"::codecs::farbfeld","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","parent":null,"children":[{"krate":0,"index":1738},{"krate":0,"index":1741},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1748},{"krate":0,"index":1751},{"krate":0,"index":1754},{"krate":0,"index":1757},{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1764},{"krate":0,"index":1767},{"krate":0,"index":1770},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1777},{"krate":0,"index":1780},{"krate":0,"index":1783},{"krate":0,"index":1786},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1793},{"krate":0,"index":1796},{"krate":0,"index":1799},{"krate":0,"index":1802},{"krate":0,"index":1805},{"krate":0,"index":1808},{"krate":0,"index":1815},{"krate":0,"index":1824},{"krate":0,"index":1827},{"krate":0,"index":1832},{"krate":0,"index":1835},{"krate":0,"index":1838},{"krate":0,"index":1841},{"krate":0,"index":1844},{"krate":0,"index":1852},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":1869}],"decl_id":null,"docs":" Decoding of farbfeld images","sig":null,"attributes":[{"value":"cfg(feature = \"farbfeld\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8069,"byte_end":8097,"line_start":227,"line_end":227,"column_start":5,"column_end":33}},{"value":"/ Decoding of farbfeld images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":316820,"byte_end":316851,"line_start":1,"line_end":1,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":316852,"byte_end":316855,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ farbfeld is a lossless image format which is easy to parse, pipe and compress.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":316856,"byte_end":316938,"line_start":3,"line_end":3,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":316939,"byte_end":316942,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ It has the following format:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":316943,"byte_end":316975,"line_start":5,"line_end":5,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":316976,"byte_end":316979,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ | Bytes  | Description                                             |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":316980,"byte_end":317052,"line_start":7,"line_end":7,"column_start":1,"column_end":73}},{"value":"/ |--------|---------------------------------------------------------|","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":317053,"byte_end":317125,"line_start":8,"line_end":8,"column_start":1,"column_end":73}},{"value":"/ | 8      | \"farbfeld\" magic value                                  |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":317126,"byte_end":317198,"line_start":9,"line_end":9,"column_start":1,"column_end":73}},{"value":"/ | 4      | 32-Bit BE unsigned integer (width)                      |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":317199,"byte_end":317271,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ | 4      | 32-Bit BE unsigned integer (height)                     |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":317272,"byte_end":317344,"line_start":11,"line_end":11,"column_start":1,"column_end":73}},{"value":"/ | [2222] | 4⋅16-Bit BE unsigned integers [RGBA] / pixel, row-major |","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":317345,"byte_end":317419,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":317420,"byte_end":317423,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The RGB-data should be sRGB for best interoperability and not alpha-premultiplied.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":317424,"byte_end":317510,"line_start":14,"line_end":14,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":317511,"byte_end":317514,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":317515,"byte_end":317534,"line_start":16,"line_end":16,"column_start":1,"column_end":20}},{"value":"/ * <https://tools.suckless.org/farbfeld/> - the farbfeld specification","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":317535,"byte_end":317608,"line_start":17,"line_end":17,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1808},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":318019,"byte_end":318033,"line_start":32,"line_end":32,"column_start":12,"column_end":26},"name":"FarbfeldReader","qualname":"::codecs::farbfeld::FarbfeldReader","value":"FarbfeldReader {  }","parent":null,"children":[{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1812},{"krate":0,"index":1813},{"krate":0,"index":1814}],"decl_id":null,"docs":" farbfeld Reader\n","sig":null,"attributes":[{"value":"/ farbfeld Reader","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":317988,"byte_end":318007,"line_start":31,"line_end":31,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1838},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":323369,"byte_end":323384,"line_start":187,"line_end":187,"column_start":12,"column_end":27},"name":"FarbfeldDecoder","qualname":"::codecs::farbfeld::FarbfeldDecoder","value":"FarbfeldDecoder {  }","parent":null,"children":[{"krate":0,"index":1840}],"decl_id":null,"docs":" farbfeld decoder\n","sig":null,"attributes":[{"value":"/ farbfeld decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":323337,"byte_end":323357,"line_start":186,"line_end":186,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1843},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":323543,"byte_end":323546,"line_start":193,"line_end":193,"column_start":12,"column_end":15},"name":"new","qualname":"<FarbfeldDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<FarbfeldDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":323469,"byte_end":323531,"line_start":192,"line_end":192,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1860},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":325004,"byte_end":325019,"line_start":250,"line_end":250,"column_start":12,"column_end":27},"name":"FarbfeldEncoder","qualname":"::codecs::farbfeld::FarbfeldEncoder","value":"FarbfeldEncoder {  }","parent":null,"children":[{"krate":0,"index":1862}],"decl_id":null,"docs":" farbfeld encoder\n","sig":null,"attributes":[{"value":"/ farbfeld encoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":324972,"byte_end":324992,"line_start":249,"line_end":249,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1865},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":325187,"byte_end":325190,"line_start":256,"line_end":256,"column_start":12,"column_end":15},"name":"new","qualname":"<FarbfeldEncoder<W>>::new","value":"pub fn new(W) -> FarbfeldEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```. The writer should be buffered.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```. The writer should be buffered.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":325085,"byte_end":325175,"line_start":255,"line_end":255,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":1866},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":325410,"byte_end":325416,"line_start":262,"line_end":262,"column_start":12,"column_end":18},"name":"encode","qualname":"<FarbfeldEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data``` (native endian)\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data``` (native endian)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":325293,"byte_end":325341,"line_start":260,"line_end":260,"column_start":5,"column_end":53}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":325346,"byte_end":325398,"line_start":261,"line_end":261,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":1872},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gif","qualname":"::codecs::gif","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","parent":null,"children":[{"krate":0,"index":1873},{"krate":0,"index":1876},{"krate":0,"index":1879},{"krate":0,"index":1880},{"krate":0,"index":1883},{"krate":0,"index":1886},{"krate":0,"index":1889},{"krate":0,"index":1892},{"krate":0,"index":1893},{"krate":0,"index":1895},{"krate":0,"index":1898},{"krate":0,"index":1901},{"krate":0,"index":1902},{"krate":0,"index":1905},{"krate":0,"index":1908},{"krate":0,"index":1911},{"krate":0,"index":1914},{"krate":0,"index":1915},{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1925},{"krate":0,"index":1928},{"krate":0,"index":1931},{"krate":0,"index":1934},{"krate":0,"index":1937},{"krate":0,"index":1940},{"krate":0,"index":1943},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1950},{"krate":0,"index":1953},{"krate":0,"index":1956},{"krate":0,"index":1959},{"krate":0,"index":1962},{"krate":0,"index":1965},{"krate":0,"index":1968},{"krate":0,"index":1972},{"krate":0,"index":1976},{"krate":0,"index":1981},{"krate":0,"index":1985},{"krate":0,"index":1993},{"krate":0,"index":1999},{"krate":0,"index":2002},{"krate":0,"index":2008},{"krate":0,"index":2012},{"krate":0,"index":2019},{"krate":0,"index":6765},{"krate":0,"index":6771},{"krate":0,"index":6773},{"krate":0,"index":6774},{"krate":0,"index":2021},{"krate":0,"index":2023},{"krate":0,"index":2029},{"krate":0,"index":2045}],"decl_id":null,"docs":"  Decoding of GIF Images","sig":null,"attributes":[{"value":"cfg(feature = \"gif\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8124,"byte_end":8147,"line_start":229,"line_end":229,"column_start":5,"column_end":28}},{"value":"/  Decoding of GIF Images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":329794,"byte_end":329821,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":329822,"byte_end":329825,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  GIF (Graphics Interchange Format) is an image format that supports lossless compression.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":329826,"byte_end":329919,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":329920,"byte_end":329923,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":329924,"byte_end":329944,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <http://www.w3.org/Graphics/GIF/spec-gif89a.txt> - The GIF Specification","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":329945,"byte_end":330024,"line_start":6,"line_end":6,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330025,"byte_end":330028,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330029,"byte_end":330043,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/ ```rust,no_run","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330044,"byte_end":330062,"line_start":9,"line_end":9,"column_start":1,"column_end":19}},{"value":"/ use image::codecs::gif::{GifDecoder, GifEncoder};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330063,"byte_end":330116,"line_start":10,"line_end":10,"column_start":1,"column_end":54}},{"value":"/ use image::{ImageDecoder, AnimationDecoder};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330117,"byte_end":330165,"line_start":11,"line_end":11,"column_start":1,"column_end":49}},{"value":"/ use std::fs::File;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330166,"byte_end":330188,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"/ # fn main() -> std::io::Result<()> {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330189,"byte_end":330229,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ // Decode a gif into frames","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330230,"byte_end":330261,"line_start":14,"line_end":14,"column_start":1,"column_end":32}},{"value":"/ let file_in = File::open(\"foo.gif\")?;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330262,"byte_end":330303,"line_start":15,"line_end":15,"column_start":1,"column_end":42}},{"value":"/ let mut decoder = GifDecoder::new(file_in).unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330304,"byte_end":330360,"line_start":16,"line_end":16,"column_start":1,"column_end":57}},{"value":"/ let frames = decoder.into_frames();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330361,"byte_end":330400,"line_start":17,"line_end":17,"column_start":1,"column_end":40}},{"value":"/ let frames = frames.collect_frames().expect(\"error decoding gif\");","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330401,"byte_end":330471,"line_start":18,"line_end":18,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330472,"byte_end":330475,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // Encode frames into a gif and save to a file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330476,"byte_end":330526,"line_start":20,"line_end":20,"column_start":1,"column_end":51}},{"value":"/ let mut file_out = File::open(\"out.gif\")?;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330527,"byte_end":330573,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/ let mut encoder = GifEncoder::new(file_out);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330574,"byte_end":330622,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/ encoder.encode_frames(frames.into_iter());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330623,"byte_end":330669,"line_start":23,"line_end":23,"column_start":1,"column_end":47}},{"value":"/ # Ok(())","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330670,"byte_end":330682,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/ # }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330683,"byte_end":330690,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330691,"byte_end":330698,"line_start":26,"line_end":26,"column_start":1,"column_end":8}},{"value":"allow(clippy :: while_let_loop)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":330699,"byte_end":330732,"line_start":27,"line_end":27,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1968},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":331350,"byte_end":331360,"line_start":51,"line_end":51,"column_start":12,"column_end":22},"name":"GifDecoder","qualname":"::codecs::gif::GifDecoder","value":"GifDecoder {  }","parent":null,"children":[{"krate":0,"index":1970},{"krate":0,"index":1971}],"decl_id":null,"docs":" GIF decoder\n","sig":null,"attributes":[{"value":"/ GIF decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":331323,"byte_end":331338,"line_start":50,"line_end":50,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":331528,"byte_end":331531,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<GifDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<GifDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes the input steam `r`\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes the input steam `r`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":331458,"byte_end":331516,"line_start":57,"line_end":57,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":331933,"byte_end":331944,"line_start":69,"line_end":69,"column_start":12,"column_end":23},"name":"with_limits","qualname":"<GifDecoder<R>>::with_limits","value":"pub fn with_limits(R, Limits) -> ImageResult<GifDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes the input steam `r`, using limits `limits`\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes the input steam `r`, using limits `limits`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":331840,"byte_end":331921,"line_start":68,"line_end":68,"column_start":5,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":1976},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":332305,"byte_end":332314,"line_start":81,"line_end":81,"column_start":12,"column_end":21},"name":"GifReader","qualname":"::codecs::gif::GifReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":332248,"byte_end":332293,"line_start":80,"line_end":80,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6766},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":343770,"byte_end":343776,"line_start":396,"line_end":396,"column_start":5,"column_end":11},"name":"Finite","qualname":"::codecs::gif::Repeat::Finite","value":"Repeat::Finite(u16)","parent":{"krate":0,"index":6765},"children":[],"decl_id":null,"docs":" Finite number of repetitions\n","sig":null,"attributes":[{"value":"/ Finite number of repetitions","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":343733,"byte_end":343765,"line_start":395,"line_end":395,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":6769},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":343807,"byte_end":343815,"line_start":398,"line_end":398,"column_start":5,"column_end":13},"name":"Infinite","qualname":"::codecs::gif::Repeat::Infinite","value":"Repeat::Infinite","parent":{"krate":0,"index":6765},"children":[],"decl_id":null,"docs":" Looping GIF\n","sig":null,"attributes":[{"value":"/ Looping GIF","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":343787,"byte_end":343802,"line_start":397,"line_end":397,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":6765},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":343720,"byte_end":343726,"line_start":394,"line_end":394,"column_start":10,"column_end":16},"name":"Repeat","qualname":"::codecs::gif::Repeat","value":"pub enum Repeat { Finite(u16), Infinite, }","parent":null,"children":[{"krate":0,"index":6766},{"krate":0,"index":6769}],"decl_id":null,"docs":" Number of repetitions for a GIF animation\n","sig":null,"attributes":[{"value":"/ Number of repetitions for a GIF animation","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":343635,"byte_end":343680,"line_start":392,"line_end":392,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2023},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344069,"byte_end":344079,"line_start":411,"line_end":411,"column_start":12,"column_end":22},"name":"GifEncoder","qualname":"::codecs::gif::GifEncoder","value":"GifEncoder {  }","parent":null,"children":[{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":2027},{"krate":0,"index":2028}],"decl_id":null,"docs":" GIF encoder.\n","sig":null,"attributes":[{"value":"/ GIF encoder.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344041,"byte_end":344057,"line_start":410,"line_end":410,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2031},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344276,"byte_end":344279,"line_start":420,"line_end":420,"column_start":12,"column_end":15},"name":"new","qualname":"<GifEncoder<W>>::new","value":"pub fn new(W) -> GifEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new GIF encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new GIF encoder.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344234,"byte_end":344264,"line_start":419,"line_end":419,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2032},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344544,"byte_end":344558,"line_start":427,"line_end":427,"column_start":12,"column_end":26},"name":"new_with_speed","qualname":"<GifEncoder<W>>::new_with_speed","value":"pub fn new_with_speed(W, i32) -> GifEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new GIF encoder, and has the speed parameter `speed`. See\n [`Frame::from_rgba_speed`](/gif/struct.Frame.html#method.from_rgb_speed)\n for more information.\n","sig":null,"attributes":[{"value":"/ Create a new GIF encoder, and has the speed parameter `speed`. See","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344351,"byte_end":344421,"line_start":424,"line_end":424,"column_start":5,"column_end":75}},{"value":"/ [`Frame::from_rgba_speed`](/gif/struct.Frame.html#method.from_rgb_speed)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344426,"byte_end":344502,"line_start":425,"line_end":425,"column_start":5,"column_end":81}},{"value":"/ for more information.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344507,"byte_end":344532,"line_start":426,"line_end":426,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2033},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344917,"byte_end":344927,"line_start":441,"line_end":441,"column_start":12,"column_end":22},"name":"set_repeat","qualname":"<GifEncoder<W>>::set_repeat","value":"pub fn set_repeat(&mut Self, Repeat) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Set the repeat behaviour of the encoded GIF\n","sig":null,"attributes":[{"value":"/ Set the repeat behaviour of the encoded GIF","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344858,"byte_end":344905,"line_start":440,"line_end":440,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":2034},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":345268,"byte_end":345274,"line_start":452,"line_end":452,"column_start":12,"column_end":18},"name":"encode","qualname":"<GifEncoder<W>>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode a single image.\n","sig":null,"attributes":[{"value":"/ Encode a single image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":345230,"byte_end":345256,"line_start":451,"line_end":451,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2035},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":346032,"byte_end":346044,"line_start":475,"line_end":475,"column_start":12,"column_end":24},"name":"encode_frame","qualname":"<GifEncoder<W>>::encode_frame","value":"pub fn encode_frame(&mut Self, animation::Frame) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode one frame of animation.\n","sig":null,"attributes":[{"value":"/ Encode one frame of animation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":345986,"byte_end":346020,"line_start":474,"line_end":474,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2036},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":346330,"byte_end":346343,"line_start":482,"line_end":482,"column_start":12,"column_end":25},"name":"encode_frames","qualname":"<GifEncoder<W>>::encode_frames","value":"pub fn encode_frames<F>(&mut Self, F) -> ImageResult<()> where\nF: IntoIterator<Item = animation::Frame>","parent":null,"children":[],"decl_id":null,"docs":" Encodes Frames.\n Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.\n","sig":null,"attributes":[{"value":"/ Encodes Frames.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":346200,"byte_end":346219,"line_start":480,"line_end":480,"column_start":5,"column_end":24}},{"value":"/ Consider using `try_encode_frames` instead to encode an `animation::Frames` like iterator.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":346224,"byte_end":346318,"line_start":481,"line_end":481,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":2038},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":346822,"byte_end":346839,"line_start":495,"line_end":495,"column_start":12,"column_end":29},"name":"try_encode_frames","qualname":"<GifEncoder<W>>::try_encode_frames","value":"pub fn try_encode_frames<F>(&mut Self, F) -> ImageResult<()> where\nF: IntoIterator<Item = ImageResult<animation::Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Try to encode a collection of `ImageResult<animation::Frame>` objects.\n Use this function to encode an `animation::Frames` like iterator.\n Whenever an `Err` item is encountered, that value is returned without further actions.\n","sig":null,"attributes":[{"value":"/ Try to encode a collection of `ImageResult<animation::Frame>` objects.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":346567,"byte_end":346641,"line_start":492,"line_end":492,"column_start":5,"column_end":79}},{"value":"/ Use this function to encode an `animation::Frames` like iterator.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":346646,"byte_end":346715,"line_start":493,"line_end":493,"column_start":5,"column_end":74}},{"value":"/ Whenever an `Err` item is encountered, that value is returned without further actions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":346720,"byte_end":346810,"line_start":494,"line_end":494,"column_start":5,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":2050},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"hdr","qualname":"::codecs::hdr","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","parent":null,"children":[{"krate":0,"index":2051},{"krate":0,"index":2289},{"krate":0,"index":2360},{"krate":0,"index":2361}],"decl_id":null,"docs":"  Decoding of Radiance HDR Images","sig":null,"attributes":[{"value":"cfg(feature = \"hdr\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8169,"byte_end":8192,"line_start":231,"line_end":231,"column_start":5,"column_end":28}},{"value":"/  Decoding of Radiance HDR Images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":351199,"byte_end":351235,"line_start":1,"line_end":1,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":351236,"byte_end":351239,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder for Radiance HDR images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":351240,"byte_end":351278,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":351279,"byte_end":351282,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":351283,"byte_end":351303,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":351304,"byte_end":351307,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/  * <http://radsite.lbl.gov/radiance/refer/filefmts.pdf>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":351308,"byte_end":351367,"line_start":7,"line_end":7,"column_start":1,"column_end":60}},{"value":"/  * <http://www.graphics.cornell.edu/~bjw/rgbe/rgbe.c>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":351368,"byte_end":351425,"line_start":8,"line_end":8,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/mod.rs","byte_start":351426,"byte_end":351429,"line_start":9,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":6849},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":356117,"byte_end":356127,"line_start":129,"line_end":129,"column_start":12,"column_end":22},"name":"HdrAdapter","qualname":"::codecs::hdr::decoder::HdrAdapter","value":"HdrAdapter {  }","parent":null,"children":[{"krate":0,"index":6851},{"krate":0,"index":6852}],"decl_id":null,"docs":" Adapter to conform to ```ImageDecoder``` trait\n","sig":null,"attributes":[{"value":"/ Adapter to conform to ```ImageDecoder``` trait","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":356038,"byte_end":356088,"line_start":127,"line_end":127,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2164},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":356297,"byte_end":356300,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrAdapter<R>>::new","value":"pub fn new(R) -> ImageResult<HdrAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates adapter\n","sig":null,"attributes":[{"value":"/ Creates adapter","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":356266,"byte_end":356285,"line_start":136,"line_end":136,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2165},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":356573,"byte_end":356586,"line_start":147,"line_end":147,"column_start":12,"column_end":25},"name":"new_nonstrict","qualname":"<HdrAdapter<R>>::new_nonstrict","value":"pub fn new_nonstrict(R) -> ImageResult<HdrAdapter<R>>","parent":null,"children":[],"decl_id":null,"docs":" Allows reading old Radiance HDR images\n","sig":null,"attributes":[{"value":"/ Allows reading old Radiance HDR images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":356519,"byte_end":356561,"line_start":146,"line_end":146,"column_start":5,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":2167},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":357566,"byte_end":357575,"line_start":176,"line_end":176,"column_start":12,"column_end":21},"name":"HdrReader","qualname":"::codecs::hdr::decoder::HdrReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":357509,"byte_end":357554,"line_start":175,"line_end":175,"column_start":1,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":2191},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359149,"byte_end":359158,"line_start":239,"line_end":239,"column_start":11,"column_end":20},"name":"SIGNATURE","qualname":"::codecs::hdr::decoder::SIGNATURE","value":"&[u8]","parent":null,"children":[],"decl_id":null,"docs":" Radiance HDR file signature\n","sig":null,"attributes":[{"value":"/ Radiance HDR file signature","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359107,"byte_end":359138,"line_start":238,"line_end":238,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":6856},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359276,"byte_end":359286,"line_start":244,"line_end":244,"column_start":12,"column_end":22},"name":"HdrDecoder","qualname":"::codecs::hdr::decoder::HdrDecoder","value":"HdrDecoder {  }","parent":null,"children":[{"krate":0,"index":6858},{"krate":0,"index":6859},{"krate":0,"index":6860},{"krate":0,"index":6861}],"decl_id":null,"docs":" An Radiance HDR decoder\n","sig":null,"attributes":[{"value":"/ An Radiance HDR decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359220,"byte_end":359247,"line_start":242,"line_end":242,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":6865},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359511,"byte_end":359521,"line_start":254,"line_end":254,"column_start":12,"column_end":22},"name":"Rgbe8Pixel","qualname":"::codecs::hdr::decoder::Rgbe8Pixel","value":"Rgbe8Pixel { c, e }","parent":null,"children":[{"krate":0,"index":6866},{"krate":0,"index":6868}],"decl_id":null,"docs":" Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)\n","sig":null,"attributes":[{"value":"/ Refer to [wikipedia](https://en.wikipedia.org/wiki/RGBE_image_format)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359361,"byte_end":359434,"line_start":251,"line_end":251,"column_start":1,"column_end":74}},{"value":"repr(C)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359435,"byte_end":359445,"line_start":252,"line_end":252,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":6866},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359557,"byte_end":359558,"line_start":256,"line_end":256,"column_start":9,"column_end":10},"name":"c","qualname":"::codecs::hdr::decoder::Rgbe8Pixel::c","value":"[u8; 3]","parent":{"krate":0,"index":6865},"children":[],"decl_id":null,"docs":" Color components\n","sig":null,"attributes":[{"value":"/ Color components","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359528,"byte_end":359548,"line_start":255,"line_end":255,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":6868},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359594,"byte_end":359595,"line_start":258,"line_end":258,"column_start":9,"column_end":10},"name":"e","qualname":"::codecs::hdr::decoder::Rgbe8Pixel::e","value":"u8","parent":{"krate":0,"index":6865},"children":[],"decl_id":null,"docs":" Exponent\n","sig":null,"attributes":[{"value":"/ Exponent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359573,"byte_end":359585,"line_start":257,"line_end":257,"column_start":5,"column_end":17}}]},{"kind":"Function","id":{"krate":0,"index":2193},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359656,"byte_end":359661,"line_start":262,"line_end":262,"column_start":8,"column_end":13},"name":"rgbe8","qualname":"::codecs::hdr::decoder::rgbe8","value":"pub fn rgbe8(u8, u8, u8, u8) -> Rgbe8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Creates ```Rgbe8Pixel``` from components\n","sig":null,"attributes":[{"value":"/ Creates ```Rgbe8Pixel``` from components","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359604,"byte_end":359648,"line_start":261,"line_end":261,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2195},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359850,"byte_end":359856,"line_start":269,"line_end":269,"column_start":12,"column_end":18},"name":"to_hdr","qualname":"<Rgbe8Pixel>::to_hdr","value":"pub fn to_hdr(Self) -> Rgb<f32>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```Rgbe8Pixel``` into ```Rgb<f32>``` linearly\n","sig":null,"attributes":[{"value":"/ Converts ```Rgbe8Pixel``` into ```Rgb<f32>``` linearly","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359766,"byte_end":359824,"line_start":267,"line_end":267,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359829,"byte_end":359838,"line_start":268,"line_end":268,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2196},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360616,"byte_end":360622,"line_start":291,"line_end":291,"column_start":12,"column_end":18},"name":"to_ldr","qualname":"<Rgbe8Pixel>::to_ldr","value":"pub fn to_ldr<T: Primitive + Zero>(Self) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts ```Rgbe8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","sig":null,"attributes":[{"value":"/ Converts ```Rgbe8Pixel``` into ```Rgb<T>``` with scale=1 and gamma=2.2","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360351,"byte_end":360425,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360430,"byte_end":360433,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360438,"byte_end":360487,"line_start":285,"line_end":285,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360492,"byte_end":360495,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360500,"byte_end":360511,"line_start":287,"line_end":287,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360516,"byte_end":360519,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Panics when ```T::max_value()``` cannot be represented as f32.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360524,"byte_end":360590,"line_start":289,"line_end":289,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360595,"byte_end":360604,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2198},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":361008,"byte_end":361026,"line_start":304,"line_end":304,"column_start":12,"column_end":30},"name":"to_ldr_scale_gamma","qualname":"<Rgbe8Pixel>::to_ldr_scale_gamma","value":"pub fn to_ldr_scale_gamma<T: Primitive + Zero>(Self, f32, f32) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":" Converts Rgbe8Pixel into Rgb<T> using provided scale and gamma","sig":null,"attributes":[{"value":"/ Converts Rgbe8Pixel into Rgb<T> using provided scale and gamma","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360715,"byte_end":360781,"line_start":295,"line_end":295,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360786,"byte_end":360789,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ color_ldr = (color_hdr*scale)<sup>gamma</sup>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360794,"byte_end":360843,"line_start":297,"line_end":297,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360848,"byte_end":360851,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360856,"byte_end":360867,"line_start":299,"line_end":299,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360872,"byte_end":360875,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ Panics when T::max_value() cannot be represented as f32.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360880,"byte_end":360940,"line_start":301,"line_end":301,"column_start":5,"column_end":65}},{"value":"/ Panics when scale or gamma is NaN","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360945,"byte_end":360982,"line_start":302,"line_end":302,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":360987,"byte_end":360996,"line_start":303,"line_end":303,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2204},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362234,"byte_end":362237,"line_start":335,"line_end":335,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<HdrDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```r```\n if the header is valid, creates HdrDecoder\n strict mode is enabled\n","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```r```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362085,"byte_end":362140,"line_start":332,"line_end":332,"column_start":5,"column_end":60}},{"value":"/ if the header is valid, creates HdrDecoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362145,"byte_end":362191,"line_start":333,"line_end":333,"column_start":5,"column_end":51}},{"value":"/ strict mode is enabled","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362196,"byte_end":362222,"line_start":334,"line_end":334,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2205},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362645,"byte_end":362660,"line_start":346,"line_end":346,"column_start":12,"column_end":27},"name":"with_strictness","qualname":"<HdrDecoder<R>>::with_strictness","value":"pub fn with_strictness(R, bool) -> ImageResult<HdrDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads Radiance HDR image header from stream ```reader```,\n if the header is valid, creates ```HdrDecoder```.","sig":null,"attributes":[{"value":"/ Reads Radiance HDR image header from stream ```reader```,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362342,"byte_end":362403,"line_start":339,"line_end":339,"column_start":5,"column_end":66}},{"value":"/ if the header is valid, creates ```HdrDecoder```.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362408,"byte_end":362461,"line_start":340,"line_end":340,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362466,"byte_end":362469,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ strict enables strict mode","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362474,"byte_end":362504,"line_start":342,"line_end":342,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362509,"byte_end":362512,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Warning! Reading wrong file in non-strict mode","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362517,"byte_end":362567,"line_start":344,"line_end":344,"column_start":5,"column_end":55}},{"value":"/   could consume file size worth of memory in the process.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362572,"byte_end":362633,"line_start":345,"line_end":345,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2207},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":365749,"byte_end":365757,"line_start":427,"line_end":427,"column_start":12,"column_end":20},"name":"metadata","qualname":"<HdrDecoder<R>>::metadata","value":"pub fn metadata(&Self) -> HdrMetadata","parent":null,"children":[],"decl_id":null,"docs":" Returns file metadata. Refer to ```HdrMetadata``` for details.\n","sig":null,"attributes":[{"value":"/ Returns file metadata. Refer to ```HdrMetadata``` for details.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":365671,"byte_end":365737,"line_start":426,"line_end":426,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2208},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":365888,"byte_end":365905,"line_start":432,"line_end":432,"column_start":12,"column_end":29},"name":"read_image_native","qualname":"<HdrDecoder<R>>::read_image_native","value":"pub fn read_image_native(Self) -> ImageResult<Vec<Rgbe8Pixel>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of RGBE8 pixels\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of RGBE8 pixels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":365819,"byte_end":365876,"line_start":431,"line_end":431,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2209},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":366538,"byte_end":366558,"line_start":447,"line_end":447,"column_start":12,"column_end":32},"name":"read_image_transform","qualname":"<HdrDecoder<R>>::read_image_transform","value":"pub fn read_image_transform<T: Send, F: Send + Sync + Fn(Rgbe8Pixel) ->\n                            T>(Self, F, &mut [T]) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of transformed pixels\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of transformed pixels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":366463,"byte_end":366526,"line_start":446,"line_end":446,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2214},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":367697,"byte_end":367711,"line_start":483,"line_end":483,"column_start":12,"column_end":26},"name":"read_image_ldr","qualname":"<HdrDecoder<R>>::read_image_ldr","value":"pub fn read_image_ldr(Self) -> ImageResult<Vec<Rgb<u8>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<u8> pixels.\n scale = 1, gamma = 2.2\n","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<u8> pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":367594,"byte_end":367654,"line_start":481,"line_end":481,"column_start":5,"column_end":65}},{"value":"/ scale = 1, gamma = 2.2","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":367659,"byte_end":367685,"line_start":482,"line_end":482,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2216},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":368015,"byte_end":368029,"line_start":491,"line_end":491,"column_start":12,"column_end":26},"name":"read_image_hdr","qualname":"<HdrDecoder<R>>::read_image_hdr","value":"pub fn read_image_hdr(Self) -> ImageResult<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Consumes decoder and returns a vector of Rgb<f32> pixels.","sig":null,"attributes":[{"value":"/ Consumes decoder and returns a vector of Rgb<f32> pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":367934,"byte_end":367995,"line_start":489,"line_end":489,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":368000,"byte_end":368003,"line_start":490,"line_end":490,"column_start":5,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2223},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":368837,"byte_end":368860,"line_start":516,"line_end":516,"column_start":12,"column_end":35},"name":"HdrImageDecoderIterator","qualname":"::codecs::hdr::decoder::HdrImageDecoderIterator","value":"HdrImageDecoderIterator {  }","parent":null,"children":[{"krate":0,"index":2225},{"krate":0,"index":2226},{"krate":0,"index":2227},{"krate":0,"index":2228},{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231}],"decl_id":null,"docs":" Scanline buffered pixel by pixel iterator\n","sig":null,"attributes":[{"value":"/ Scanline buffered pixel by pixel iterator","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":368780,"byte_end":368825,"line_start":515,"line_end":515,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":6885},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376384,"byte_end":376395,"line_start":734,"line_end":734,"column_start":12,"column_end":23},"name":"HdrMetadata","qualname":"::codecs::hdr::decoder::HdrMetadata","value":"HdrMetadata { width, height, orientation, exposure, color_correction, pixel_aspect_ratio, custom_attributes }","parent":null,"children":[{"krate":0,"index":6886},{"krate":0,"index":6887},{"krate":0,"index":6888},{"krate":0,"index":6889},{"krate":0,"index":6890},{"krate":0,"index":6891},{"krate":0,"index":6892}],"decl_id":null,"docs":" Metadata for Radiance HDR image\n","sig":null,"attributes":[{"value":"/ Metadata for Radiance HDR image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376313,"byte_end":376348,"line_start":732,"line_end":732,"column_start":1,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":6886},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376533,"byte_end":376538,"line_start":737,"line_end":737,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::hdr::decoder::HdrMetadata::width","value":"u32","parent":{"krate":0,"index":6885},"children":[],"decl_id":null,"docs":" Width of decoded image. It could be either scanline length,\n or scanline count, depending on image orientation.\n","sig":null,"attributes":[{"value":"/ Width of decoded image. It could be either scanline length,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376402,"byte_end":376465,"line_start":735,"line_end":735,"column_start":5,"column_end":68}},{"value":"/ or scanline count, depending on image orientation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376470,"byte_end":376524,"line_start":736,"line_end":736,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":6887},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376617,"byte_end":376623,"line_start":739,"line_end":739,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::hdr::decoder::HdrMetadata::height","value":"u32","parent":{"krate":0,"index":6885},"children":[],"decl_id":null,"docs":" Height of decoded image. It depends on orientation too.\n","sig":null,"attributes":[{"value":"/ Height of decoded image. It depends on orientation too.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376549,"byte_end":376608,"line_start":738,"line_end":738,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":6888},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376898,"byte_end":376909,"line_start":743,"line_end":743,"column_start":9,"column_end":20},"name":"orientation","qualname":"::codecs::hdr::decoder::HdrMetadata::orientation","value":"((i8, i8), (i8, i8))","parent":{"krate":0,"index":6885},"children":[],"decl_id":null,"docs":" Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.\n First pair tells how resulting pixel coordinates change along a scanline.\n Second pair tells how they change from one scanline to the next.\n","sig":null,"attributes":[{"value":"/ Orientation matrix. For standard orientation it is ((1,0),(0,1)) - left to right, top to bottom.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376634,"byte_end":376734,"line_start":740,"line_end":740,"column_start":5,"column_end":105}},{"value":"/ First pair tells how resulting pixel coordinates change along a scanline.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376739,"byte_end":376816,"line_start":741,"line_end":741,"column_start":5,"column_end":82}},{"value":"/ Second pair tells how they change from one scanline to the next.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376821,"byte_end":376889,"line_start":742,"line_end":742,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":6889},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377134,"byte_end":377142,"line_start":748,"line_end":748,"column_start":9,"column_end":17},"name":"exposure","qualname":"::codecs::hdr::decoder::HdrMetadata::exposure","value":"std::option::Option<f32>","parent":{"krate":0,"index":6885},"children":[],"decl_id":null,"docs":" Divide color values by exposure to get to get physical radiance in\n watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by exposure to get to get physical radiance in","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":376937,"byte_end":377007,"line_start":744,"line_end":744,"column_start":5,"column_end":75}},{"value":"/ watts/steradian/m<sup>2</sup>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377012,"byte_end":377045,"line_start":745,"line_end":745,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377050,"byte_end":377053,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377058,"byte_end":377125,"line_start":747,"line_end":747,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":6890},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377386,"byte_end":377402,"line_start":753,"line_end":753,"column_start":9,"column_end":25},"name":"color_correction","qualname":"::codecs::hdr::decoder::HdrMetadata::color_correction","value":"std::option::Option<(f32, f32, f32)>","parent":{"krate":0,"index":6885},"children":[],"decl_id":null,"docs":" Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance\n in watts/steradian/m<sup>2</sup>","sig":null,"attributes":[{"value":"/ Divide color values by corresponding tuple member (r, g, b) to get to get physical radiance","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377161,"byte_end":377256,"line_start":749,"line_end":749,"column_start":5,"column_end":100}},{"value":"/ in watts/steradian/m<sup>2</sup>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377261,"byte_end":377297,"line_start":750,"line_end":750,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377302,"byte_end":377305,"line_start":751,"line_end":751,"column_start":5,"column_end":8}},{"value":"/ Image may not contain physical data, even if this field is set.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377310,"byte_end":377377,"line_start":752,"line_end":752,"column_start":5,"column_end":72}}]},{"kind":"Field","id":{"krate":0,"index":6891},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377481,"byte_end":377499,"line_start":755,"line_end":755,"column_start":9,"column_end":27},"name":"pixel_aspect_ratio","qualname":"::codecs::hdr::decoder::HdrMetadata::pixel_aspect_ratio","value":"std::option::Option<f32>","parent":{"krate":0,"index":6885},"children":[],"decl_id":null,"docs":" Pixel height divided by pixel width\n","sig":null,"attributes":[{"value":"/ Pixel height divided by pixel width","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377433,"byte_end":377472,"line_start":754,"line_end":754,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":6892},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377728,"byte_end":377745,"line_start":759,"line_end":759,"column_start":9,"column_end":26},"name":"custom_attributes","qualname":"::codecs::hdr::decoder::HdrMetadata::custom_attributes","value":"std::vec::Vec<(std::string::String, std::string::String)>","parent":{"krate":0,"index":6885},"children":[],"decl_id":null,"docs":" All lines contained in image header are put here. Ordering of lines is preserved.\n Lines in the form \"key=value\" are represented as (\"key\", \"value\").\n All other lines are (\"\", \"line\")\n","sig":null,"attributes":[{"value":"/ All lines contained in image header are put here. Ordering of lines is preserved.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377518,"byte_end":377603,"line_start":756,"line_end":756,"column_start":5,"column_end":90}},{"value":"/ Lines in the form \"key=value\" are represented as (\"key\", \"value\").","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377608,"byte_end":377678,"line_start":757,"line_end":757,"column_start":5,"column_end":75}},{"value":"/ All other lines are (\"\", \"line\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377683,"byte_end":377719,"line_start":758,"line_end":758,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":2274},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":387367,"byte_end":387380,"line_start":1006,"line_end":1006,"column_start":8,"column_end":21},"name":"read_raw_file","qualname":"::codecs::hdr::decoder::read_raw_file","value":"pub fn read_raw_file<P: AsRef<Path>>(P) -> ::std::io::Result<Vec<Rgb<f32>>>","parent":null,"children":[],"decl_id":null,"docs":" Helper function for reading raw 3-channel f32 images\n","sig":null,"attributes":[{"value":"/ Helper function for reading raw 3-channel f32 images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":387303,"byte_end":387359,"line_start":1005,"line_end":1005,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":2316},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":388553,"byte_end":388563,"line_start":8,"line_end":8,"column_start":12,"column_end":22},"name":"HdrEncoder","qualname":"::codecs::hdr::encoder::HdrEncoder","value":"HdrEncoder {  }","parent":null,"children":[{"krate":0,"index":2318}],"decl_id":null,"docs":" Radiance HDR encoder\n","sig":null,"attributes":[{"value":"/ Radiance HDR encoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":388517,"byte_end":388541,"line_start":7,"line_end":7,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":2321},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":388655,"byte_end":388658,"line_start":14,"line_end":14,"column_start":12,"column_end":15},"name":"new","qualname":"<HdrEncoder<W>>::new","value":"pub fn new(W) -> HdrEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates encoder\n","sig":null,"attributes":[{"value":"/ Creates encoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":388624,"byte_end":388643,"line_start":13,"line_end":13,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2322},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":388821,"byte_end":388827,"line_start":20,"line_end":20,"column_start":12,"column_end":18},"name":"encode","qualname":"<HdrEncoder<W>>::encode","value":"pub fn encode(Self, &[Rgb<f32>], usize, usize) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```data```\n that has dimensions ```width``` and ```height```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```data```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":388720,"byte_end":388752,"line_start":18,"line_end":18,"column_start":5,"column_end":37}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":388757,"byte_end":388809,"line_start":19,"line_end":19,"column_start":5,"column_end":57}}]},{"kind":"Function","id":{"krate":0,"index":2358},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":396318,"byte_end":396326,"line_start":230,"line_end":230,"column_start":8,"column_end":16},"name":"to_rgbe8","qualname":"::codecs::hdr::encoder::to_rgbe8","value":"pub fn to_rgbe8(Rgb<f32>) -> Rgbe8Pixel","parent":null,"children":[],"decl_id":null,"docs":" Converts ```Rgb<f32>``` into ```Rgbe8Pixel```\n","sig":null,"attributes":[{"value":"/ Converts ```Rgb<f32>``` into ```Rgbe8Pixel```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":396261,"byte_end":396310,"line_start":229,"line_end":229,"column_start":1,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":2362},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ico","qualname":"::codecs::ico","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","parent":null,"children":[{"krate":0,"index":2363},{"krate":0,"index":2366},{"krate":0,"index":2367},{"krate":0,"index":2370},{"krate":0,"index":2373},{"krate":0,"index":2511}],"decl_id":null,"docs":"  Decoding and Encoding of ICO files","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8214,"byte_end":8237,"line_start":233,"line_end":233,"column_start":5,"column_end":28}},{"value":"/  Decoding and Encoding of ICO files","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","byte_start":403725,"byte_end":403764,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","byte_start":403765,"byte_end":403768,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder and encoder for ICO (Windows Icon) image container files.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","byte_start":403769,"byte_end":403841,"line_start":3,"line_end":3,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","byte_start":403842,"byte_end":403845,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","byte_start":403846,"byte_end":403866,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * <https://msdn.microsoft.com/en-us/library/ms997538.aspx>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","byte_start":403867,"byte_end":403930,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/  * <https://en.wikipedia.org/wiki/ICO_%28file_format%29>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/mod.rs","byte_start":403931,"byte_end":403991,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":2462},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":408154,"byte_end":408164,"line_start":111,"line_end":111,"column_start":12,"column_end":22},"name":"IcoDecoder","qualname":"::codecs::ico::decoder::IcoDecoder","value":"IcoDecoder {  }","parent":null,"children":[{"krate":0,"index":2464},{"krate":0,"index":2465}],"decl_id":null,"docs":" An ico decoder\n","sig":null,"attributes":[{"value":"/ An ico decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":408124,"byte_end":408142,"line_start":110,"line_end":110,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":409304,"byte_end":409307,"line_start":148,"line_end":148,"column_start":12,"column_end":15},"name":"new","qualname":"<IcoDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<IcoDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":409231,"byte_end":409292,"line_start":147,"line_end":147,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":2494},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":412821,"byte_end":412830,"line_start":265,"line_end":265,"column_start":12,"column_end":21},"name":"IcoReader","qualname":"::codecs::ico::decoder::IcoReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":412764,"byte_end":412809,"line_start":264,"line_end":264,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":2554},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":424213,"byte_end":424223,"line_start":19,"line_end":19,"column_start":12,"column_end":22},"name":"IcoEncoder","qualname":"::codecs::ico::encoder::IcoEncoder","value":"IcoEncoder {  }","parent":null,"children":[{"krate":0,"index":2556}],"decl_id":null,"docs":" ICO encoder\n","sig":null,"attributes":[{"value":"/ ICO encoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":424186,"byte_end":424201,"line_start":18,"line_end":18,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":2557},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":424283,"byte_end":424291,"line_start":24,"line_end":24,"column_start":12,"column_end":20},"name":"IcoFrame","qualname":"::codecs::ico::encoder::IcoFrame","value":"IcoFrame {  }","parent":null,"children":[{"krate":0,"index":2559},{"krate":0,"index":2560},{"krate":0,"index":2561},{"krate":0,"index":2562}],"decl_id":null,"docs":" An ICO image entry\n","sig":null,"attributes":[{"value":"/ An ICO image entry","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":424249,"byte_end":424271,"line_start":23,"line_end":23,"column_start":1,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2565},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":424676,"byte_end":424688,"line_start":38,"line_end":38,"column_start":12,"column_end":24},"name":"with_encoded","qualname":"<IcoFrame>::with_encoded","value":"pub fn with_encoded<impl Into<Cow<'a, [u8]>>: Into<Cow>>(impl Into<Cow<'a, [u8]>>,\n                                                         u32, u32, ColorType)\n-> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `IcoFrame` using a pre-encoded PNG or BMP","sig":null,"attributes":[{"value":"/ Construct a new `IcoFrame` using a pre-encoded PNG or BMP","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":424523,"byte_end":424584,"line_start":35,"line_end":35,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":424589,"byte_end":424592,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ The `width` and `height` must be between 1 and 256 (inclusive).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":424597,"byte_end":424664,"line_start":37,"line_end":37,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2567},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":425858,"byte_end":425864,"line_start":75,"line_end":75,"column_start":12,"column_end":18},"name":"as_png","qualname":"<IcoFrame>::as_png","value":"pub fn as_png(&[u8], u32, u32, ColorType) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `IcoFrame` by encoding `buf` as a PNG","sig":null,"attributes":[{"value":"/ Construct a new `IcoFrame` by encoding `buf` as a PNG","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":425710,"byte_end":425767,"line_start":72,"line_end":72,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":425772,"byte_end":425775,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The `width` and `height` must be between 1 and 256 (inclusive)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":425780,"byte_end":425846,"line_start":74,"line_end":74,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2570},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":426299,"byte_end":426302,"line_start":86,"line_end":86,"column_start":12,"column_end":15},"name":"new","qualname":"<IcoEncoder<W>>::new","value":"pub fn new(W) -> IcoEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":426228,"byte_end":426287,"line_start":85,"line_end":85,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2571},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":426772,"byte_end":426778,"line_start":96,"line_end":96,"column_start":12,"column_end":18},"name":"encode","qualname":"<IcoEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image``` that has dimensions ```width``` and\n ```height``` and ```ColorType``` ```c```.  The dimensions of the image\n must be between 1 and 256 (inclusive) or an error will be returned.","sig":null,"attributes":[{"value":"/ Encodes the image ```image``` that has dimensions ```width``` and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":426364,"byte_end":426433,"line_start":90,"line_end":90,"column_start":5,"column_end":74}},{"value":"/ ```height``` and ```ColorType``` ```c```.  The dimensions of the image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":426438,"byte_end":426512,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ must be between 1 and 256 (inclusive) or an error will be returned.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":426517,"byte_end":426588,"line_start":92,"line_end":92,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":426593,"byte_end":426596,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Expects data to be big endian.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":426601,"byte_end":426635,"line_start":94,"line_end":94,"column_start":5,"column_end":39}},{"value":"deprecated =\n  \"Use `IcoEncoder::write_image` instead. Beware that `write_image` has a different endianness convention\"","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":426640,"byte_end":426760,"line_start":95,"line_end":95,"column_start":5,"column_end":125}}]},{"kind":"Method","id":{"krate":0,"index":2572},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":427359,"byte_end":427372,"line_start":109,"line_end":109,"column_start":12,"column_end":25},"name":"encode_images","qualname":"<IcoEncoder<W>>::encode_images","value":"pub fn encode_images(Self, &[IcoFrame]) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Takes some [`IcoFrame`]s and encodes them into an ICO.","sig":null,"attributes":[{"value":"/ Takes some [`IcoFrame`]s and encodes them into an ICO.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":427148,"byte_end":427206,"line_start":105,"line_end":105,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":427211,"byte_end":427214,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ `images` is a list of images, usually ordered by dimension, which","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":427219,"byte_end":427288,"line_start":107,"line_end":107,"column_start":5,"column_end":74}},{"value":"/ must be between 1 and 65535 (inclusive) in length.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":427293,"byte_end":427347,"line_start":108,"line_end":108,"column_start":5,"column_end":59}}]},{"kind":"Mod","id":{"krate":0,"index":2580},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::codecs::jpeg","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","parent":null,"children":[{"krate":0,"index":2581},{"krate":0,"index":2584},{"krate":0,"index":2585},{"krate":0,"index":2588},{"krate":0,"index":2591},{"krate":0,"index":2594},{"krate":0,"index":2673},{"krate":0,"index":2885},{"krate":0,"index":2896}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8259,"byte_end":8283,"line_start":235,"line_end":235,"column_start":5,"column_end":29}},{"value":"/ Decoding and Encoding of JPEG Images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430088,"byte_end":430128,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430129,"byte_end":430132,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430133,"byte_end":430228,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ This module implements the Baseline JPEG standard.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430229,"byte_end":430283,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430284,"byte_end":430287,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430288,"byte_end":430307,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430308,"byte_end":430384,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/mod.rs","byte_start":430385,"byte_end":430388,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2640},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":430871,"byte_end":430882,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"JpegDecoder","qualname":"::codecs::jpeg::decoder::JpegDecoder","value":"JpegDecoder {  }","parent":null,"children":[{"krate":0,"index":2642},{"krate":0,"index":2643}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[{"value":"/ JPEG decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":430843,"byte_end":430859,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":2646},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":431061,"byte_end":431064,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<JpegDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":430988,"byte_end":431049,"line_start":19,"line_end":19,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2648},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":432259,"byte_end":432264,"line_start":49,"line_end":49,"column_start":12,"column_end":17},"name":"scale","qualname":"<JpegDecoder<R>>::scale","value":"pub fn scale(&mut Self, u16, u16) -> ImageResult<(u16, u16)>","parent":null,"children":[],"decl_id":null,"docs":" Configure the decoder to scale the image during decoding.","sig":null,"attributes":[{"value":"/ Configure the decoder to scale the image during decoding.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":431645,"byte_end":431706,"line_start":36,"line_end":36,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":431711,"byte_end":431714,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ This efficiently scales the image by the smallest supported","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":431719,"byte_end":431782,"line_start":38,"line_end":38,"column_start":5,"column_end":68}},{"value":"/ scale factor that produces an image larger than or equal to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":431787,"byte_end":431850,"line_start":39,"line_end":39,"column_start":5,"column_end":68}},{"value":"/ the requested size in at least one axis. The currently","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":431855,"byte_end":431913,"line_start":40,"line_end":40,"column_start":5,"column_end":63}},{"value":"/ implemented scale factors are 1/8, 1/4, 1/2 and 1.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":431918,"byte_end":431972,"line_start":41,"line_end":41,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":431977,"byte_end":431980,"line_start":42,"line_end":42,"column_start":5,"column_end":8}},{"value":"/ To generate a thumbnail of an exact size, pass the desired","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":431985,"byte_end":432047,"line_start":43,"line_end":43,"column_start":5,"column_end":67}},{"value":"/ size and then scale to the final size using a traditional","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":432052,"byte_end":432113,"line_start":44,"line_end":44,"column_start":5,"column_end":66}},{"value":"/ resampling algorithm.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":432118,"byte_end":432143,"line_start":45,"line_end":45,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":432148,"byte_end":432151,"line_start":46,"line_end":46,"column_start":5,"column_end":8}},{"value":"/ The size of the image to be loaded, with the scale factor","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":432156,"byte_end":432217,"line_start":47,"line_end":47,"column_start":5,"column_end":66}},{"value":"/ applied, is returned.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":432222,"byte_end":432247,"line_start":48,"line_end":48,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":2649},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":432696,"byte_end":432706,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::codecs::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":432639,"byte_end":432684,"line_start":66,"line_end":66,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7006},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477330,"byte_end":477346,"line_start":292,"line_end":292,"column_start":5,"column_end":21},"name":"PixelAspectRatio","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::PixelAspectRatio","value":"PixelDensityUnit::PixelAspectRatio","parent":{"krate":0,"index":7005},"children":[],"decl_id":null,"docs":" Represents the absence of a unit, the values indicate only a\n [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n","sig":null,"attributes":[{"value":"/ Represents the absence of a unit, the values indicate only a","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477182,"byte_end":477246,"line_start":290,"line_end":290,"column_start":5,"column_end":69}},{"value":"/ [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477251,"byte_end":477325,"line_start":291,"line_end":291,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7008},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477387,"byte_end":477393,"line_start":295,"line_end":295,"column_start":5,"column_end":11},"name":"Inches","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::Inches","value":"PixelDensityUnit::Inches","parent":{"krate":0,"index":7005},"children":[],"decl_id":null,"docs":" Pixels per inch (2.54 cm)\n","sig":null,"attributes":[{"value":"/ Pixels per inch (2.54 cm)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477353,"byte_end":477382,"line_start":294,"line_end":294,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7010},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477430,"byte_end":477441,"line_start":298,"line_end":298,"column_start":5,"column_end":16},"name":"Centimeters","qualname":"::codecs::jpeg::encoder::PixelDensityUnit::Centimeters","value":"PixelDensityUnit::Centimeters","parent":{"krate":0,"index":7005},"children":[],"decl_id":null,"docs":" Pixels per centimeter\n","sig":null,"attributes":[{"value":"/ Pixels per centimeter","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477400,"byte_end":477425,"line_start":297,"line_end":297,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":7005},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477159,"byte_end":477175,"line_start":289,"line_end":289,"column_start":10,"column_end":26},"name":"PixelDensityUnit","qualname":"::codecs::jpeg::encoder::PixelDensityUnit","value":"pub enum PixelDensityUnit { PixelAspectRatio, Inches, Centimeters, }","parent":null,"children":[{"krate":0,"index":7006},{"krate":0,"index":7008},{"krate":0,"index":7010}],"decl_id":null,"docs":" Represents a unit in which the density of an image is measured\n","sig":null,"attributes":[{"value":"/ Represents a unit in which the density of an image is measured","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477038,"byte_end":477104,"line_start":287,"line_end":287,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":7023},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477786,"byte_end":477798,"line_start":311,"line_end":311,"column_start":12,"column_end":24},"name":"PixelDensity","qualname":"::codecs::jpeg::encoder::PixelDensity","value":"PixelDensity { density, unit }","parent":null,"children":[{"krate":0,"index":7024},{"krate":0,"index":7025}],"decl_id":null,"docs":" Represents the pixel density of an image","sig":null,"attributes":[{"value":"/ Represents the pixel density of an image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477446,"byte_end":477490,"line_start":301,"line_end":301,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477491,"byte_end":477494,"line_start":302,"line_end":302,"column_start":1,"column_end":4}},{"value":"/ For example, a 300 DPI image is represented by:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477495,"byte_end":477546,"line_start":303,"line_end":303,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477547,"byte_end":477550,"line_start":304,"line_end":304,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477551,"byte_end":477562,"line_start":305,"line_end":305,"column_start":1,"column_end":12}},{"value":"/ use image::codecs::jpeg::*;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477563,"byte_end":477594,"line_start":306,"line_end":306,"column_start":1,"column_end":32}},{"value":"/ let hdpi = PixelDensity::dpi(300);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477595,"byte_end":477633,"line_start":307,"line_end":307,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(hdpi, PixelDensity {density: (300,300), unit: PixelDensityUnit::Inches})","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477634,"byte_end":477721,"line_start":308,"line_end":308,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477722,"byte_end":477729,"line_start":309,"line_end":309,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":7024},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477861,"byte_end":477868,"line_start":313,"line_end":313,"column_start":9,"column_end":16},"name":"density","qualname":"::codecs::jpeg::encoder::PixelDensity::density","value":"(u16, u16)","parent":{"krate":0,"index":7023},"children":[],"decl_id":null,"docs":" A couple of values for (Xdensity, Ydensity)\n","sig":null,"attributes":[{"value":"/ A couple of values for (Xdensity, Ydensity)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477805,"byte_end":477852,"line_start":312,"line_end":312,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":7025},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477940,"byte_end":477944,"line_start":315,"line_end":315,"column_start":9,"column_end":13},"name":"unit","qualname":"::codecs::jpeg::encoder::PixelDensity::unit","value":"codecs::jpeg::encoder::PixelDensityUnit","parent":{"krate":0,"index":7023},"children":[],"decl_id":null,"docs":" The unit in which the density is measured\n","sig":null,"attributes":[{"value":"/ The unit in which the density is measured","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477886,"byte_end":477931,"line_start":314,"line_end":314,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2810},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":478150,"byte_end":478153,"line_start":322,"line_end":322,"column_start":12,"column_end":15},"name":"dpi","qualname":"<PixelDensity>::dpi","value":"pub fn dpi(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the most common pixel density type:\n the horizontal and the vertical density are equal,\n and measured in pixels per inch.\n","sig":null,"attributes":[{"value":"/ Creates the most common pixel density type:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477991,"byte_end":478038,"line_start":319,"line_end":319,"column_start":5,"column_end":52}},{"value":"/ the horizontal and the vertical density are equal,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":478043,"byte_end":478097,"line_start":320,"line_end":320,"column_start":5,"column_end":59}},{"value":"/ and measured in pixels per inch.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":478102,"byte_end":478138,"line_start":321,"line_end":321,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":2813},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":478604,"byte_end":478615,"line_start":341,"line_end":341,"column_start":12,"column_end":23},"name":"JpegEncoder","qualname":"::codecs::jpeg::encoder::JpegEncoder","value":"JpegEncoder {  }","parent":null,"children":[{"krate":0,"index":2815},{"krate":0,"index":2816},{"krate":0,"index":2817},{"krate":0,"index":2819},{"krate":0,"index":2821},{"krate":0,"index":2823},{"krate":0,"index":2825},{"krate":0,"index":2827}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":478552,"byte_end":478592,"line_start":340,"line_end":340,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2830},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":479055,"byte_end":479058,"line_start":357,"line_end":357,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegEncoder<W>>::new","value":"pub fn new(W) -> JpegEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":478985,"byte_end":479043,"line_start":356,"line_end":356,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2831},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":479346,"byte_end":479362,"line_start":364,"line_end":364,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JpegEncoder<W>>::new_with_quality","value":"pub fn new_with_quality(W, u8) -> JpegEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```, and has","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":479141,"byte_end":479208,"line_start":361,"line_end":361,"column_start":5,"column_end":72}},{"value":"/ the quality parameter ```quality``` with a value in the range 1-100","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":479213,"byte_end":479284,"line_start":362,"line_end":362,"column_start":5,"column_end":76}},{"value":"/ where 1 is the worst and 100 is the best.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":479289,"byte_end":479334,"line_start":363,"line_end":363,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2834},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":481546,"byte_end":481563,"line_start":432,"line_end":432,"column_start":12,"column_end":29},"name":"set_pixel_density","qualname":"<JpegEncoder<W>>::set_pixel_density","value":"pub fn set_pixel_density(&mut Self, PixelDensity)","parent":null,"children":[],"decl_id":null,"docs":" Set the pixel density of the images the encoder will encode.\n If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,\n and no DPI information will be stored in the image.\n","sig":null,"attributes":[{"value":"/ Set the pixel density of the images the encoder will encode.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":481314,"byte_end":481378,"line_start":429,"line_end":429,"column_start":5,"column_end":69}},{"value":"/ If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":481383,"byte_end":481474,"line_start":430,"line_end":430,"column_start":5,"column_end":96}},{"value":"/ and no DPI information will be stored in the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":481479,"byte_end":481534,"line_start":431,"line_end":431,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2835},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":481895,"byte_end":481901,"line_start":441,"line_end":441,"column_start":12,"column_end":18},"name":"encode","qualname":"<JpegEncoder<W>>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image stored in the raw byte buffer ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image stored in the raw byte buffer ```image```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":481661,"byte_end":481724,"line_start":436,"line_end":436,"column_start":5,"column_end":68}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":481729,"byte_end":481781,"line_start":437,"line_end":437,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":481786,"byte_end":481817,"line_start":438,"line_end":438,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":481822,"byte_end":481825,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":481830,"byte_end":481883,"line_start":440,"line_end":440,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2836},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":483732,"byte_end":483744,"line_start":487,"line_end":487,"column_start":12,"column_end":24},"name":"encode_image","qualname":"<JpegEncoder<W>>::encode_image","value":"pub fn encode_image<I: GenericImageView>(&mut Self, &I) -> ImageResult<()>\nwhere I::Pixel: PixelWithColorType","parent":null,"children":[],"decl_id":null,"docs":" Encodes the given image.","sig":null,"attributes":[{"value":"/ Encodes the given image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":483204,"byte_end":483232,"line_start":478,"line_end":478,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":483237,"byte_end":483240,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ As a special feature this does not require the whole image to be present in memory at the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":483245,"byte_end":483338,"line_start":480,"line_end":480,"column_start":5,"column_end":98}},{"value":"/ same time such that it may be computed on the fly, which is why this method exists on this","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":483343,"byte_end":483437,"line_start":481,"line_end":481,"column_start":5,"column_end":99}},{"value":"/ encoder but not on others. Instead the encoder will iterate over 8-by-8 blocks of pixels at","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":483442,"byte_end":483537,"line_start":482,"line_end":482,"column_start":5,"column_end":100}},{"value":"/ a time, inspecting each pixel exactly once. You can rely on this behaviour when calling","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":483542,"byte_end":483633,"line_start":483,"line_end":483,"column_start":5,"column_end":96}},{"value":"/ this method.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":483638,"byte_end":483654,"line_start":484,"line_end":484,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":483659,"byte_end":483662,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":483667,"byte_end":483720,"line_start":486,"line_end":486,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":2914},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"openexr","qualname":"::codecs::openexr","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","parent":null,"children":[{"krate":0,"index":2915},{"krate":0,"index":2916},{"krate":0,"index":2917},{"krate":0,"index":2918},{"krate":0,"index":2921},{"krate":0,"index":2924},{"krate":0,"index":2927},{"krate":0,"index":2930},{"krate":0,"index":2931},{"krate":0,"index":2934},{"krate":0,"index":2937},{"krate":0,"index":2940},{"krate":0,"index":2943},{"krate":0,"index":2946},{"krate":0,"index":2949},{"krate":0,"index":2952},{"krate":0,"index":2955},{"krate":0,"index":2958},{"krate":0,"index":2959},{"krate":0,"index":2962},{"krate":0,"index":2965},{"krate":0,"index":2968},{"krate":0,"index":7038},{"krate":0,"index":7044},{"krate":0,"index":2971},{"krate":0,"index":2979},{"krate":0,"index":2995},{"krate":0,"index":7047},{"krate":0,"index":7051},{"krate":0,"index":3002},{"krate":0,"index":3005},{"krate":0,"index":3008}],"decl_id":null,"docs":" Decoding of OpenEXR (.exr) Images","sig":null,"attributes":[{"value":"cfg(feature = \"openexr\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8306,"byte_end":8333,"line_start":237,"line_end":237,"column_start":5,"column_end":32}},{"value":"/ Decoding of OpenEXR (.exr) Images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":510794,"byte_end":510831,"line_start":1,"line_end":1,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":510832,"byte_end":510835,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ OpenEXR is an image format that is widely used, especially in VFX,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":510836,"byte_end":510906,"line_start":3,"line_end":3,"column_start":1,"column_end":71}},{"value":"/ because it supports lossless and lossy compression for float data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":510907,"byte_end":510977,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":510978,"byte_end":510981,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This decoder only supports RGB and RGBA images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":510982,"byte_end":511033,"line_start":6,"line_end":6,"column_start":1,"column_end":52}},{"value":"/ If an image does not contain alpha information,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511034,"byte_end":511085,"line_start":7,"line_end":7,"column_start":1,"column_end":52}},{"value":"/ it is defaulted to `1.0` (no transparency).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511086,"byte_end":511133,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511134,"byte_end":511137,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511138,"byte_end":511157,"line_start":10,"line_end":10,"column_start":1,"column_end":20}},{"value":"/ * <https://www.openexr.com/documentation.html> - The OpenEXR reference.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511158,"byte_end":511233,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511234,"byte_end":511237,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511238,"byte_end":511241,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Current limitations (July 2021):","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511242,"byte_end":511278,"line_start":14,"line_end":14,"column_start":1,"column_end":37}},{"value":"/     - only pixel type `Rgba32F` and `Rgba16F` are supported","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511279,"byte_end":511342,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"/     - only non-deep rgb/rgba files supported, no conversion from/to YCbCr or similar","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511343,"byte_end":511431,"line_start":16,"line_end":16,"column_start":1,"column_end":89}},{"value":"/     - only the first non-deep rgb layer is used","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511432,"byte_end":511483,"line_start":17,"line_end":17,"column_start":1,"column_end":52}},{"value":"/     - only the largest mip map level is used","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511484,"byte_end":511532,"line_start":18,"line_end":18,"column_start":1,"column_end":49}},{"value":"/     - pixels outside display window are lost","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511533,"byte_end":511581,"line_start":19,"line_end":19,"column_start":1,"column_end":49}},{"value":"/     - meta data is lost","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511582,"byte_end":511609,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"/     - dwaa/dwab compressed images not supported yet by the exr library","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511610,"byte_end":511684,"line_start":21,"line_end":21,"column_start":1,"column_end":75}},{"value":"/     - (chroma) subsampling not supported yet by the exr library","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":511685,"byte_end":511752,"line_start":22,"line_end":22,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":7038},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":512194,"byte_end":512208,"line_start":38,"line_end":38,"column_start":12,"column_end":26},"name":"OpenExrDecoder","qualname":"::codecs::openexr::OpenExrDecoder","value":"OpenExrDecoder {  }","parent":null,"children":[{"krate":0,"index":7040},{"krate":0,"index":7041},{"krate":0,"index":7042},{"krate":0,"index":7043}],"decl_id":null,"docs":" An OpenEXR decoder. Immediately reads the meta data from the file.\n","sig":null,"attributes":[{"value":"/ An OpenEXR decoder. Immediately reads the meta data from the file.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":512095,"byte_end":512165,"line_start":36,"line_end":36,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2973},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":513032,"byte_end":513035,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<OpenExrDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a decoder. Consumes the first few bytes of the source to extract image dimensions.\n Assumes the reader is buffered. In most cases,\n you should wrap your reader in a `BufReader` for best performance.\n Loads an alpha channel if the file has alpha samples.\n Use `with_alpha_preference` if you want to load or not load alpha unconditionally.\n","sig":null,"attributes":[{"value":"/ Create a decoder. Consumes the first few bytes of the source to extract image dimensions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":512644,"byte_end":512737,"line_start":53,"line_end":53,"column_start":5,"column_end":98}},{"value":"/ Assumes the reader is buffered. In most cases,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":512742,"byte_end":512792,"line_start":54,"line_end":54,"column_start":5,"column_end":55}},{"value":"/ you should wrap your reader in a `BufReader` for best performance.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":512797,"byte_end":512867,"line_start":55,"line_end":55,"column_start":5,"column_end":75}},{"value":"/ Loads an alpha channel if the file has alpha samples.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":512872,"byte_end":512929,"line_start":56,"line_end":56,"column_start":5,"column_end":62}},{"value":"/ Use `with_alpha_preference` if you want to load or not load alpha unconditionally.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":512934,"byte_end":513020,"line_start":57,"line_end":57,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":2974},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":513609,"byte_end":513630,"line_start":68,"line_end":68,"column_start":12,"column_end":33},"name":"with_alpha_preference","qualname":"<OpenExrDecoder<R>>::with_alpha_preference","value":"pub fn with_alpha_preference(R, Option<bool>) -> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a decoder. Consumes the first few bytes of the source to extract image dimensions.\n Assumes the reader is buffered. In most cases,\n you should wrap your reader in a `BufReader` for best performance.\n If alpha preference is specified, an alpha channel will\n always be present or always be not present in the returned image.\n If alpha preference is none, the alpha channel will only be returned if it is found in the file.\n","sig":null,"attributes":[{"value":"/ Create a decoder. Consumes the first few bytes of the source to extract image dimensions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":513131,"byte_end":513224,"line_start":62,"line_end":62,"column_start":5,"column_end":98}},{"value":"/ Assumes the reader is buffered. In most cases,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":513229,"byte_end":513279,"line_start":63,"line_end":63,"column_start":5,"column_end":55}},{"value":"/ you should wrap your reader in a `BufReader` for best performance.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":513284,"byte_end":513354,"line_start":64,"line_end":64,"column_start":5,"column_end":75}},{"value":"/ If alpha preference is specified, an alpha channel will","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":513359,"byte_end":513418,"line_start":65,"line_end":65,"column_start":5,"column_end":64}},{"value":"/ always be present or always be not present in the returned image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":513423,"byte_end":513492,"line_start":66,"line_end":66,"column_start":5,"column_end":74}},{"value":"/ If alpha preference is none, the alpha channel will only be returned if it is found in the file.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":513497,"byte_end":513597,"line_start":67,"line_end":67,"column_start":5,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":7047},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":524798,"byte_end":524812,"line_start":344,"line_end":344,"column_start":12,"column_end":26},"name":"OpenExrEncoder","qualname":"::codecs::openexr::OpenExrEncoder","value":"","parent":null,"children":[],"decl_id":null,"docs":" A thin wrapper that implements `ImageEncoder` for OpenEXR images. Will behave like `image::codecs::openexr::write_buffer`.\n","sig":null,"attributes":[{"value":"/ A thin wrapper that implements `ImageEncoder` for OpenEXR images. Will behave like `image::codecs::openexr::write_buffer`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":524643,"byte_end":524769,"line_start":342,"line_end":342,"column_start":1,"column_end":127}}]},{"kind":"Method","id":{"krate":0,"index":3004},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":525071,"byte_end":525074,"line_start":349,"line_end":349,"column_start":12,"column_end":15},"name":"new","qualname":"<OpenExrEncoder<W>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `ImageEncoder`. Does not write anything yet. Writing later will behave like `image::codecs::openexr::write_buffer`.\n","sig":null,"attributes":[{"value":"/ Create an `ImageEncoder`. Does not write anything yet. Writing later will behave like `image::codecs::openexr::write_buffer`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":524853,"byte_end":524982,"line_start":347,"line_end":347,"column_start":5,"column_end":134}}]},{"kind":"Mod","id":{"krate":0,"index":3009},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::codecs::png","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","parent":null,"children":[{"krate":0,"index":3010},{"krate":0,"index":3013},{"krate":0,"index":3016},{"krate":0,"index":3017},{"krate":0,"index":3020},{"krate":0,"index":3023},{"krate":0,"index":3026},{"krate":0,"index":3029},{"krate":0,"index":3030},{"krate":0,"index":3033},{"krate":0,"index":3036},{"krate":0,"index":3037},{"krate":0,"index":3040},{"krate":0,"index":3043},{"krate":0,"index":3046},{"krate":0,"index":3047},{"krate":0,"index":3050},{"krate":0,"index":3053},{"krate":0,"index":3056},{"krate":0,"index":3057},{"krate":0,"index":3060},{"krate":0,"index":3063},{"krate":0,"index":3066},{"krate":0,"index":3069},{"krate":0,"index":3072},{"krate":0,"index":3075},{"krate":0,"index":3078},{"krate":0,"index":3081},{"krate":0,"index":3084},{"krate":0,"index":3087},{"krate":0,"index":3088},{"krate":0,"index":3091},{"krate":0,"index":3094},{"krate":0,"index":3097},{"krate":0,"index":3100},{"krate":0,"index":3101},{"krate":0,"index":3104},{"krate":0,"index":3107},{"krate":0,"index":3110},{"krate":0,"index":3111},{"krate":0,"index":3113},{"krate":0,"index":3114},{"krate":0,"index":3116},{"krate":0,"index":3117},{"krate":0,"index":3119},{"krate":0,"index":3120},{"krate":0,"index":3122},{"krate":0,"index":3125},{"krate":0,"index":3127},{"krate":0,"index":3132},{"krate":0,"index":3135},{"krate":0,"index":3139},{"krate":0,"index":3143},{"krate":0,"index":3148},{"krate":0,"index":3149},{"krate":0,"index":3169},{"krate":0,"index":3177},{"krate":0,"index":3183},{"krate":0,"index":3195},{"krate":0,"index":7054},{"krate":0,"index":7065},{"krate":0,"index":7067},{"krate":0,"index":7068},{"krate":0,"index":7070},{"krate":0,"index":7071},{"krate":0,"index":7073},{"krate":0,"index":7074},{"krate":0,"index":7076},{"krate":0,"index":7089},{"krate":0,"index":7091},{"krate":0,"index":7092},{"krate":0,"index":7094},{"krate":0,"index":7095},{"krate":0,"index":7097},{"krate":0,"index":7098},{"krate":0,"index":7100},{"krate":0,"index":7104},{"krate":0,"index":7106},{"krate":0,"index":7107},{"krate":0,"index":7109},{"krate":0,"index":7110},{"krate":0,"index":7112},{"krate":0,"index":7113},{"krate":0,"index":3200},{"krate":0,"index":3208},{"krate":0,"index":3223},{"krate":0,"index":3226},{"krate":0,"index":3228},{"krate":0,"index":3230},{"krate":0,"index":3232}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8359,"byte_end":8382,"line_start":239,"line_end":239,"column_start":5,"column_end":28}},{"value":"/ Decoding and Encoding of PNG Images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":534464,"byte_end":534503,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":534504,"byte_end":534507,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":534508,"byte_end":534598,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":534599,"byte_end":534602,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":534603,"byte_end":534622,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"/ * <http://www.w3.org/TR/PNG/> - The PNG Specification","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":534623,"byte_end":534680,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":534681,"byte_end":534684,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3127},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":535678,"byte_end":535687,"line_start":34,"line_end":34,"column_start":12,"column_end":21},"name":"PngReader","qualname":"::codecs::png::PngReader","value":"PngReader {  }","parent":null,"children":[{"krate":0,"index":3129},{"krate":0,"index":3130},{"krate":0,"index":3131}],"decl_id":null,"docs":" Png Reader","sig":null,"attributes":[{"value":"/ Png Reader","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":535488,"byte_end":535502,"line_start":29,"line_end":29,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":535503,"byte_end":535506,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This reader will try to read the png one row at a time,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":535507,"byte_end":535566,"line_start":31,"line_end":31,"column_start":1,"column_end":60}},{"value":"/ however for interlaced png files this is not possible and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":535567,"byte_end":535628,"line_start":32,"line_end":32,"column_start":1,"column_end":62}},{"value":"/ these are therefore read at once.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":535629,"byte_end":535666,"line_start":33,"line_end":33,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":3139},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":537892,"byte_end":537902,"line_start":112,"line_end":112,"column_start":12,"column_end":22},"name":"PngDecoder","qualname":"::codecs::png::PngDecoder","value":"PngDecoder {  }","parent":null,"children":[{"krate":0,"index":3141},{"krate":0,"index":3142}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":537865,"byte_end":537880,"line_start":111,"line_end":111,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3145},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":538080,"byte_end":538083,"line_start":119,"line_end":119,"column_start":12,"column_end":15},"name":"new","qualname":"<PngDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<PngDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":538006,"byte_end":538068,"line_start":118,"line_end":118,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":3146},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":542022,"byte_end":542026,"line_start":197,"line_end":197,"column_start":12,"column_end":16},"name":"apng","qualname":"<PngDecoder<R>>::apng","value":"pub fn apng(Self) -> ApngDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Turn this into an iterator over the animation frames.","sig":null,"attributes":[{"value":"/ Turn this into an iterator over the animation frames.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":541375,"byte_end":541432,"line_start":187,"line_end":187,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":541437,"byte_end":541440,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Reading the complete animation requires more memory than reading the data from the IDAT","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":541445,"byte_end":541536,"line_start":189,"line_end":189,"column_start":5,"column_end":96}},{"value":"/ frame–multiple frame buffers need to be reserved at the same time. We further do not","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":541541,"byte_end":541631,"line_start":190,"line_end":190,"column_start":5,"column_end":93}},{"value":"/ support compositing 16-bit colors. In any case this would be lossy as the interface of","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":541636,"byte_end":541726,"line_start":191,"line_end":191,"column_start":5,"column_end":95}},{"value":"/ animation decoders does not support 16-bit colors.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":541731,"byte_end":541785,"line_start":192,"line_end":192,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":541790,"byte_end":541793,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ If something is not supported or a limit is violated then the decoding step that requires","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":541798,"byte_end":541891,"line_start":194,"line_end":194,"column_start":5,"column_end":98}},{"value":"/ them will fail and an error will be returned instead of the frame. No further frames will","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":541896,"byte_end":541989,"line_start":195,"line_end":195,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":541994,"byte_end":542010,"line_start":196,"line_end":196,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":3147},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":542449,"byte_end":542456,"line_start":207,"line_end":207,"column_start":12,"column_end":19},"name":"is_apng","qualname":"<PngDecoder<R>>::is_apng","value":"pub fn is_apng(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the image contains an animation.","sig":null,"attributes":[{"value":"/ Returns if the image contains an animation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":542095,"byte_end":542142,"line_start":201,"line_end":201,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":542147,"byte_end":542150,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Note that the file itself decides if the default image is considered to be part of the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":542155,"byte_end":542245,"line_start":203,"line_end":203,"column_start":5,"column_end":95}},{"value":"/ animation. When it is not the common interpretation is to use it as a thumbnail.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":542250,"byte_end":542334,"line_start":204,"line_end":204,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":542339,"byte_end":542342,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ If a non-animated image is converted into an `ApngDecoder` then its iterator is empty.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":542347,"byte_end":542437,"line_start":206,"line_end":206,"column_start":5,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":3169},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":544425,"byte_end":544436,"line_start":269,"line_end":269,"column_start":12,"column_end":23},"name":"ApngDecoder","qualname":"::codecs::png::ApngDecoder","value":"ApngDecoder {  }","parent":null,"children":[{"krate":0,"index":3171},{"krate":0,"index":3172},{"krate":0,"index":3173},{"krate":0,"index":3174},{"krate":0,"index":3175},{"krate":0,"index":3176}],"decl_id":null,"docs":" An [`AnimationDecoder`] adapter of [`PngDecoder`].","sig":null,"attributes":[{"value":"/ An [`AnimationDecoder`] adapter of [`PngDecoder`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":544139,"byte_end":544193,"line_start":262,"line_end":262,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":544194,"byte_end":544197,"line_start":263,"line_end":263,"column_start":1,"column_end":4}},{"value":"/ See [`PngDecoder::apng`] for more information.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":544198,"byte_end":544248,"line_start":264,"line_end":264,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":544249,"byte_end":544252,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ [`AnimationDecoder`]: ../trait.AnimationDecoder.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":544253,"byte_end":544309,"line_start":266,"line_end":266,"column_start":1,"column_end":57}},{"value":"/ [`PngDecoder`]: struct.PngDecoder.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":544310,"byte_end":544352,"line_start":267,"line_end":267,"column_start":1,"column_end":43}},{"value":"/ [`PngDecoder::apng`]: struct.PngDecoder.html#method.apng","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":544353,"byte_end":544413,"line_start":268,"line_end":268,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":3195},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":551752,"byte_end":551762,"line_start":463,"line_end":463,"column_start":12,"column_end":22},"name":"PngEncoder","qualname":"::codecs::png::PngEncoder","value":"PngEncoder {  }","parent":null,"children":[{"krate":0,"index":3197},{"krate":0,"index":3198},{"krate":0,"index":3199}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":551725,"byte_end":551740,"line_start":462,"line_end":462,"column_start":1,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7055},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552045,"byte_end":552052,"line_start":474,"line_end":474,"column_start":5,"column_end":12},"name":"Default","qualname":"::codecs::png::CompressionType::Default","value":"CompressionType::Default","parent":{"krate":0,"index":7054},"children":[],"decl_id":null,"docs":" Default compression level\n","sig":null,"attributes":[{"value":"/ Default compression level","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552011,"byte_end":552040,"line_start":473,"line_end":473,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7057},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552092,"byte_end":552096,"line_start":476,"line_end":476,"column_start":5,"column_end":9},"name":"Fast","qualname":"::codecs::png::CompressionType::Fast","value":"CompressionType::Fast","parent":{"krate":0,"index":7054},"children":[],"decl_id":null,"docs":" Fast, minimal compression\n","sig":null,"attributes":[{"value":"/ Fast, minimal compression","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552058,"byte_end":552087,"line_start":475,"line_end":475,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7059},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552133,"byte_end":552137,"line_start":478,"line_end":478,"column_start":5,"column_end":9},"name":"Best","qualname":"::codecs::png::CompressionType::Best","value":"CompressionType::Best","parent":{"krate":0,"index":7054},"children":[],"decl_id":null,"docs":" High compression level\n","sig":null,"attributes":[{"value":"/ High compression level","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552102,"byte_end":552128,"line_start":477,"line_end":477,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7061},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552178,"byte_end":552185,"line_start":480,"line_end":480,"column_start":5,"column_end":12},"name":"Huffman","qualname":"::codecs::png::CompressionType::Huffman","value":"CompressionType::Huffman","parent":{"krate":0,"index":7054},"children":[],"decl_id":null,"docs":" Huffman coding compression\n","sig":null,"attributes":[{"value":"/ Huffman coding compression","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552143,"byte_end":552173,"line_start":479,"line_end":479,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7063},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552231,"byte_end":552234,"line_start":482,"line_end":482,"column_start":5,"column_end":8},"name":"Rle","qualname":"::codecs::png::CompressionType::Rle","value":"CompressionType::Rle","parent":{"krate":0,"index":7054},"children":[],"decl_id":null,"docs":" Run-length encoding compression\n","sig":null,"attributes":[{"value":"/ Run-length encoding compression","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552191,"byte_end":552226,"line_start":481,"line_end":481,"column_start":5,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":7054},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":551989,"byte_end":552004,"line_start":472,"line_end":472,"column_start":10,"column_end":25},"name":"CompressionType","qualname":"::codecs::png::CompressionType","value":"pub enum CompressionType { Default, Fast, Best, Huffman, Rle, }","parent":null,"children":[{"krate":0,"index":7055},{"krate":0,"index":7057},{"krate":0,"index":7059},{"krate":0,"index":7061},{"krate":0,"index":7063}],"decl_id":null,"docs":" Compression level of a PNG encoder. The default setting is `Fast`.\n","sig":null,"attributes":[{"value":"/ Compression level of a PNG encoder. The default setting is `Fast`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":551846,"byte_end":551916,"line_start":469,"line_end":469,"column_start":1,"column_end":71}},{"value":"non_exhaustive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":551962,"byte_end":551979,"line_start":471,"line_end":471,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7077},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552548,"byte_end":552556,"line_start":493,"line_end":493,"column_start":5,"column_end":13},"name":"NoFilter","qualname":"::codecs::png::FilterType::NoFilter","value":"FilterType::NoFilter","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":" No processing done, best used for low bit depth grayscale or data with a\n low color count\n","sig":null,"attributes":[{"value":"/ No processing done, best used for low bit depth grayscale or data with a","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552443,"byte_end":552519,"line_start":491,"line_end":491,"column_start":5,"column_end":81}},{"value":"/ low color count","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552524,"byte_end":552543,"line_start":492,"line_end":492,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7079},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552623,"byte_end":552626,"line_start":495,"line_end":495,"column_start":5,"column_end":8},"name":"Sub","qualname":"::codecs::png::FilterType::Sub","value":"FilterType::Sub","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":" Filters based on previous pixel in the same scanline\n","sig":null,"attributes":[{"value":"/ Filters based on previous pixel in the same scanline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552562,"byte_end":552618,"line_start":494,"line_end":494,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7081},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552676,"byte_end":552678,"line_start":497,"line_end":497,"column_start":5,"column_end":7},"name":"Up","qualname":"::codecs::png::FilterType::Up","value":"FilterType::Up","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":" Filters based on the scanline above\n","sig":null,"attributes":[{"value":"/ Filters based on the scanline above","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552632,"byte_end":552671,"line_start":496,"line_end":496,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7083},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552755,"byte_end":552758,"line_start":499,"line_end":499,"column_start":5,"column_end":8},"name":"Avg","qualname":"::codecs::png::FilterType::Avg","value":"FilterType::Avg","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":" Filters based on the average of left and right neighbor pixels\n","sig":null,"attributes":[{"value":"/ Filters based on the average of left and right neighbor pixels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552684,"byte_end":552750,"line_start":498,"line_end":498,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7085},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552845,"byte_end":552850,"line_start":501,"line_end":501,"column_start":5,"column_end":10},"name":"Paeth","qualname":"::codecs::png::FilterType::Paeth","value":"FilterType::Paeth","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":" Algorithm that takes into account the left, upper left, and above pixels\n","sig":null,"attributes":[{"value":"/ Algorithm that takes into account the left, upper left, and above pixels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552764,"byte_end":552840,"line_start":500,"line_end":500,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7087},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552990,"byte_end":552998,"line_start":504,"line_end":504,"column_start":5,"column_end":13},"name":"Adaptive","qualname":"::codecs::png::FilterType::Adaptive","value":"FilterType::Adaptive","parent":{"krate":0,"index":7076},"children":[],"decl_id":null,"docs":" Uses a heuristic to select one of the preceding filters for each\n scanline rather than one filter for the entire image\n","sig":null,"attributes":[{"value":"/ Uses a heuristic to select one of the preceding filters for each","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552856,"byte_end":552924,"line_start":502,"line_end":502,"column_start":5,"column_end":73}},{"value":"/ scanline rather than one filter for the entire image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552929,"byte_end":552985,"line_start":503,"line_end":503,"column_start":5,"column_end":61}}]},{"kind":"Enum","id":{"krate":0,"index":7076},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552426,"byte_end":552436,"line_start":490,"line_end":490,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::codecs::png::FilterType","value":"pub enum FilterType { NoFilter, Sub, Up, Avg, Paeth, Adaptive, }","parent":null,"children":[{"krate":0,"index":7077},{"krate":0,"index":7079},{"krate":0,"index":7081},{"krate":0,"index":7083},{"krate":0,"index":7085},{"krate":0,"index":7087}],"decl_id":null,"docs":" Filter algorithms used to process image data to improve compression.","sig":null,"attributes":[{"value":"/ Filter algorithms used to process image data to improve compression.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552239,"byte_end":552311,"line_start":485,"line_end":485,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552312,"byte_end":552315,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ The default filter is `Adaptive`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552316,"byte_end":552353,"line_start":487,"line_end":487,"column_start":1,"column_end":38}},{"value":"non_exhaustive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":552399,"byte_end":552416,"line_start":489,"line_end":489,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":3202},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553228,"byte_end":553231,"line_start":515,"line_end":515,"column_start":12,"column_end":15},"name":"new","qualname":"<PngEncoder<W>>::new","value":"pub fn new(W) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553158,"byte_end":553216,"line_start":514,"line_end":514,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":3203},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":554232,"byte_end":554248,"line_start":535,"line_end":535,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<PngEncoder<W>>::new_with_quality","value":"pub fn new_with_quality(W, CompressionType, FilterType) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w` with `CompressionType` `compression` and\n `FilterType` `filter`.","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w` with `CompressionType` `compression` and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553410,"byte_end":553505,"line_start":523,"line_end":523,"column_start":5,"column_end":100}},{"value":"/ `FilterType` `filter`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553510,"byte_end":553536,"line_start":524,"line_end":524,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553541,"byte_end":553544,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ It is best to view the options as a _hint_ to the implementation on the smallest or fastest","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553549,"byte_end":553644,"line_start":526,"line_end":526,"column_start":5,"column_end":100}},{"value":"/ option for encoding a particular image. That is, using options that map directly to a PNG","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553649,"byte_end":553742,"line_start":527,"line_end":527,"column_start":5,"column_end":98}},{"value":"/ image parameter will use this parameter where possible. But variants that have no direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553747,"byte_end":553839,"line_start":528,"line_end":528,"column_start":5,"column_end":97}},{"value":"/ mapping may be interpreted differently in minor versions. The exact output is expressly","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553844,"byte_end":553935,"line_start":529,"line_end":529,"column_start":5,"column_end":96}},{"value":"/ __not__ part the SemVer stability guarantee.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553940,"byte_end":553988,"line_start":530,"line_end":530,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553993,"byte_end":553996,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Note that it is not optimal to use a single filter type, so an adaptive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":554001,"byte_end":554076,"line_start":532,"line_end":532,"column_start":5,"column_end":80}},{"value":"/ filter type is selected as the default. The filter which best minimizes","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":554081,"byte_end":554156,"line_start":533,"line_end":533,"column_start":5,"column_end":80}},{"value":"/ file size may change with the type of compression used.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":554161,"byte_end":554220,"line_start":534,"line_end":534,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3204},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":554728,"byte_end":554734,"line_start":551,"line_end":551,"column_start":12,"column_end":18},"name":"encode","qualname":"<PngEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.","sig":null,"attributes":[{"value":"/ Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":554457,"byte_end":554547,"line_start":547,"line_end":547,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":554552,"byte_end":554555,"line_start":548,"line_end":548,"column_start":5,"column_end":8}},{"value":"/ Expects data in big endian.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":554560,"byte_end":554591,"line_start":549,"line_end":549,"column_start":5,"column_end":36}},{"value":"deprecated =\n  \"Use `PngEncoder::write_image` instead. Beware that `write_image` has a different endianness convention\"","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":554596,"byte_end":554716,"line_start":550,"line_end":550,"column_start":5,"column_end":125}}]},{"kind":"Mod","id":{"krate":0,"index":3233},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pnm","qualname":"::codecs::pnm","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","parent":null,"children":[{"krate":0,"index":3234},{"krate":0,"index":3237},{"krate":0,"index":3240},{"krate":0,"index":3243},{"krate":0,"index":3246},{"krate":0,"index":3247},{"krate":0,"index":3250},{"krate":0,"index":3253},{"krate":0,"index":3256},{"krate":0,"index":3259},{"krate":0,"index":3262},{"krate":0,"index":3263},{"krate":0,"index":3266},{"krate":0,"index":3269},{"krate":0,"index":3272},{"krate":0,"index":3294},{"krate":0,"index":3530},{"krate":0,"index":3716}],"decl_id":null,"docs":" Decoding of netpbm image formats (pbm, pgm, ppm and pam).","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8404,"byte_end":8427,"line_start":241,"line_end":241,"column_start":5,"column_end":28}},{"value":"/ Decoding of netpbm image formats (pbm, pgm, ppm and pam).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":562519,"byte_end":562580,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":562581,"byte_end":562584,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The formats pbm, pgm and ppm are fully supported. The pam decoder recognizes the tuple types","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":562585,"byte_end":562681,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"/ `BLACKANDWHITE`, `GRAYSCALE` and `RGB` and explicitely recognizes but rejects their `_ALPHA`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":562682,"byte_end":562778,"line_start":4,"line_end":4,"column_start":1,"column_end":97}},{"value":"/ variants for now as alpha color types are unsupported.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/mod.rs","byte_start":562779,"byte_end":562837,"line_start":5,"line_end":5,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":3436},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":580408,"byte_end":580418,"line_start":245,"line_end":245,"column_start":12,"column_end":22},"name":"PnmDecoder","qualname":"::codecs::pnm::decoder::PnmDecoder","value":"PnmDecoder {  }","parent":null,"children":[{"krate":0,"index":3438},{"krate":0,"index":3439},{"krate":0,"index":3440}],"decl_id":null,"docs":" PNM decoder\n","sig":null,"attributes":[{"value":"/ PNM decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":580381,"byte_end":580396,"line_start":244,"line_end":244,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":3443},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":580600,"byte_end":580603,"line_start":253,"line_end":253,"column_start":12,"column_end":15},"name":"new","qualname":"<PnmDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<PnmDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```read```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```read```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":580524,"byte_end":580588,"line_start":252,"line_end":252,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":3444},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":582472,"byte_end":582482,"line_start":295,"line_end":295,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<PnmDecoder<R>>::into_inner","value":"pub fn into_inner(Self) -> (R, PnmHeader)","parent":null,"children":[],"decl_id":null,"docs":" Extract the reader and header after an image has been read.\n","sig":null,"attributes":[{"value":"/ Extract the reader and header after an image has been read.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":582397,"byte_end":582460,"line_start":294,"line_end":294,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":3471},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":592152,"byte_end":592161,"line_start":567,"line_end":567,"column_start":12,"column_end":21},"name":"PnmReader","qualname":"::codecs::pnm::decoder::PnmReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":592095,"byte_end":592140,"line_start":566,"line_end":566,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3495},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":595620,"byte_end":595627,"line_start":662,"line_end":662,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PnmDecoder<R>>::subtype","value":"pub fn subtype(&Self) -> PnmSubtype","parent":null,"children":[],"decl_id":null,"docs":" Get the pnm subtype, depending on the magic constant contained in the header\n","sig":null,"attributes":[{"value":"/ Get the pnm subtype, depending on the magic constant contained in the header","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":595528,"byte_end":595608,"line_start":661,"line_end":661,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7245},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":617737,"byte_end":617739,"line_start":27,"line_end":27,"column_start":5,"column_end":7},"name":"U8","qualname":"::codecs::pnm::encoder::FlatSamples::U8","value":"FlatSamples::U8(&'a [u8])","parent":{"krate":0,"index":7243},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":7248},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":617755,"byte_end":617758,"line_start":28,"line_end":28,"column_start":5,"column_end":8},"name":"U16","qualname":"::codecs::pnm::encoder::FlatSamples::U16","value":"FlatSamples::U16(&'a [u16])","parent":{"krate":0,"index":7243},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7243},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":617715,"byte_end":617726,"line_start":26,"line_end":26,"column_start":10,"column_end":21},"name":"FlatSamples","qualname":"::codecs::pnm::encoder::FlatSamples","value":"pub enum FlatSamples<'a> { U8(&'a [u8]), U16(&'a [u16]), }","parent":null,"children":[{"krate":0,"index":7245},{"krate":0,"index":7248}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3621},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":617839,"byte_end":617849,"line_start":32,"line_end":32,"column_start":12,"column_end":22},"name":"PnmEncoder","qualname":"::codecs::pnm::encoder::PnmEncoder","value":"PnmEncoder {  }","parent":null,"children":[{"krate":0,"index":3623},{"krate":0,"index":3624}],"decl_id":null,"docs":" Encodes images to any of the `pnm` image formats.\n","sig":null,"attributes":[{"value":"/ Encodes images to any of the `pnm` image formats.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":617774,"byte_end":617827,"line_start":31,"line_end":31,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3659},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619239,"byte_end":619242,"line_start":87,"line_end":87,"column_start":12,"column_end":15},"name":"new","qualname":"<PnmEncoder<W>>::new","value":"pub fn new(W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create new PnmEncoder from the `writer`.","sig":null,"attributes":[{"value":"/ Create new PnmEncoder from the `writer`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":618937,"byte_end":618981,"line_start":82,"line_end":82,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":618986,"byte_end":618989,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ The encoded images will have some `pnm` format. If more control over the image type is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":618994,"byte_end":619084,"line_start":84,"line_end":84,"column_start":5,"column_end":95}},{"value":"/ required, use either one of `with_subtype` or `with_header`. For more information on the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619089,"byte_end":619181,"line_start":85,"line_end":85,"column_start":5,"column_end":97}},{"value":"/ behaviour, see `with_dynamic_header`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619186,"byte_end":619227,"line_start":86,"line_end":86,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":3660},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619792,"byte_end":619804,"line_start":101,"line_end":101,"column_start":12,"column_end":24},"name":"with_subtype","qualname":"<PnmEncoder<W>>::with_subtype","value":"pub fn with_subtype(Self, PnmSubtype) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode a specific pnm subtype image.","sig":null,"attributes":[{"value":"/ Encode a specific pnm subtype image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619371,"byte_end":619411,"line_start":94,"line_end":94,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619416,"byte_end":619419,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ The magic number and encoding type will be chosen as provided while the rest of the header","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619424,"byte_end":619518,"line_start":96,"line_end":96,"column_start":5,"column_end":99}},{"value":"/ data will be generated dynamically. Trying to encode incompatible images (e.g. encoding an","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619523,"byte_end":619617,"line_start":97,"line_end":97,"column_start":5,"column_end":99}},{"value":"/ RGB image as Graymap) will result in an error.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619622,"byte_end":619672,"line_start":98,"line_end":98,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619677,"byte_end":619680,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_header` and `with_dynamic_header`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619685,"byte_end":619780,"line_start":100,"line_end":100,"column_start":5,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":3661},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620510,"byte_end":620521,"line_start":117,"line_end":117,"column_start":12,"column_end":23},"name":"with_header","qualname":"<PnmEncoder<W>>::with_header","value":"pub fn with_header(Self, PnmHeader) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Enforce the use of a chosen header.","sig":null,"attributes":[{"value":"/ Enforce the use of a chosen header.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":619971,"byte_end":620010,"line_start":108,"line_end":108,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620015,"byte_end":620018,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ While this option gives the most control over the actual written data, the encoding process","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620023,"byte_end":620118,"line_start":110,"line_end":110,"column_start":5,"column_end":100}},{"value":"/ will error in case the header data and image parameters do not agree. It is the users","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620123,"byte_end":620212,"line_start":111,"line_end":111,"column_start":5,"column_end":94}},{"value":"/ obligation to ensure that the width and height are set accordingly, for example.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620217,"byte_end":620301,"line_start":112,"line_end":112,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620306,"byte_end":620309,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ Choose this option if you want a lossless decoding/encoding round trip.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620314,"byte_end":620389,"line_start":114,"line_end":114,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620394,"byte_end":620397,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_dynamic_header`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620402,"byte_end":620498,"line_start":116,"line_end":116,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":3662},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":621092,"byte_end":621111,"line_start":131,"line_end":131,"column_start":12,"column_end":31},"name":"with_dynamic_header","qualname":"<PnmEncoder<W>>::with_dynamic_header","value":"pub fn with_dynamic_header(Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create the header dynamically for each image.","sig":null,"attributes":[{"value":"/ Create the header dynamically for each image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620684,"byte_end":620733,"line_start":124,"line_end":124,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620738,"byte_end":620741,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ This is the default option upon creation of the encoder. With this, most images should be","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620746,"byte_end":620839,"line_start":126,"line_end":126,"column_start":5,"column_end":98}},{"value":"/ encodable but the specific format chosen is out of the users control. The pnm subtype is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620844,"byte_end":620936,"line_start":127,"line_end":127,"column_start":5,"column_end":97}},{"value":"/ chosen arbitrarily by the library.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620941,"byte_end":620979,"line_start":128,"line_end":128,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620984,"byte_end":620987,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ This will overwrite the effect of earlier calls to `with_subtype` and `with_header`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":620992,"byte_end":621080,"line_start":130,"line_end":130,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":3663},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":621487,"byte_end":621493,"line_start":142,"line_end":142,"column_start":12,"column_end":18},"name":"encode","qualname":"<PnmEncoder<W>>::encode","value":"pub fn encode<'s, S>(&mut Self, S, u32, u32, ColorType) -> ImageResult<()>\nwhere S: Into<FlatSamples>","parent":null,"children":[],"decl_id":null,"docs":" Encode an image whose samples are represented as `u8`.","sig":null,"attributes":[{"value":"/ Encode an image whose samples are represented as `u8`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":621248,"byte_end":621306,"line_start":138,"line_end":138,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":621311,"byte_end":621314,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Some `pnm` subtypes are incompatible with some color options, a chosen header most","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":621319,"byte_end":621405,"line_start":140,"line_end":140,"column_start":5,"column_end":91}},{"value":"/ certainly with any deviation from the original decoded image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":621410,"byte_end":621475,"line_start":141,"line_end":141,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7257},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640467,"byte_end":640473,"line_start":7,"line_end":7,"column_start":5,"column_end":11},"name":"Binary","qualname":"::codecs::pnm::header::SampleEncoding::Binary","value":"SampleEncoding::Binary","parent":{"krate":0,"index":7256},"children":[],"decl_id":null,"docs":" Samples are unsigned binary integers in big endian\n","sig":null,"attributes":[{"value":"/ Samples are unsigned binary integers in big endian","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640408,"byte_end":640462,"line_start":6,"line_end":6,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7259},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640557,"byte_end":640562,"line_start":10,"line_end":10,"column_start":5,"column_end":10},"name":"Ascii","qualname":"::codecs::pnm::header::SampleEncoding::Ascii","value":"SampleEncoding::Ascii","parent":{"krate":0,"index":7256},"children":[],"decl_id":null,"docs":" Samples are encoded as decimal ascii strings separated by whitespace\n","sig":null,"attributes":[{"value":"/ Samples are encoded as decimal ascii strings separated by whitespace","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640480,"byte_end":640552,"line_start":9,"line_end":9,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":7256},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640387,"byte_end":640401,"line_start":5,"line_end":5,"column_start":10,"column_end":24},"name":"SampleEncoding","qualname":"::codecs::pnm::header::SampleEncoding","value":"pub enum SampleEncoding { Binary, Ascii, }","parent":null,"children":[{"krate":0,"index":7257},{"krate":0,"index":7259}],"decl_id":null,"docs":" The kind of encoding used to store sample values\n","sig":null,"attributes":[{"value":"/ The kind of encoding used to store sample values","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640280,"byte_end":640332,"line_start":3,"line_end":3,"column_start":1,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7273},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640715,"byte_end":640721,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Bitmap","qualname":"::codecs::pnm::header::PnmSubtype::Bitmap","value":"PnmSubtype::Bitmap(SampleEncoding)","parent":{"krate":0,"index":7272},"children":[],"decl_id":null,"docs":" Magic numbers P1 and P4\n","sig":null,"attributes":[{"value":"/ Magic numbers P1 and P4","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640683,"byte_end":640710,"line_start":16,"line_end":16,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7276},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640776,"byte_end":640783,"line_start":20,"line_end":20,"column_start":5,"column_end":12},"name":"Graymap","qualname":"::codecs::pnm::header::PnmSubtype::Graymap","value":"PnmSubtype::Graymap(SampleEncoding)","parent":{"krate":0,"index":7272},"children":[],"decl_id":null,"docs":" Magic numbers P2 and P5\n","sig":null,"attributes":[{"value":"/ Magic numbers P2 and P5","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640744,"byte_end":640771,"line_start":19,"line_end":19,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7279},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640838,"byte_end":640844,"line_start":23,"line_end":23,"column_start":5,"column_end":11},"name":"Pixmap","qualname":"::codecs::pnm::header::PnmSubtype::Pixmap","value":"PnmSubtype::Pixmap(SampleEncoding)","parent":{"krate":0,"index":7272},"children":[],"decl_id":null,"docs":" Magic numbers P3 and P6\n","sig":null,"attributes":[{"value":"/ Magic numbers P3 and P6","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640806,"byte_end":640833,"line_start":22,"line_end":22,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7282},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640891,"byte_end":640903,"line_start":26,"line_end":26,"column_start":5,"column_end":17},"name":"ArbitraryMap","qualname":"::codecs::pnm::header::PnmSubtype::ArbitraryMap","value":"PnmSubtype::ArbitraryMap","parent":{"krate":0,"index":7272},"children":[],"decl_id":null,"docs":" Magic number P7\n","sig":null,"attributes":[{"value":"/ Magic number P7","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640867,"byte_end":640886,"line_start":25,"line_end":25,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":7272},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640666,"byte_end":640676,"line_start":15,"line_end":15,"column_start":10,"column_end":20},"name":"PnmSubtype","qualname":"::codecs::pnm::header::PnmSubtype","value":"pub enum PnmSubtype {\n    Bitmap(SampleEncoding),\n    Graymap(SampleEncoding),\n    Pixmap(SampleEncoding),\n    ArbitraryMap,\n}","parent":null,"children":[{"krate":0,"index":7273},{"krate":0,"index":7276},{"krate":0,"index":7279},{"krate":0,"index":7282}],"decl_id":null,"docs":" Denotes the category of the magic number\n","sig":null,"attributes":[{"value":"/ Denotes the category of the magic number","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640567,"byte_end":640611,"line_start":13,"line_end":13,"column_start":1,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":3724},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641295,"byte_end":641304,"line_start":35,"line_end":35,"column_start":12,"column_end":21},"name":"PnmHeader","qualname":"::codecs::pnm::header::PnmHeader","value":"PnmHeader {  }","parent":null,"children":[{"krate":0,"index":3725},{"krate":0,"index":3726}],"decl_id":null,"docs":" Stores the complete header data of a file.","sig":null,"attributes":[{"value":"/ Stores the complete header data of a file.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640908,"byte_end":640954,"line_start":29,"line_end":29,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640955,"byte_end":640958,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ Internally, provides mechanisms for lossless reencoding. After reading a file with the decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":640959,"byte_end":641057,"line_start":31,"line_end":31,"column_start":1,"column_end":99}},{"value":"/ it is possible to recover the header and construct an encoder. Using the encoder on the just","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641058,"byte_end":641154,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ loaded image should result in a byte copy of the original file (for single image pnms without","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641155,"byte_end":641252,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ additional trailing data).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641253,"byte_end":641283,"line_start":34,"line_end":34,"column_start":1,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":7296},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641633,"byte_end":641645,"line_start":49,"line_end":49,"column_start":12,"column_end":24},"name":"BitmapHeader","qualname":"::codecs::pnm::header::BitmapHeader","value":"BitmapHeader { encoding, height, width }","parent":null,"children":[{"krate":0,"index":7297},{"krate":0,"index":7298},{"krate":0,"index":7299}],"decl_id":null,"docs":" Header produced by a `pbm` file (\"Portable Bit Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pbm` file (\"Portable Bit Map\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641535,"byte_end":641591,"line_start":47,"line_end":47,"column_start":1,"column_end":57}}]},{"kind":"Field","id":{"krate":0,"index":7297},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641693,"byte_end":641701,"line_start":51,"line_end":51,"column_start":9,"column_end":17},"name":"encoding","qualname":"::codecs::pnm::header::BitmapHeader::encoding","value":"codecs::pnm::header::SampleEncoding","parent":{"krate":0,"index":7296},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641652,"byte_end":641684,"line_start":50,"line_end":50,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":7298},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641761,"byte_end":641767,"line_start":54,"line_end":54,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::pnm::header::BitmapHeader::height","value":"u32","parent":{"krate":0,"index":7296},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641724,"byte_end":641752,"line_start":53,"line_end":53,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":7299},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641815,"byte_end":641820,"line_start":57,"line_end":57,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::pnm::header::BitmapHeader::width","value":"u32","parent":{"krate":0,"index":7296},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641779,"byte_end":641806,"line_start":56,"line_end":56,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":7305},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641929,"byte_end":641942,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"GraymapHeader","qualname":"::codecs::pnm::header::GraymapHeader","value":"GraymapHeader { encoding, height, width, maxwhite }","parent":null,"children":[{"krate":0,"index":7306},{"krate":0,"index":7307},{"krate":0,"index":7308},{"krate":0,"index":7309}],"decl_id":null,"docs":" Header produced by a `pgm` file (\"Portable Gray Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pgm` file (\"Portable Gray Map\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641830,"byte_end":641887,"line_start":60,"line_end":60,"column_start":1,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":7306},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641990,"byte_end":641998,"line_start":64,"line_end":64,"column_start":9,"column_end":17},"name":"encoding","qualname":"::codecs::pnm::header::GraymapHeader::encoding","value":"codecs::pnm::header::SampleEncoding","parent":{"krate":0,"index":7305},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":641949,"byte_end":641981,"line_start":63,"line_end":63,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":7307},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642058,"byte_end":642064,"line_start":67,"line_end":67,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::pnm::header::GraymapHeader::height","value":"u32","parent":{"krate":0,"index":7305},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642021,"byte_end":642049,"line_start":66,"line_end":66,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":7308},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642112,"byte_end":642117,"line_start":70,"line_end":70,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::pnm::header::GraymapHeader::width","value":"u32","parent":{"krate":0,"index":7305},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642076,"byte_end":642103,"line_start":69,"line_end":69,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7309},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642179,"byte_end":642187,"line_start":73,"line_end":73,"column_start":9,"column_end":17},"name":"maxwhite","qualname":"::codecs::pnm::header::GraymapHeader::maxwhite","value":"u32","parent":{"krate":0,"index":7305},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642129,"byte_end":642170,"line_start":72,"line_end":72,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":7315},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642297,"byte_end":642309,"line_start":78,"line_end":78,"column_start":12,"column_end":24},"name":"PixmapHeader","qualname":"::codecs::pnm::header::PixmapHeader","value":"PixmapHeader { encoding, height, width, maxval }","parent":null,"children":[{"krate":0,"index":7316},{"krate":0,"index":7317},{"krate":0,"index":7318},{"krate":0,"index":7319}],"decl_id":null,"docs":" Header produced by a `ppm` file (\"Portable Pixel Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `ppm` file (\"Portable Pixel Map\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642197,"byte_end":642255,"line_start":76,"line_end":76,"column_start":1,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":7316},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642357,"byte_end":642365,"line_start":80,"line_end":80,"column_start":9,"column_end":17},"name":"encoding","qualname":"::codecs::pnm::header::PixmapHeader::encoding","value":"codecs::pnm::header::SampleEncoding","parent":{"krate":0,"index":7315},"children":[],"decl_id":null,"docs":" Binary or Ascii encoded file\n","sig":null,"attributes":[{"value":"/ Binary or Ascii encoded file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642316,"byte_end":642348,"line_start":79,"line_end":79,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":7317},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642425,"byte_end":642431,"line_start":83,"line_end":83,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::pnm::header::PixmapHeader::height","value":"u32","parent":{"krate":0,"index":7315},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642388,"byte_end":642416,"line_start":82,"line_end":82,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":7318},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642479,"byte_end":642484,"line_start":86,"line_end":86,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::pnm::header::PixmapHeader::width","value":"u32","parent":{"krate":0,"index":7315},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642443,"byte_end":642470,"line_start":85,"line_end":85,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7319},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642546,"byte_end":642552,"line_start":89,"line_end":89,"column_start":9,"column_end":15},"name":"maxval","qualname":"::codecs::pnm::header::PixmapHeader::maxval","value":"u32","parent":{"krate":0,"index":7315},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642496,"byte_end":642537,"line_start":88,"line_end":88,"column_start":5,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":7325},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642660,"byte_end":642675,"line_start":94,"line_end":94,"column_start":12,"column_end":27},"name":"ArbitraryHeader","qualname":"::codecs::pnm::header::ArbitraryHeader","value":"ArbitraryHeader { height, width, depth, maxval, tupltype }","parent":null,"children":[{"krate":0,"index":7326},{"krate":0,"index":7327},{"krate":0,"index":7328},{"krate":0,"index":7329},{"krate":0,"index":7330}],"decl_id":null,"docs":" Header produced by a `pam` file (\"Portable Arbitrary Map\")\n","sig":null,"attributes":[{"value":"/ Header produced by a `pam` file (\"Portable Arbitrary Map\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642562,"byte_end":642624,"line_start":92,"line_end":92,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":7326},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642719,"byte_end":642725,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::pnm::header::ArbitraryHeader::height","value":"u32","parent":{"krate":0,"index":7325},"children":[],"decl_id":null,"docs":" Height of the image file\n","sig":null,"attributes":[{"value":"/ Height of the image file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642682,"byte_end":642710,"line_start":95,"line_end":95,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":7327},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642773,"byte_end":642778,"line_start":99,"line_end":99,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::pnm::header::ArbitraryHeader::width","value":"u32","parent":{"krate":0,"index":7325},"children":[],"decl_id":null,"docs":" Width of the image file\n","sig":null,"attributes":[{"value":"/ Width of the image file","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642737,"byte_end":642764,"line_start":98,"line_end":98,"column_start":5,"column_end":32}}]},{"kind":"Field","id":{"krate":0,"index":7328},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642827,"byte_end":642832,"line_start":102,"line_end":102,"column_start":9,"column_end":14},"name":"depth","qualname":"::codecs::pnm::header::ArbitraryHeader::depth","value":"u32","parent":{"krate":0,"index":7325},"children":[],"decl_id":null,"docs":" Number of color channels\n","sig":null,"attributes":[{"value":"/ Number of color channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642790,"byte_end":642818,"line_start":101,"line_end":101,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":7329},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642894,"byte_end":642900,"line_start":105,"line_end":105,"column_start":9,"column_end":15},"name":"maxval","qualname":"::codecs::pnm::header::ArbitraryHeader::maxval","value":"u32","parent":{"krate":0,"index":7325},"children":[],"decl_id":null,"docs":" Maximum sample value within the image\n","sig":null,"attributes":[{"value":"/ Maximum sample value within the image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642844,"byte_end":642885,"line_start":104,"line_end":104,"column_start":5,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":7330},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642961,"byte_end":642969,"line_start":108,"line_end":108,"column_start":9,"column_end":17},"name":"tupltype","qualname":"::codecs::pnm::header::ArbitraryHeader::tupltype","value":"std::option::Option<codecs::pnm::header::ArbitraryTuplType>","parent":{"krate":0,"index":7325},"children":[],"decl_id":null,"docs":" Color interpretation of image pixels\n","sig":null,"attributes":[{"value":"/ Color interpretation of image pixels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":642912,"byte_end":642952,"line_start":107,"line_end":107,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7336},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643172,"byte_end":643185,"line_start":115,"line_end":115,"column_start":5,"column_end":18},"name":"BlackAndWhite","qualname":"::codecs::pnm::header::ArbitraryTuplType::BlackAndWhite","value":"ArbitraryTuplType::BlackAndWhite","parent":{"krate":0,"index":7335},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1)\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643123,"byte_end":643167,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7338},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643268,"byte_end":643286,"line_start":118,"line_end":118,"column_start":5,"column_end":23},"name":"BlackAndWhiteAlpha","qualname":"::codecs::pnm::header::ArbitraryTuplType::BlackAndWhiteAlpha","value":"ArbitraryTuplType::BlackAndWhiteAlpha","parent":{"krate":0,"index":7335},"children":[],"decl_id":null,"docs":" Pixels are either black (0) or white (1) and a second alpha channel\n","sig":null,"attributes":[{"value":"/ Pixels are either black (0) or white (1) and a second alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643192,"byte_end":643263,"line_start":117,"line_end":117,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7340},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643338,"byte_end":643347,"line_start":121,"line_end":121,"column_start":5,"column_end":14},"name":"Grayscale","qualname":"::codecs::pnm::header::ArbitraryTuplType::Grayscale","value":"ArbitraryTuplType::Grayscale","parent":{"krate":0,"index":7335},"children":[],"decl_id":null,"docs":" Pixels represent the amount of white\n","sig":null,"attributes":[{"value":"/ Pixels represent the amount of white","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643293,"byte_end":643333,"line_start":120,"line_end":120,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7342},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643405,"byte_end":643419,"line_start":124,"line_end":124,"column_start":5,"column_end":19},"name":"GrayscaleAlpha","qualname":"::codecs::pnm::header::ArbitraryTuplType::GrayscaleAlpha","value":"ArbitraryTuplType::GrayscaleAlpha","parent":{"krate":0,"index":7335},"children":[],"decl_id":null,"docs":" Grayscale with an additional alpha channel\n","sig":null,"attributes":[{"value":"/ Grayscale with an additional alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643354,"byte_end":643400,"line_start":123,"line_end":123,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7344},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643467,"byte_end":643470,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"RGB","qualname":"::codecs::pnm::header::ArbitraryTuplType::RGB","value":"ArbitraryTuplType::RGB","parent":{"krate":0,"index":7335},"children":[],"decl_id":null,"docs":" Three channels: Red, Green, Blue\n","sig":null,"attributes":[{"value":"/ Three channels: Red, Green, Blue","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643426,"byte_end":643462,"line_start":126,"line_end":126,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7346},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643524,"byte_end":643532,"line_start":130,"line_end":130,"column_start":5,"column_end":13},"name":"RGBAlpha","qualname":"::codecs::pnm::header::ArbitraryTuplType::RGBAlpha","value":"ArbitraryTuplType::RGBAlpha","parent":{"krate":0,"index":7335},"children":[],"decl_id":null,"docs":" Four channels: Red, Green, Blue, Alpha\n","sig":null,"attributes":[{"value":"/ Four channels: Red, Green, Blue, Alpha","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643477,"byte_end":643519,"line_start":129,"line_end":129,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7348},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643589,"byte_end":643595,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Custom","qualname":"::codecs::pnm::header::ArbitraryTuplType::Custom","value":"ArbitraryTuplType::Custom(String)","parent":{"krate":0,"index":7335},"children":[],"decl_id":null,"docs":" An image format which is not standardized\n","sig":null,"attributes":[{"value":"/ An image format which is not standardized","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643539,"byte_end":643584,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":7335},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643099,"byte_end":643116,"line_start":113,"line_end":113,"column_start":10,"column_end":27},"name":"ArbitraryTuplType","qualname":"::codecs::pnm::header::ArbitraryTuplType","value":"pub enum ArbitraryTuplType {\n    BlackAndWhite,\n    BlackAndWhiteAlpha,\n    Grayscale,\n    GrayscaleAlpha,\n    RGB,\n    RGBAlpha,\n    Custom(String),\n}","parent":null,"children":[{"krate":0,"index":7336},{"krate":0,"index":7338},{"krate":0,"index":7340},{"krate":0,"index":7342},{"krate":0,"index":7344},{"krate":0,"index":7346},{"krate":0,"index":7348}],"decl_id":null,"docs":" Standardized tuple type specifiers in the header of a `pam`.\n","sig":null,"attributes":[{"value":"/ Standardized tuple type specifiers in the header of a `pam`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643001,"byte_end":643065,"line_start":111,"line_end":111,"column_start":1,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3743},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":644245,"byte_end":644259,"line_start":152,"line_end":152,"column_start":12,"column_end":26},"name":"magic_constant","qualname":"<PnmSubtype>::magic_constant","value":"pub fn magic_constant(Self) -> &'static [u8; ]","parent":null,"children":[],"decl_id":null,"docs":" Get the two magic constant bytes corresponding to this format subtype.\n","sig":null,"attributes":[{"value":"/ Get the two magic constant bytes corresponding to this format subtype.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":644159,"byte_end":644233,"line_start":151,"line_end":151,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":3745},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":644838,"byte_end":644853,"line_start":165,"line_end":165,"column_start":12,"column_end":27},"name":"sample_encoding","qualname":"<PnmSubtype>::sample_encoding","value":"pub fn sample_encoding(Self) -> SampleEncoding","parent":null,"children":[],"decl_id":null,"docs":" Whether samples are stored as binary or as decimal ascii\n","sig":null,"attributes":[{"value":"/ Whether samples are stored as binary or as decimal ascii","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":644766,"byte_end":644826,"line_start":164,"line_end":164,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":3747},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":645216,"byte_end":645223,"line_start":177,"line_end":177,"column_start":12,"column_end":19},"name":"subtype","qualname":"<PnmHeader>::subtype","value":"pub fn subtype(&Self) -> PnmSubtype","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the format subtype from which the header was created.\n","sig":null,"attributes":[{"value":"/ Retrieve the format subtype from which the header was created.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":645138,"byte_end":645204,"line_start":176,"line_end":176,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":3748},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":645738,"byte_end":645743,"line_start":187,"line_end":187,"column_start":12,"column_end":17},"name":"width","qualname":"<PnmHeader>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The width of the image this header is for.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":645680,"byte_end":645726,"line_start":186,"line_end":186,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":3749},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":646161,"byte_end":646167,"line_start":197,"line_end":197,"column_start":12,"column_end":18},"name":"height","qualname":"<PnmHeader>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of the image this header is for.\n","sig":null,"attributes":[{"value":"/ The height of the image this header is for.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":646102,"byte_end":646149,"line_start":196,"line_end":196,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":3750},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":646625,"byte_end":646639,"line_start":207,"line_end":207,"column_start":12,"column_end":26},"name":"maximal_sample","qualname":"<PnmHeader>::maximal_sample","value":"pub fn maximal_sample(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The biggest value a sample can have. In other words, the colour resolution.\n","sig":null,"attributes":[{"value":"/ The biggest value a sample can have. In other words, the colour resolution.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":646534,"byte_end":646613,"line_start":206,"line_end":206,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":3751},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":647057,"byte_end":647066,"line_start":217,"line_end":217,"column_start":12,"column_end":21},"name":"as_bitmap","qualname":"<PnmHeader>::as_bitmap","value":"pub fn as_bitmap(&Self) -> Option<&BitmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying bitmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying bitmap header if any","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":646997,"byte_end":647045,"line_start":216,"line_end":216,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3752},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":647297,"byte_end":647307,"line_start":225,"line_end":225,"column_start":12,"column_end":22},"name":"as_graymap","qualname":"<PnmHeader>::as_graymap","value":"pub fn as_graymap(&Self) -> Option<&GraymapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying graymap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying graymap header if any","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":647236,"byte_end":647285,"line_start":224,"line_end":224,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":3753},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":647541,"byte_end":647550,"line_start":233,"line_end":233,"column_start":12,"column_end":21},"name":"as_pixmap","qualname":"<PnmHeader>::as_pixmap","value":"pub fn as_pixmap(&Self) -> Option<&PixmapHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying pixmap header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying pixmap header if any","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":647481,"byte_end":647529,"line_start":232,"line_end":232,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":3754},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":647783,"byte_end":647795,"line_start":241,"line_end":241,"column_start":12,"column_end":24},"name":"as_arbitrary","qualname":"<PnmHeader>::as_arbitrary","value":"pub fn as_arbitrary(&Self) -> Option<&ArbitraryHeader>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the underlying arbitrary header if any\n","sig":null,"attributes":[{"value":"/ Retrieve the underlying arbitrary header if any","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":647720,"byte_end":647771,"line_start":240,"line_end":240,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":3755},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":648035,"byte_end":648040,"line_start":249,"line_end":249,"column_start":12,"column_end":17},"name":"write","qualname":"<PnmHeader>::write","value":"pub fn write(&Self, &mut dyn io::Write) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write the header back into a binary stream\n","sig":null,"attributes":[{"value":"/ Write the header back into a binary stream","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":647977,"byte_end":648023,"line_start":248,"line_end":248,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":3771},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tga","qualname":"::codecs::tga","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/mod.rs","parent":null,"children":[{"krate":0,"index":3772},{"krate":0,"index":3775},{"krate":0,"index":3778},{"krate":0,"index":3907},{"krate":0,"index":3960}],"decl_id":null,"docs":" Decoding of TGA Images","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8449,"byte_end":8472,"line_start":243,"line_end":243,"column_start":5,"column_end":28}},{"value":"/ Decoding of TGA Images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/mod.rs","byte_start":651286,"byte_end":651312,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/mod.rs","byte_start":651313,"byte_end":651316,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/mod.rs","byte_start":651317,"byte_end":651336,"line_start":3,"line_end":3,"column_start":1,"column_end":20}},{"value":"/ <http://googlesites.inequation.org/tgautilities>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/mod.rs","byte_start":651337,"byte_end":651389,"line_start":4,"line_end":4,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":3856},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":652976,"byte_end":652986,"line_start":50,"line_end":50,"column_start":12,"column_end":22},"name":"TgaDecoder","qualname":"::codecs::tga::decoder::TgaDecoder","value":"TgaDecoder {  }","parent":null,"children":[{"krate":0,"index":3858},{"krate":0,"index":3859},{"krate":0,"index":3860},{"krate":0,"index":3861},{"krate":0,"index":3862},{"krate":0,"index":3863},{"krate":0,"index":3864},{"krate":0,"index":3865},{"krate":0,"index":3866},{"krate":0,"index":3867},{"krate":0,"index":3868},{"krate":0,"index":3869}],"decl_id":null,"docs":" The representation of a TGA decoder\n","sig":null,"attributes":[{"value":"/ The representation of a TGA decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":652925,"byte_end":652964,"line_start":49,"line_end":49,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":3872},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":653464,"byte_end":653467,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<TgaDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<TgaDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":653395,"byte_end":653452,"line_start":71,"line_end":71,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":3899},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":668812,"byte_end":668821,"line_start":493,"line_end":493,"column_start":12,"column_end":21},"name":"TGAReader","qualname":"::codecs::tga::decoder::TGAReader","value":"TGAReader {  }","parent":null,"children":[{"krate":0,"index":3901},{"krate":0,"index":3902}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3948},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670160,"byte_end":670170,"line_start":35,"line_end":35,"column_start":12,"column_end":22},"name":"TgaEncoder","qualname":"::codecs::tga::encoder::TgaEncoder","value":"TgaEncoder {  }","parent":null,"children":[{"krate":0,"index":3950}],"decl_id":null,"docs":" TGA encoder.\n","sig":null,"attributes":[{"value":"/ TGA encoder.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670132,"byte_end":670148,"line_start":34,"line_end":34,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":3953},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670307,"byte_end":670310,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<TgaEncoder<W>>::new","value":"pub fn new(W) -> TgaEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670236,"byte_end":670295,"line_start":40,"line_end":40,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":3954},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670640,"byte_end":670646,"line_start":50,"line_end":50,"column_start":12,"column_end":18},"name":"encode","qualname":"<TgaEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```buf``` that has dimensions ```width```\n and ```height``` and ```ColorType``` ```color_type```.","sig":null,"attributes":[{"value":"/ Encodes the image ```buf``` that has dimensions ```width```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670380,"byte_end":670443,"line_start":45,"line_end":45,"column_start":5,"column_end":68}},{"value":"/ and ```height``` and ```ColorType``` ```color_type```.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670448,"byte_end":670506,"line_start":46,"line_end":46,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670511,"byte_end":670514,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The dimensions of the image must be between 0 and 65535 (inclusive) or","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670519,"byte_end":670593,"line_start":48,"line_end":48,"column_start":5,"column_end":79}},{"value":"/ an error will be returned.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670598,"byte_end":670628,"line_start":49,"line_end":49,"column_start":5,"column_end":35}}]},{"kind":"Mod","id":{"krate":0,"index":4033},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tiff","qualname":"::codecs::tiff","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","parent":null,"children":[{"krate":0,"index":4034},{"krate":0,"index":4035},{"krate":0,"index":4038},{"krate":0,"index":4039},{"krate":0,"index":4042},{"krate":0,"index":4045},{"krate":0,"index":4048},{"krate":0,"index":4051},{"krate":0,"index":4054},{"krate":0,"index":4055},{"krate":0,"index":4057},{"krate":0,"index":4060},{"krate":0,"index":4061},{"krate":0,"index":4064},{"krate":0,"index":4067},{"krate":0,"index":4068},{"krate":0,"index":4071},{"krate":0,"index":4074},{"krate":0,"index":4077},{"krate":0,"index":4080},{"krate":0,"index":4083},{"krate":0,"index":4086},{"krate":0,"index":4089},{"krate":0,"index":4092},{"krate":0,"index":4095},{"krate":0,"index":4098},{"krate":0,"index":4099},{"krate":0,"index":4102},{"krate":0,"index":4105},{"krate":0,"index":4108},{"krate":0,"index":4111},{"krate":0,"index":4116},{"krate":0,"index":4119},{"krate":0,"index":4120},{"krate":0,"index":4121},{"krate":0,"index":4124},{"krate":0,"index":4129},{"krate":0,"index":4133},{"krate":0,"index":4141},{"krate":0,"index":4144},{"krate":0,"index":4146},{"krate":0,"index":4150}],"decl_id":null,"docs":" Decoding and Encoding of TIFF Images","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8494,"byte_end":8518,"line_start":245,"line_end":245,"column_start":5,"column_end":29}},{"value":"/ Decoding and Encoding of TIFF Images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":681336,"byte_end":681376,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":681377,"byte_end":681380,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ TIFF (Tagged Image File Format) is a versatile image format that supports","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":681381,"byte_end":681458,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ lossless and lossy compression.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":681459,"byte_end":681494,"line_start":4,"line_end":4,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":681495,"byte_end":681498,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":681499,"byte_end":681518,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"/ * <http://partners.adobe.com/public/developer/tiff/index.html> - The TIFF specification","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":681519,"byte_end":681610,"line_start":7,"line_end":7,"column_start":1,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":4111},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":682112,"byte_end":682123,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"TiffDecoder","qualname":"::codecs::tiff::TiffDecoder","value":"TiffDecoder {  }","parent":null,"children":[{"krate":0,"index":4113},{"krate":0,"index":4114},{"krate":0,"index":4115}],"decl_id":null,"docs":" Decoder for TIFF images.\n","sig":null,"attributes":[{"value":"/ Decoder for TIFF images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":682072,"byte_end":682100,"line_start":24,"line_end":24,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4118},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":682347,"byte_end":682350,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffDecoder<R>>::new","value":"pub fn new(R) -> Result<TiffDecoder<R>, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Create a new TiffDecoder.\n","sig":null,"attributes":[{"value":"/ Create a new TiffDecoder.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":682306,"byte_end":682335,"line_start":38,"line_end":38,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":4124},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":686858,"byte_end":686868,"line_start":150,"line_end":150,"column_start":12,"column_end":22},"name":"TiffReader","qualname":"::codecs::tiff::TiffReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":686801,"byte_end":686846,"line_start":149,"line_end":149,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4141},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":690220,"byte_end":690231,"line_start":240,"line_end":240,"column_start":12,"column_end":23},"name":"TiffEncoder","qualname":"::codecs::tiff::TiffEncoder","value":"TiffEncoder {  }","parent":null,"children":[{"krate":0,"index":4143}],"decl_id":null,"docs":" Encoder for tiff images\n","sig":null,"attributes":[{"value":"/ Encoder for tiff images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":690181,"byte_end":690208,"line_start":239,"line_end":239,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":4148},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":690957,"byte_end":690960,"line_start":260,"line_end":260,"column_start":12,"column_end":15},"name":"new","qualname":"<TiffEncoder<W>>::new","value":"pub fn new(W) -> TiffEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w`\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":690891,"byte_end":690945,"line_start":259,"line_end":259,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":4149},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":691192,"byte_end":691198,"line_start":267,"line_end":267,"column_start":12,"column_end":18},"name":"encode","qualname":"<TiffEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.","sig":null,"attributes":[{"value":"/ Encodes the image `image` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":691024,"byte_end":691115,"line_start":264,"line_end":264,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":691120,"byte_end":691123,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ 16-bit types assume the buffer is native endian.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":691128,"byte_end":691180,"line_start":266,"line_end":266,"column_start":5,"column_end":57}}]},{"kind":"Mod","id":{"krate":0,"index":4153},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"webp","qualname":"::codecs::webp","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/mod.rs","parent":null,"children":[{"krate":0,"index":4154},{"krate":0,"index":4157},{"krate":0,"index":4306},{"krate":0,"index":4322},{"krate":0,"index":4328},{"krate":0,"index":4352},{"krate":0,"index":4452},{"krate":0,"index":4485},{"krate":0,"index":4622}],"decl_id":null,"docs":" Decoding of WebP Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"webp\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8541,"byte_end":8565,"line_start":247,"line_end":247,"column_start":5,"column_end":29}},{"value":"/ Decoding of WebP Images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/mod.rs","byte_start":693066,"byte_end":693093,"line_start":1,"line_end":1,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":4268},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":697043,"byte_end":697054,"line_start":124,"line_end":124,"column_start":12,"column_end":23},"name":"WebPDecoder","qualname":"::codecs::webp::decoder::WebPDecoder","value":"WebPDecoder {  }","parent":null,"children":[{"krate":0,"index":4270},{"krate":0,"index":4271}],"decl_id":null,"docs":" WebP Image format decoder. Currently only supports lossy RGB images or lossless RGBA images.\n","sig":null,"attributes":[{"value":"/ WebP Image format decoder. Currently only supports lossy RGB images or lossless RGBA images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":696935,"byte_end":697031,"line_start":123,"line_end":123,"column_start":1,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":4274},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":697248,"byte_end":697251,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<WebPDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<WebPDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebPDecoder from the Reader ```r```.\n This function takes ownership of the Reader.\n","sig":null,"attributes":[{"value":"/ Create a new WebPDecoder from the Reader ```r```.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":697130,"byte_end":697183,"line_start":130,"line_end":130,"column_start":5,"column_end":58}},{"value":"/ This function takes ownership of the Reader.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":697188,"byte_end":697236,"line_start":131,"line_end":131,"column_start":5,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":4285},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":700885,"byte_end":700895,"line_start":255,"line_end":255,"column_start":12,"column_end":22},"name":"WebpReader","qualname":"::codecs::webp::decoder::WebpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":700828,"byte_end":700873,"line_start":254,"line_end":254,"column_start":1,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":4622},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vp8","qualname":"::codecs::webp::vp8","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","parent":null,"children":[{"krate":0,"index":4623},{"krate":0,"index":4624},{"krate":0,"index":4627},{"krate":0,"index":4630},{"krate":0,"index":4633},{"krate":0,"index":4634},{"krate":0,"index":4636},{"krate":0,"index":4639},{"krate":0,"index":4640},{"krate":0,"index":4643},{"krate":0,"index":4646},{"krate":0,"index":4649},{"krate":0,"index":4652},{"krate":0,"index":4655},{"krate":0,"index":4656},{"krate":0,"index":4659},{"krate":0,"index":4662},{"krate":0,"index":4665},{"krate":0,"index":4668},{"krate":0,"index":4671},{"krate":0,"index":4674},{"krate":0,"index":4677},{"krate":0,"index":4678},{"krate":0,"index":4679},{"krate":0,"index":4680},{"krate":0,"index":4681},{"krate":0,"index":4682},{"krate":0,"index":4683},{"krate":0,"index":4684},{"krate":0,"index":4685},{"krate":0,"index":4686},{"krate":0,"index":4687},{"krate":0,"index":4688},{"krate":0,"index":4689},{"krate":0,"index":4690},{"krate":0,"index":4691},{"krate":0,"index":4692},{"krate":0,"index":4693},{"krate":0,"index":7664},{"krate":0,"index":7680},{"krate":0,"index":7682},{"krate":0,"index":7683},{"krate":0,"index":7685},{"krate":0,"index":7686},{"krate":0,"index":7688},{"krate":0,"index":7689},{"krate":0,"index":7691},{"krate":0,"index":7704},{"krate":0,"index":7706},{"krate":0,"index":7707},{"krate":0,"index":7709},{"krate":0,"index":7710},{"krate":0,"index":7712},{"krate":0,"index":7713},{"krate":0,"index":7715},{"krate":0,"index":7746},{"krate":0,"index":7748},{"krate":0,"index":7749},{"krate":0,"index":7751},{"krate":0,"index":7752},{"krate":0,"index":7754},{"krate":0,"index":7755},{"krate":0,"index":4694},{"krate":0,"index":4695},{"krate":0,"index":4697},{"krate":0,"index":4699},{"krate":0,"index":4701},{"krate":0,"index":4703},{"krate":0,"index":4707},{"krate":0,"index":4709},{"krate":0,"index":4711},{"krate":0,"index":4716},{"krate":0,"index":4717},{"krate":0,"index":4718},{"krate":0,"index":4719},{"krate":0,"index":4720},{"krate":0,"index":4721},{"krate":0,"index":4722},{"krate":0,"index":4723},{"krate":0,"index":4724},{"krate":0,"index":4725},{"krate":0,"index":4726},{"krate":0,"index":4727},{"krate":0,"index":4728},{"krate":0,"index":4729},{"krate":0,"index":4730},{"krate":0,"index":4732},{"krate":0,"index":4735},{"krate":0,"index":4737},{"krate":0,"index":7757},{"krate":0,"index":7759},{"krate":0,"index":4739},{"krate":0,"index":7761},{"krate":0,"index":7780},{"krate":0,"index":7782},{"krate":0,"index":7785},{"krate":0,"index":4741},{"krate":0,"index":4743},{"krate":0,"index":4745},{"krate":0,"index":4746},{"krate":0,"index":4752},{"krate":0,"index":7786},{"krate":0,"index":7795},{"krate":0,"index":7797},{"krate":0,"index":7801},{"krate":0,"index":7802},{"krate":0,"index":7815},{"krate":0,"index":7817},{"krate":0,"index":7819},{"krate":0,"index":4760},{"krate":0,"index":7821},{"krate":0,"index":7831},{"krate":0,"index":7833},{"krate":0,"index":7834},{"krate":0,"index":4767},{"krate":0,"index":4795},{"krate":0,"index":4828},{"krate":0,"index":4831},{"krate":0,"index":4833},{"krate":0,"index":4835},{"krate":0,"index":4837},{"krate":0,"index":4839},{"krate":0,"index":4841},{"krate":0,"index":4843},{"krate":0,"index":4846},{"krate":0,"index":4847},{"krate":0,"index":4848},{"krate":0,"index":4850},{"krate":0,"index":4852},{"krate":0,"index":4853},{"krate":0,"index":4854},{"krate":0,"index":4855},{"krate":0,"index":4856},{"krate":0,"index":4857},{"krate":0,"index":4858},{"krate":0,"index":4859},{"krate":0,"index":4860},{"krate":0,"index":4861},{"krate":0,"index":4862},{"krate":0,"index":4863},{"krate":0,"index":4864},{"krate":0,"index":4865},{"krate":0,"index":4866},{"krate":0,"index":4867},{"krate":0,"index":4868}],"decl_id":null,"docs":" An implementation of the VP8 Video Codec","sig":null,"attributes":[{"value":"/ An implementation of the VP8 Video Codec","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784398,"byte_end":784442,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784443,"byte_end":784446,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains a partial implementation of the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784447,"byte_end":784503,"line_start":3,"line_end":3,"column_start":1,"column_end":57}},{"value":"/ VP8 video format as defined in RFC-6386.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784504,"byte_end":784548,"line_start":4,"line_end":4,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784549,"byte_end":784552,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It decodes Keyframes only.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784553,"byte_end":784583,"line_start":6,"line_end":6,"column_start":1,"column_end":31}},{"value":"/ VP8 is the underpinning of the WebP image format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784584,"byte_end":784636,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784637,"byte_end":784640,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784641,"byte_end":784660,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/ * [rfc-6386](http://tools.ietf.org/html/rfc6386) - The VP8 Data Format and Decoding Guide","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784661,"byte_end":784754,"line_start":10,"line_end":10,"column_start":1,"column_end":94}},{"value":"/ * [VP8.pdf](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37073.pdf) - An overview of","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784755,"byte_end":784877,"line_start":11,"line_end":11,"column_start":1,"column_end":123}},{"value":"/ of the VP8 format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784878,"byte_end":784899,"line_start":12,"line_end":12,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":784900,"byte_end":784903,"line_start":13,"line_end":13,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":7802},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815285,"byte_end":815290,"line_start":849,"line_end":849,"column_start":12,"column_end":17},"name":"Frame","qualname":"::codecs::webp::vp8::Frame","value":"Frame { width, height, ybuf, ubuf, vbuf, keyframe, for_display, pixel_type }","parent":null,"children":[{"krate":0,"index":7803},{"krate":0,"index":7804},{"krate":0,"index":7805},{"krate":0,"index":7806},{"krate":0,"index":7807},{"krate":0,"index":7808},{"krate":0,"index":7809},{"krate":0,"index":7810},{"krate":0,"index":7811},{"krate":0,"index":7812},{"krate":0,"index":7813},{"krate":0,"index":7814}],"decl_id":null,"docs":" A Representation of the last decoded video frame\n","sig":null,"attributes":[{"value":"/ A Representation of the last decoded video frame","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815188,"byte_end":815240,"line_start":847,"line_end":847,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":7803},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815337,"byte_end":815342,"line_start":851,"line_end":851,"column_start":9,"column_end":14},"name":"width","qualname":"::codecs::webp::vp8::Frame::width","value":"u16","parent":{"krate":0,"index":7802},"children":[],"decl_id":null,"docs":" The width of the luma plane\n","sig":null,"attributes":[{"value":"/ The width of the luma plane","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815297,"byte_end":815328,"line_start":850,"line_end":850,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":7804},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815395,"byte_end":815401,"line_start":854,"line_end":854,"column_start":9,"column_end":15},"name":"height","qualname":"::codecs::webp::vp8::Frame::height","value":"u16","parent":{"krate":0,"index":7802},"children":[],"decl_id":null,"docs":" The height of the luma plane\n","sig":null,"attributes":[{"value":"/ The height of the luma plane","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815354,"byte_end":815386,"line_start":853,"line_end":853,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":7805},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815453,"byte_end":815457,"line_start":857,"line_end":857,"column_start":9,"column_end":13},"name":"ybuf","qualname":"::codecs::webp::vp8::Frame::ybuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":7802},"children":[],"decl_id":null,"docs":" The luma plane of the frame\n","sig":null,"attributes":[{"value":"/ The luma plane of the frame","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815413,"byte_end":815444,"line_start":856,"line_end":856,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":7806},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815513,"byte_end":815517,"line_start":860,"line_end":860,"column_start":9,"column_end":13},"name":"ubuf","qualname":"::codecs::webp::vp8::Frame::ubuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":7802},"children":[],"decl_id":null,"docs":" The blue plane of the frame\n","sig":null,"attributes":[{"value":"/ The blue plane of the frame","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815473,"byte_end":815504,"line_start":859,"line_end":859,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":7807},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815572,"byte_end":815576,"line_start":863,"line_end":863,"column_start":9,"column_end":13},"name":"vbuf","qualname":"::codecs::webp::vp8::Frame::vbuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":7802},"children":[],"decl_id":null,"docs":" The red plane of the frame\n","sig":null,"attributes":[{"value":"/ The red plane of the frame","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815533,"byte_end":815563,"line_start":862,"line_end":862,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":7808},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815647,"byte_end":815655,"line_start":866,"line_end":866,"column_start":9,"column_end":17},"name":"keyframe","qualname":"::codecs::webp::vp8::Frame::keyframe","value":"bool","parent":{"krate":0,"index":7802},"children":[],"decl_id":null,"docs":" Indicates whether this frame is a keyframe\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is a keyframe","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815592,"byte_end":815638,"line_start":865,"line_end":865,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":7810},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815751,"byte_end":815762,"line_start":871,"line_end":871,"column_start":9,"column_end":20},"name":"for_display","qualname":"::codecs::webp::vp8::Frame::for_display","value":"bool","parent":{"krate":0,"index":7802},"children":[],"decl_id":null,"docs":" Indicates whether this frame is intended for display\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is intended for display","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815686,"byte_end":815742,"line_start":870,"line_end":870,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":7811},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815893,"byte_end":815903,"line_start":876,"line_end":876,"column_start":9,"column_end":19},"name":"pixel_type","qualname":"::codecs::webp::vp8::Frame::pixel_type","value":"u8","parent":{"krate":0,"index":7802},"children":[],"decl_id":null,"docs":" The pixel type of the frame as defined by Section 9.2\n of the VP8 Specification\n","sig":null,"attributes":[{"value":"/ The pixel type of the frame as defined by Section 9.2","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815794,"byte_end":815851,"line_start":874,"line_end":874,"column_start":5,"column_end":62}},{"value":"/ of the VP8 Specification","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":815856,"byte_end":815884,"line_start":875,"line_end":875,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":4766},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":818240,"byte_end":818252,"line_start":948,"line_end":948,"column_start":12,"column_end":24},"name":"get_buf_size","qualname":"<Frame>::get_buf_size","value":"pub fn get_buf_size(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Gets the buffer size\n","sig":null,"attributes":[{"value":"/ Gets the buffer size","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":818204,"byte_end":818228,"line_start":947,"line_end":947,"column_start":5,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":4767},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":818585,"byte_end":818595,"line_start":973,"line_end":973,"column_start":12,"column_end":22},"name":"Vp8Decoder","qualname":"::codecs::webp::vp8::Vp8Decoder","value":"Vp8Decoder {  }","parent":null,"children":[{"krate":0,"index":4769},{"krate":0,"index":4770},{"krate":0,"index":4771},{"krate":0,"index":4772},{"krate":0,"index":4773},{"krate":0,"index":4774},{"krate":0,"index":4775},{"krate":0,"index":4776},{"krate":0,"index":4777},{"krate":0,"index":4779},{"krate":0,"index":4781},{"krate":0,"index":4783},{"krate":0,"index":4785},{"krate":0,"index":4786},{"krate":0,"index":4788},{"krate":0,"index":4789},{"krate":0,"index":4790},{"krate":0,"index":4791},{"krate":0,"index":4792},{"krate":0,"index":4793},{"krate":0,"index":4794}],"decl_id":null,"docs":" VP8 Decoder","sig":null,"attributes":[{"value":"/ VP8 Decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":818527,"byte_end":818542,"line_start":970,"line_end":970,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":818543,"byte_end":818546,"line_start":971,"line_end":971,"column_start":1,"column_end":4}},{"value":"/ Only decodes keyframes","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":818547,"byte_end":818573,"line_start":972,"line_end":972,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":4797},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":819345,"byte_end":819348,"line_start":1012,"line_end":1012,"column_start":12,"column_end":15},"name":"new","qualname":"<Vp8Decoder<R>>::new","value":"pub fn new(R) -> Vp8Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder.\n The reader must present a raw vp8 bitstream to the decoder\n","sig":null,"attributes":[{"value":"/ Create a new decoder.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":819241,"byte_end":819266,"line_start":1010,"line_end":1010,"column_start":5,"column_end":30}},{"value":"/ The reader must present a raw vp8 bitstream to the decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":819271,"byte_end":819333,"line_start":1011,"line_end":1011,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":4826},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":855617,"byte_end":855629,"line_start":2059,"line_end":2059,"column_start":12,"column_end":24},"name":"decode_frame","qualname":"<Vp8Decoder<R>>::decode_frame","value":"pub fn decode_frame(&mut Self) -> ImageResult<&Frame>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the current frame\n","sig":null,"attributes":[{"value":"/ Decodes the current frame","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":855576,"byte_end":855605,"line_start":2058,"line_end":2058,"column_start":5,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":4885},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":881848,"byte_end":881854,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":4887}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":881763,"byte_end":881836,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":4890},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882035,"byte_end":882038,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"pub fn new(Box<dyn Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":881955,"byte_end":882023,"line_start":15,"line_end":15,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":4891},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882430,"byte_end":882444,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"pub fn collect_frames(Self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882149,"byte_end":882243,"line_start":20,"line_end":20,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882248,"byte_end":882260,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882265,"byte_end":882327,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882332,"byte_end":882335,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882340,"byte_end":882418,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":7836},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882733,"byte_end":882738,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":7837},{"krate":0,"index":7838},{"krate":0,"index":7839},{"krate":0,"index":7840}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882676,"byte_end":882704,"line_start":37,"line_end":37,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":7843},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883020,"byte_end":883025,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Delay","qualname":"::animation::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":7844}],"decl_id":null,"docs":" The delay of a frame relative to the previous one.\n","sig":null,"attributes":[{"value":"/ The delay of a frame relative to the previous one.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882897,"byte_end":882951,"line_start":49,"line_end":49,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":4897},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883127,"byte_end":883130,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"pub fn new(RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame without any delay.\n","sig":null,"attributes":[{"value":"/ Contructs a new frame without any delay.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883071,"byte_end":883115,"line_start":56,"line_end":56,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":4898},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883358,"byte_end":883368,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"pub fn from_parts(RgbaImage, u32, u32, Delay) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883321,"byte_end":883346,"line_start":66,"line_end":66,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":4899},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883580,"byte_end":883585,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"pub fn delay(&Self) -> Delay","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883545,"byte_end":883568,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":4900},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883674,"byte_end":883680,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"pub fn buffer(&Self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883634,"byte_end":883662,"line_start":81,"line_end":81,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":4901},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883782,"byte_end":883792,"line_start":87,"line_end":87,"column_start":12,"column_end":22},"name":"buffer_mut","qualname":"<Frame>::buffer_mut","value":"pub fn buffer_mut(&mut Self) -> &mut RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable image buffer\n","sig":null,"attributes":[{"value":"/ Returns a mutable image buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883736,"byte_end":883770,"line_start":86,"line_end":86,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":4902},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883900,"byte_end":883911,"line_start":92,"line_end":92,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"pub fn into_buffer(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883860,"byte_end":883888,"line_start":91,"line_end":91,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":4903},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884000,"byte_end":884004,"line_start":97,"line_end":97,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"pub fn left(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883964,"byte_end":883988,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4904},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884086,"byte_end":884089,"line_start":102,"line_end":102,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"pub fn top(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884050,"byte_end":884074,"line_start":101,"line_end":101,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":4906},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884354,"byte_end":884373,"line_start":116,"line_end":116,"column_start":12,"column_end":31},"name":"from_numer_denom_ms","qualname":"<Delay>::from_numer_denom_ms","value":"pub fn from_numer_denom_ms(u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a delay from a ratio of milliseconds.","sig":null,"attributes":[{"value":"/ Create a delay from a ratio of milliseconds.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884149,"byte_end":884197,"line_start":108,"line_end":108,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884202,"byte_end":884205,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884210,"byte_end":884224,"line_start":110,"line_end":110,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884229,"byte_end":884232,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884237,"byte_end":884244,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"/ use image::Delay;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884249,"byte_end":884270,"line_start":113,"line_end":113,"column_start":5,"column_end":26}},{"value":"/ let delay_10ms = Delay::from_numer_denom_ms(10, 1);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884275,"byte_end":884330,"line_start":114,"line_end":114,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884335,"byte_end":884342,"line_start":115,"line_end":115,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4907},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":885037,"byte_end":885061,"line_start":136,"line_end":136,"column_start":12,"column_end":36},"name":"from_saturating_duration","qualname":"<Delay>::from_saturating_duration","value":"pub fn from_saturating_duration(Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from a duration, clamped between 0 and an implemented defined maximum.","sig":null,"attributes":[{"value":"/ Convert from a duration, clamped between 0 and an implemented defined maximum.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884514,"byte_end":884596,"line_start":122,"line_end":122,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884601,"byte_end":884604,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ The maximum is *at least* `i32::MAX` milliseconds. It should be noted that the accuracy of","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884609,"byte_end":884703,"line_start":124,"line_end":124,"column_start":5,"column_end":99}},{"value":"/ the result may be relative and very large delays have a coarse resolution.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884708,"byte_end":884786,"line_start":125,"line_end":125,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884791,"byte_end":884794,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884799,"byte_end":884813,"line_start":127,"line_end":127,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884818,"byte_end":884821,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884826,"byte_end":884833,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ use std::time::Duration;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884838,"byte_end":884866,"line_start":130,"line_end":130,"column_start":5,"column_end":33}},{"value":"/ use image::Delay;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884871,"byte_end":884892,"line_start":131,"line_end":131,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884897,"byte_end":884900,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ let duration = Duration::from_millis(20);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884905,"byte_end":884950,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/ let delay = Delay::from_saturating_duration(duration);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884955,"byte_end":885013,"line_start":134,"line_end":134,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":885018,"byte_end":885025,"line_start":135,"line_end":135,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":4909},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":886241,"byte_end":886255,"line_start":165,"line_end":165,"column_start":12,"column_end":26},"name":"numer_denom_ms","qualname":"<Delay>::numer_denom_ms","value":"pub fn numer_denom_ms(Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The numerator and denominator of the delay in milliseconds.","sig":null,"attributes":[{"value":"/ The numerator and denominator of the delay in milliseconds.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":886015,"byte_end":886078,"line_start":161,"line_end":161,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":886083,"byte_end":886086,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be an exact conversion if the `Delay` was previously created with the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":886091,"byte_end":886186,"line_start":163,"line_end":163,"column_start":5,"column_end":100}},{"value":"/ `from_numer_denom_ms` constructor.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":886191,"byte_end":886229,"line_start":164,"line_end":164,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":5023},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":893732,"byte_end":893738,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer_::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":5026}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":893692,"byte_end":893720,"line_start":18,"line_end":18,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":5048},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":894907,"byte_end":894916,"line_start":77,"line_end":77,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer_::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":5051}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":894859,"byte_end":894895,"line_start":76,"line_end":76,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":5070},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":896159,"byte_end":896163,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer_::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":5073}],"decl_id":null,"docs":" Iterate over rows of an image","sig":null,"attributes":[{"value":"/ Iterate over rows of an image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":895953,"byte_end":895986,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":895987,"byte_end":895990,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows`]. See its document for details.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":895991,"byte_end":896077,"line_start":130,"line_end":130,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":896078,"byte_end":896081,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows`]: ../struct.ImageBuffer.html#method.rows","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":896082,"byte_end":896147,"line_start":132,"line_end":132,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":5097},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898740,"byte_end":898747,"line_start":225,"line_end":225,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer_::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":5100}],"decl_id":null,"docs":" Iterate over mutable rows of an image","sig":null,"attributes":[{"value":"/ Iterate over mutable rows of an image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898514,"byte_end":898555,"line_start":220,"line_end":220,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898556,"byte_end":898559,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows_mut`]. See its document for details.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898560,"byte_end":898650,"line_start":222,"line_end":222,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898651,"byte_end":898654,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows_mut`]: ../struct.ImageBuffer.html#method.rows_mut","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898655,"byte_end":898728,"line_start":224,"line_end":224,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":5121},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":901069,"byte_end":901084,"line_start":305,"line_end":305,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer_::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":5124},{"krate":0,"index":5125},{"krate":0,"index":5126},{"krate":0,"index":5127}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":901020,"byte_end":901057,"line_start":304,"line_end":304,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5144},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":902390,"byte_end":902403,"line_start":366,"line_end":366,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer_::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":5147},{"krate":0,"index":5148},{"krate":0,"index":5149}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":902343,"byte_end":902378,"line_start":365,"line_end":365,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":5166},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":903775,"byte_end":903793,"line_start":431,"line_end":431,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer_::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":5169},{"krate":0,"index":5170},{"krate":0,"index":5171},{"krate":0,"index":5172}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":903726,"byte_end":903763,"line_start":430,"line_end":430,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":5186},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":904936,"byte_end":904952,"line_start":483,"line_end":483,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer_::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":5189},{"krate":0,"index":5190},{"krate":0,"index":5191}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":904889,"byte_end":904924,"line_start":482,"line_end":482,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":7859},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908502,"byte_end":908513,"line_start":607,"line_end":607,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer_::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":7862},{"krate":0,"index":7863},{"krate":0,"index":7864},{"krate":0,"index":7865}],"decl_id":null,"docs":" Generic image buffer","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906121,"byte_end":906145,"line_start":538,"line_end":538,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906146,"byte_end":906149,"line_start":539,"line_end":539,"column_start":1,"column_end":4}},{"value":"/ This is an image parameterised by its Pixel types, represented by a width and height and a","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906150,"byte_end":906244,"line_start":540,"line_end":540,"column_start":1,"column_end":95}},{"value":"/ container of channel data. It provides direct access to its pixels and implements the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906245,"byte_end":906334,"line_start":541,"line_end":541,"column_start":1,"column_end":90}},{"value":"/ [`GenericImageView`] and [`GenericImage`] traits. In many ways, this is the standard buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906335,"byte_end":906430,"line_start":542,"line_end":542,"column_start":1,"column_end":96}},{"value":"/ implementing those traits. Using this concrete type instead of a generic type parameter has","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906431,"byte_end":906526,"line_start":543,"line_end":543,"column_start":1,"column_end":96}},{"value":"/ been shown to improve performance.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906527,"byte_end":906565,"line_start":544,"line_end":544,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906566,"byte_end":906569,"line_start":545,"line_end":545,"column_start":1,"column_end":4}},{"value":"/ The crate defines a few type aliases with regularly used pixel types for your convenience, such","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906570,"byte_end":906669,"line_start":546,"line_end":546,"column_start":1,"column_end":100}},{"value":"/ as `RgbImage`, `GrayImage` etc.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906670,"byte_end":906705,"line_start":547,"line_end":547,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906706,"byte_end":906709,"line_start":548,"line_end":548,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906710,"byte_end":906755,"line_start":549,"line_end":549,"column_start":1,"column_end":46}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906756,"byte_end":906809,"line_start":550,"line_end":550,"column_start":1,"column_end":54}},{"value":"/ [`RgbImage`]: type.RgbImage.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906810,"byte_end":906846,"line_start":551,"line_end":551,"column_start":1,"column_end":37}},{"value":"/ [`GrayImage`]: type.GrayImage.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906847,"byte_end":906885,"line_start":552,"line_end":552,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906886,"byte_end":906889,"line_start":553,"line_end":553,"column_start":1,"column_end":4}},{"value":"/ To convert between images of different Pixel types use [`DynamicImage`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906890,"byte_end":906966,"line_start":554,"line_end":554,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906967,"byte_end":906970,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ You can retrieve a complete description of the buffer's layout and contents through","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":906971,"byte_end":907058,"line_start":556,"line_end":556,"column_start":1,"column_end":88}},{"value":"/ [`as_flat_samples`] and [`as_flat_samples_mut`]. This can be handy to also use the contents in","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907059,"byte_end":907157,"line_start":557,"line_end":557,"column_start":1,"column_end":99}},{"value":"/ a foreign language, map it as a GPU host buffer or other similar tasks.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907158,"byte_end":907233,"line_start":558,"line_end":558,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907234,"byte_end":907237,"line_start":559,"line_end":559,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907238,"byte_end":907282,"line_start":560,"line_end":560,"column_start":1,"column_end":45}},{"value":"/ [`as_flat_samples`]: #method.as_flat_samples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907283,"byte_end":907331,"line_start":561,"line_end":561,"column_start":1,"column_end":49}},{"value":"/ [`as_flat_samples_mut`]: #method.as_flat_samples_mut","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907332,"byte_end":907388,"line_start":562,"line_end":562,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907389,"byte_end":907392,"line_start":563,"line_end":563,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907393,"byte_end":907408,"line_start":564,"line_end":564,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907409,"byte_end":907412,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ Create a simple canvas and paint a small cross.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907413,"byte_end":907464,"line_start":566,"line_end":566,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907465,"byte_end":907468,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907469,"byte_end":907476,"line_start":568,"line_end":568,"column_start":1,"column_end":8}},{"value":"/ use image::{RgbImage, Rgb};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907477,"byte_end":907508,"line_start":569,"line_end":569,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907509,"byte_end":907512,"line_start":570,"line_end":570,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbImage::new(32, 32);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907513,"byte_end":907553,"line_start":571,"line_end":571,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907554,"byte_end":907557,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ for x in 15..=17 {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907558,"byte_end":907580,"line_start":573,"line_end":573,"column_start":1,"column_end":23}},{"value":"/     for y in 8..24 {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907581,"byte_end":907605,"line_start":574,"line_end":574,"column_start":1,"column_end":25}},{"value":"/         img.put_pixel(x, y, Rgb([255, 0, 0]));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907606,"byte_end":907656,"line_start":575,"line_end":575,"column_start":1,"column_end":51}},{"value":"/         img.put_pixel(y, x, Rgb([255, 0, 0]));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907657,"byte_end":907707,"line_start":576,"line_end":576,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907708,"byte_end":907717,"line_start":577,"line_end":577,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907718,"byte_end":907723,"line_start":578,"line_end":578,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907724,"byte_end":907731,"line_start":579,"line_end":579,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907732,"byte_end":907735,"line_start":580,"line_end":580,"column_start":1,"column_end":4}},{"value":"/ Overlays an image on top of a larger background raster.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907736,"byte_end":907795,"line_start":581,"line_end":581,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907796,"byte_end":907799,"line_start":582,"line_end":582,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907800,"byte_end":907813,"line_start":583,"line_end":583,"column_start":1,"column_end":14}},{"value":"/ use image::{GenericImage, GenericImageView, ImageBuffer, open};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907814,"byte_end":907881,"line_start":584,"line_end":584,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907882,"byte_end":907885,"line_start":585,"line_end":585,"column_start":1,"column_end":4}},{"value":"/ let on_top = open(\"path/to/some.png\").unwrap().into_rgb8();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907886,"byte_end":907949,"line_start":586,"line_end":586,"column_start":1,"column_end":64}},{"value":"/ let mut img = ImageBuffer::from_fn(512, 512, |x, y| {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":907950,"byte_end":908007,"line_start":587,"line_end":587,"column_start":1,"column_end":58}},{"value":"/     if (x + y) % 2 == 0 {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908008,"byte_end":908037,"line_start":588,"line_end":588,"column_start":1,"column_end":30}},{"value":"/         image::Rgb([0, 0, 0])","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908038,"byte_end":908071,"line_start":589,"line_end":589,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908072,"byte_end":908088,"line_start":590,"line_end":590,"column_start":1,"column_end":17}},{"value":"/         image::Rgb([255, 255, 255])","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908089,"byte_end":908128,"line_start":591,"line_end":591,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908129,"byte_end":908138,"line_start":592,"line_end":592,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908139,"byte_end":908146,"line_start":593,"line_end":593,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908147,"byte_end":908150,"line_start":594,"line_end":594,"column_start":1,"column_end":4}},{"value":"/ image::imageops::overlay(&mut img, &on_top, 128, 128);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908151,"byte_end":908209,"line_start":595,"line_end":595,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908210,"byte_end":908217,"line_start":596,"line_end":596,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908218,"byte_end":908221,"line_start":597,"line_end":597,"column_start":1,"column_end":4}},{"value":"/ Convert an RgbaImage to a GrayImage.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908222,"byte_end":908262,"line_start":598,"line_end":598,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908263,"byte_end":908266,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908267,"byte_end":908280,"line_start":600,"line_end":600,"column_start":1,"column_end":14}},{"value":"/ use image::{open, DynamicImage};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908281,"byte_end":908317,"line_start":601,"line_end":601,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908318,"byte_end":908321,"line_start":602,"line_end":602,"column_start":1,"column_end":4}},{"value":"/ let rgba = open(\"path/to/some.png\").unwrap().into_rgba8();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908322,"byte_end":908384,"line_start":603,"line_end":603,"column_start":1,"column_end":63}},{"value":"/ let gray = DynamicImage::ImageRgba8(rgba).into_luma8();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908385,"byte_end":908444,"line_start":604,"line_end":604,"column_start":1,"column_end":60}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908445,"byte_end":908452,"line_start":605,"line_end":605,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":5208},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":909084,"byte_end":909092,"line_start":625,"line_end":625,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"pub fn from_raw(u32, u32, Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908799,"byte_end":908846,"line_start":620,"line_end":620,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908851,"byte_end":908887,"line_start":621,"line_end":621,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908892,"byte_end":908895,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908900,"byte_end":908990,"line_start":623,"line_end":623,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908995,"byte_end":909072,"line_start":624,"line_end":624,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":5209},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":909498,"byte_end":909506,"line_start":639,"line_end":639,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"pub fn into_raw(Self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":909449,"byte_end":909486,"line_start":638,"line_end":638,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":5210},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":909606,"byte_end":909612,"line_start":644,"line_end":644,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<ImageBuffer<P, Container>>::as_raw","value":"pub fn as_raw(&Self) -> &Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":909557,"byte_end":909594,"line_start":643,"line_end":643,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":5211},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":909717,"byte_end":909727,"line_start":649,"line_end":649,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":909666,"byte_end":909705,"line_start":648,"line_end":648,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5212},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":909836,"byte_end":909841,"line_start":654,"line_end":654,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":909796,"byte_end":909824,"line_start":653,"line_end":653,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":5213},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":909929,"byte_end":909935,"line_start":659,"line_end":659,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":909888,"byte_end":909917,"line_start":658,"line_end":658,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5215},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":910331,"byte_end":910337,"line_start":671,"line_end":671,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"pub fn pixels(&Self) -> Pixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":910198,"byte_end":910252,"line_start":669,"line_end":669,"column_start":5,"column_end":59}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":910257,"byte_end":910319,"line_start":670,"line_end":670,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5216},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":910871,"byte_end":910875,"line_start":684,"line_end":684,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"pub fn rows(&Self) -> Rows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the rows of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":910524,"byte_end":910576,"line_start":679,"line_end":679,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":910581,"byte_end":910584,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":910589,"byte_end":910680,"line_start":681,"line_end":681,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":910685,"byte_end":910778,"line_start":682,"line_end":682,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":910783,"byte_end":910859,"line_start":683,"line_end":683,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":5217},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911226,"byte_end":911242,"line_start":693,"line_end":693,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"pub fn enumerate_pixels(&Self) -> EnumeratePixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n The iteration order is x = 0 to width then y = 0 to height\n Starting from the top left.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":910969,"byte_end":911013,"line_start":688,"line_end":688,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911018,"byte_end":911071,"line_start":689,"line_end":689,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911076,"byte_end":911111,"line_start":690,"line_end":690,"column_start":5,"column_end":40}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911116,"byte_end":911178,"line_start":691,"line_end":691,"column_start":5,"column_end":67}},{"value":"/ Starting from the top left.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911183,"byte_end":911214,"line_start":692,"line_end":692,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":5218},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911574,"byte_end":911588,"line_start":705,"line_end":705,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"pub fn enumerate_rows(&Self) -> EnumerateRows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911423,"byte_end":911465,"line_start":702,"line_end":702,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911470,"byte_end":911522,"line_start":703,"line_end":703,"column_start":5,"column_end":57}},{"value":"/ along with a reference to them.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911527,"byte_end":911562,"line_start":704,"line_end":704,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":5219},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911909,"byte_end":911918,"line_start":718,"line_end":718,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911743,"byte_end":911797,"line_start":713,"line_end":713,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911802,"byte_end":911805,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911810,"byte_end":911822,"line_start":715,"line_end":715,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911827,"byte_end":911830,"line_start":716,"line_end":716,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":911835,"byte_end":911897,"line_start":717,"line_end":717,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5220},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":912409,"byte_end":912426,"line_start":731,"line_end":731,"column_start":12,"column_end":29},"name":"get_pixel_checked","qualname":"<ImageBuffer<P, Container>>::get_pixel_checked","value":"pub fn get_pixel_checked(&Self, u32, u32) -> Option<&P>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)` or returns `None` if\n the index is out of the bounds `(width, height)`.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)` or returns `None` if","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":912264,"byte_end":912339,"line_start":729,"line_end":729,"column_start":5,"column_end":80}},{"value":"/ the index is out of the bounds `(width, height)`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":912344,"byte_end":912397,"line_start":730,"line_end":730,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":5229},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":914347,"byte_end":914360,"line_start":780,"line_end":780,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"pub fn sample_layout(&Self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":914267,"byte_end":914335,"line_start":779,"line_end":779,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":5230},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":914974,"byte_end":914991,"line_start":791,"line_end":791,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"pub fn into_flat_samples(Self) -> FlatSamples<Container> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":914563,"byte_end":914637,"line_start":785,"line_end":785,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":914642,"byte_end":914645,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is layed out by","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":914650,"byte_end":914738,"line_start":787,"line_end":787,"column_start":5,"column_end":93}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":914743,"byte_end":914836,"line_start":788,"line_end":788,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":914841,"byte_end":914935,"line_start":789,"line_end":789,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":914940,"byte_end":914962,"line_start":790,"line_end":790,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":5231},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":915551,"byte_end":915566,"line_start":807,"line_end":807,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"pub fn as_flat_samples(&Self) -> FlatSamples<&[P::Subpixel]> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":915409,"byte_end":915452,"line_start":804,"line_end":804,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":915457,"byte_end":915460,"line_start":805,"line_end":805,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":915465,"byte_end":915539,"line_start":806,"line_end":806,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":5232},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":916076,"byte_end":916095,"line_start":822,"line_end":822,"column_start":12,"column_end":31},"name":"as_flat_samples_mut","qualname":"<ImageBuffer<P, Container>>::as_flat_samples_mut","value":"pub fn as_flat_samples_mut(&mut Self) -> FlatSamples<&mut [P::Subpixel]> where\nContainer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a mutable view on the raw sample buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":915926,"byte_end":915977,"line_start":819,"line_end":819,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":915982,"byte_end":915985,"line_start":820,"line_end":820,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":915990,"byte_end":916064,"line_start":821,"line_end":821,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":5237},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":916883,"byte_end":916893,"line_start":847,"line_end":847,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"pub fn pixels_mut(&mut Self) -> PixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":916809,"byte_end":916871,"line_start":846,"line_end":846,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5238},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":917453,"byte_end":917461,"line_start":860,"line_end":860,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"pub fn rows_mut(&mut Self) -> RowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable rows of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":917098,"byte_end":917158,"line_start":855,"line_end":855,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":917163,"byte_end":917166,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":917171,"byte_end":917262,"line_start":857,"line_end":857,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":917267,"byte_end":917360,"line_start":858,"line_end":858,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":917365,"byte_end":917441,"line_start":859,"line_end":859,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":5239},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":917731,"byte_end":917751,"line_start":867,"line_end":867,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"pub fn enumerate_pixels_mut(&mut Self) -> EnumeratePixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":917569,"byte_end":917613,"line_start":864,"line_end":864,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":917618,"byte_end":917671,"line_start":865,"line_end":865,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":917676,"byte_end":917719,"line_start":866,"line_end":866,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":5240},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":918125,"byte_end":918143,"line_start":880,"line_end":880,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"pub fn enumerate_rows_mut(&mut Self) -> EnumerateRowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":917966,"byte_end":918008,"line_start":877,"line_end":877,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":918013,"byte_end":918065,"line_start":878,"line_end":878,"column_start":5,"column_end":57}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":918070,"byte_end":918113,"line_start":879,"line_end":879,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":5241},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":918506,"byte_end":918519,"line_start":894,"line_end":894,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":918332,"byte_end":918394,"line_start":889,"line_end":889,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":918399,"byte_end":918402,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":918407,"byte_end":918419,"line_start":891,"line_end":891,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":918424,"byte_end":918427,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":918432,"byte_end":918494,"line_start":893,"line_end":893,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5242},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":919034,"byte_end":919055,"line_start":907,"line_end":907,"column_start":12,"column_end":33},"name":"get_pixel_mut_checked","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut_checked","value":"pub fn get_pixel_mut_checked(&mut Self, u32, u32) -> Option<&mut P>","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)` or returns\n `None` if the index is out of the bounds `(width, height)`.\n","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)` or returns","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":918881,"byte_end":918954,"line_start":905,"line_end":905,"column_start":5,"column_end":78}},{"value":"/ `None` if the index is out of the bounds `(width, height)`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":918959,"byte_end":919022,"line_start":906,"line_end":906,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":5244},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":919692,"byte_end":919701,"line_start":927,"line_end":927,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, P)","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":919543,"byte_end":919580,"line_start":922,"line_end":922,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":919585,"byte_end":919588,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":919593,"byte_end":919605,"line_start":924,"line_end":924,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":919610,"byte_end":919613,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":919618,"byte_end":919680,"line_start":926,"line_end":926,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5248},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":920079,"byte_end":920083,"line_start":941,"line_end":941,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>,\nP: PixelWithColorType","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":919945,"byte_end":919998,"line_start":938,"line_end":938,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":920003,"byte_end":920006,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":920011,"byte_end":920067,"line_start":940,"line_end":940,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":5253},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":920759,"byte_end":920775,"line_start":967,"line_end":967,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>, P: PixelWithColorType","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":920552,"byte_end":920607,"line_start":962,"line_end":962,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":920612,"byte_end":920637,"line_start":963,"line_end":963,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":920642,"byte_end":920645,"line_start":964,"line_end":964,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":920650,"byte_end":920722,"line_start":965,"line_end":965,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":920727,"byte_end":920747,"line_start":966,"line_end":966,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":5258},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":921656,"byte_end":921664,"line_start":997,"line_end":997,"column_start":12,"column_end":20},"name":"write_to","qualname":"<ImageBuffer<P, Container>>::write_to","value":"pub fn write_to<W, F>(&Self, &mut W, F) -> ImageResult<()> where\nW: std::io::Write + std::io::Seek, F: Into<ImageOutputFormat>,\nP: PixelWithColorType","parent":null,"children":[],"decl_id":null,"docs":" Writes the buffer to a writer in the specified format.","sig":null,"attributes":[{"value":"/ Writes the buffer to a writer in the specified format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":921345,"byte_end":921403,"line_start":990,"line_end":990,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":921408,"byte_end":921411,"line_start":991,"line_end":991,"column_start":5,"column_end":8}},{"value":"/ Assumes the writer is buffered. In most cases,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":921416,"byte_end":921466,"line_start":992,"line_end":992,"column_start":5,"column_end":55}},{"value":"/ you should wrap your writer in a `BufWriter` for best performance.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":921471,"byte_end":921541,"line_start":993,"line_end":993,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":921546,"byte_end":921549,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ See [`ImageOutputFormat`](../enum.ImageOutputFormat.html) for","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":921554,"byte_end":921619,"line_start":995,"line_end":995,"column_start":5,"column_end":70}},{"value":"/ supported types.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":921624,"byte_end":921644,"line_start":996,"line_end":996,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":5305},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927385,"byte_end":927388,"line_start":1194,"line_end":1194,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"pub fn new(u32, u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927195,"byte_end":927256,"line_start":1189,"line_end":1189,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927261,"byte_end":927264,"line_start":1190,"line_end":1190,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927269,"byte_end":927281,"line_start":1191,"line_end":1191,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927286,"byte_end":927289,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927294,"byte_end":927373,"line_start":1193,"line_end":1193,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":5306},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927926,"byte_end":927936,"line_start":1210,"line_end":1210,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"pub fn from_pixel(u32, u32, P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927746,"byte_end":927797,"line_start":1205,"line_end":1205,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927802,"byte_end":927805,"line_start":1206,"line_end":1206,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927810,"byte_end":927822,"line_start":1207,"line_end":1207,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927827,"byte_end":927830,"line_start":1208,"line_end":1208,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927835,"byte_end":927914,"line_start":1209,"line_end":1209,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":5307},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":928451,"byte_end":928458,"line_start":1225,"line_end":1225,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"pub fn from_fn<F>(u32, u32, F) -> ImageBuffer<P, Vec<P::Subpixel>> where\nF: FnMut(u32, u32) -> P","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":928157,"byte_end":928239,"line_start":1218,"line_end":1218,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":928244,"byte_end":928247,"line_start":1219,"line_end":1219,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":928252,"byte_end":928322,"line_start":1220,"line_end":1220,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":928327,"byte_end":928330,"line_start":1221,"line_end":1221,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":928335,"byte_end":928347,"line_start":1222,"line_end":1222,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":928352,"byte_end":928355,"line_start":1223,"line_end":1223,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":928360,"byte_end":928439,"line_start":1224,"line_end":1224,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":5309},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":928869,"byte_end":928877,"line_start":1238,"line_end":1238,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"pub fn from_vec(u32, u32, Vec<P::Subpixel>)\n-> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":928749,"byte_end":928803,"line_start":1236,"line_end":1236,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":928808,"byte_end":928857,"line_start":1237,"line_end":1237,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5310},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929164,"byte_end":929172,"line_start":1248,"line_end":1248,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"pub fn into_vec(Self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929064,"byte_end":929125,"line_start":1246,"line_end":1246,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929130,"byte_end":929152,"line_start":1247,"line_end":1247,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":5311},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929300,"byte_end":929313,"line_start":1254,"line_end":1254,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer_::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":5313}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929234,"byte_end":929289,"line_start":1253,"line_end":1253,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":5313},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929500,"byte_end":929507,"line_start":1259,"line_end":1259,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer_::ConvertBuffer::convert","value":"pub fn convert(&Self) -> T","parent":{"krate":0,"index":5311},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929323,"byte_end":929364,"line_start":1255,"line_end":1255,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929369,"byte_end":929372,"line_start":1256,"line_end":1256,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929377,"byte_end":929463,"line_start":1257,"line_end":1257,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929468,"byte_end":929492,"line_start":1258,"line_end":1258,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":5315},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929775,"byte_end":929789,"line_start":1267,"line_end":1267,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"pub fn expand_palette(Self, &[(u8, u8, u8)], Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929585,"byte_end":929645,"line_start":1264,"line_end":1264,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929650,"byte_end":929718,"line_start":1265,"line_end":1265,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929723,"byte_end":929763,"line_start":1266,"line_end":1266,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":5324},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":931839,"byte_end":931847,"line_start":1330,"line_end":1330,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer_::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":931800,"byte_end":931829,"line_start":1329,"line_end":1329,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":5325},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":931936,"byte_end":931945,"line_start":1332,"line_end":1332,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer_::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":931881,"byte_end":931926,"line_start":1331,"line_end":1331,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":5326},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":932025,"byte_end":932034,"line_start":1334,"line_end":1334,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer_::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":931980,"byte_end":932015,"line_start":1333,"line_end":1333,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":5327},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":932130,"byte_end":932144,"line_start":1336,"line_end":1336,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer_::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":932069,"byte_end":932120,"line_start":1335,"line_end":1335,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":5332},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":932756,"byte_end":932767,"line_start":1348,"line_end":1348,"column_start":10,"column_end":21},"name":"Rgb32FImage","qualname":"::buffer_::Rgb32FImage","value":"ImageBuffer<Rgb<f32>, Vec<f32>>","parent":null,"children":[],"decl_id":null,"docs":" An image buffer for 32-bit float RGB pixels,\n where the backing container is a flattened vector of floats.\n","sig":null,"attributes":[{"value":"/ An image buffer for 32-bit float RGB pixels,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":932633,"byte_end":932681,"line_start":1346,"line_end":1346,"column_start":1,"column_end":49}},{"value":"/ where the backing container is a flattened vector of floats.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":932682,"byte_end":932746,"line_start":1347,"line_end":1347,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":5333},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":932928,"byte_end":932940,"line_start":1352,"line_end":1352,"column_start":10,"column_end":22},"name":"Rgba32FImage","qualname":"::buffer_::Rgba32FImage","value":"ImageBuffer<Rgba<f32>, Vec<f32>>","parent":null,"children":[],"decl_id":null,"docs":" An image buffer for 32-bit float RGBA pixels,\n where the backing container is a flattened vector of floats.\n","sig":null,"attributes":[{"value":"/ An image buffer for 32-bit float RGBA pixels,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":932804,"byte_end":932853,"line_start":1350,"line_end":1350,"column_start":1,"column_end":50}},{"value":"/ where the backing container is a flattened vector of floats.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":932854,"byte_end":932918,"line_start":1351,"line_end":1351,"column_start":1,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7891},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942598,"byte_end":942600,"line_start":12,"line_end":12,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ColorType::L8","value":"ColorType::L8","parent":{"krate":0,"index":7890},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942565,"byte_end":942593,"line_start":11,"line_end":11,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7893},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942661,"byte_end":942664,"line_start":14,"line_end":14,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ColorType::La8","value":"ColorType::La8","parent":{"krate":0,"index":7890},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942606,"byte_end":942656,"line_start":13,"line_end":13,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7895},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942719,"byte_end":942723,"line_start":16,"line_end":16,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ColorType::Rgb8","value":"ColorType::Rgb8","parent":{"krate":0,"index":7890},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942670,"byte_end":942714,"line_start":15,"line_end":15,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7897},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942778,"byte_end":942783,"line_start":18,"line_end":18,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ColorType::Rgba8","value":"ColorType::Rgba8","parent":{"krate":0,"index":7890},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942729,"byte_end":942773,"line_start":17,"line_end":17,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7899},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942824,"byte_end":942827,"line_start":21,"line_end":21,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ColorType::L16","value":"ColorType::L16","parent":{"krate":0,"index":7890},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942790,"byte_end":942819,"line_start":20,"line_end":20,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7901},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942889,"byte_end":942893,"line_start":23,"line_end":23,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ColorType::La16","value":"ColorType::La16","parent":{"krate":0,"index":7890},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942833,"byte_end":942884,"line_start":22,"line_end":22,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7903},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942927,"byte_end":942932,"line_start":25,"line_end":25,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ColorType::Rgb16","value":"ColorType::Rgb16","parent":{"krate":0,"index":7890},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942899,"byte_end":942922,"line_start":24,"line_end":24,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7905},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942967,"byte_end":942973,"line_start":27,"line_end":27,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ColorType::Rgba16","value":"ColorType::Rgba16","parent":{"krate":0,"index":7890},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGBA","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942938,"byte_end":942962,"line_start":26,"line_end":26,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7907},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":943014,"byte_end":943020,"line_start":30,"line_end":30,"column_start":5,"column_end":11},"name":"Rgb32F","qualname":"::color::ColorType::Rgb32F","value":"ColorType::Rgb32F","parent":{"krate":0,"index":7890},"children":[],"decl_id":null,"docs":" Pixel is 32-bit float RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 32-bit float RGB","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942980,"byte_end":943009,"line_start":29,"line_end":29,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7909},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":943061,"byte_end":943068,"line_start":32,"line_end":32,"column_start":5,"column_end":12},"name":"Rgba32F","qualname":"::color::ColorType::Rgba32F","value":"ColorType::Rgba32F","parent":{"krate":0,"index":7890},"children":[],"decl_id":null,"docs":" Pixel is 32-bit float RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 32-bit float RGBA","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":943026,"byte_end":943056,"line_start":31,"line_end":31,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":7890},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942549,"byte_end":942558,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"pub enum ColorType {\n    L8,\n    La8,\n    Rgb8,\n    Rgba8,\n    L16,\n    La16,\n    Rgb16,\n    Rgba16,\n    Rgb32F,\n    Rgba32F,\n}","parent":null,"children":[{"krate":0,"index":7891},{"krate":0,"index":7893},{"krate":0,"index":7895},{"krate":0,"index":7897},{"krate":0,"index":7899},{"krate":0,"index":7901},{"krate":0,"index":7903},{"krate":0,"index":7905},{"krate":0,"index":7907},{"krate":0,"index":7909}],"decl_id":null,"docs":" An enumeration over supported color types and bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and bit depths","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942410,"byte_end":942470,"line_start":7,"line_end":7,"column_start":1,"column_end":61}},{"value":"non_exhaustive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":942522,"byte_end":942539,"line_start":9,"line_end":9,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":5363},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":943181,"byte_end":943196,"line_start":37,"line_end":37,"column_start":12,"column_end":27},"name":"bytes_per_pixel","qualname":"<ColorType>::bytes_per_pixel","value":"pub fn bytes_per_pixel(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in a pixel of `ColorType` ```c```\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in a pixel of `ColorType` ```c```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":943094,"byte_end":943169,"line_start":36,"line_end":36,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":5364},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":943627,"byte_end":943636,"line_start":51,"line_end":51,"column_start":12,"column_end":21},"name":"has_alpha","qualname":"<ColorType>::has_alpha","value":"pub fn has_alpha(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is an alpha channel.\n","sig":null,"attributes":[{"value":"/ Returns if there is an alpha channel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":943574,"byte_end":943615,"line_start":50,"line_end":50,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":5366},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":943914,"byte_end":943923,"line_start":60,"line_end":60,"column_start":12,"column_end":21},"name":"has_color","qualname":"<ColorType>::has_color","value":"pub fn has_color(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns false if the color scheme is grayscale, true otherwise.\n","sig":null,"attributes":[{"value":"/ Returns false if the color scheme is grayscale, true otherwise.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":943835,"byte_end":943902,"line_start":59,"line_end":59,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":5368},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944256,"byte_end":944270,"line_start":70,"line_end":70,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"pub fn bits_per_pixel(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be\n a multiple of 8).\n","sig":null,"attributes":[{"value":"/ Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944122,"byte_end":944218,"line_start":68,"line_end":68,"column_start":5,"column_end":101}},{"value":"/ a multiple of 8).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944223,"byte_end":944244,"line_start":69,"line_end":69,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":5369},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944433,"byte_end":944446,"line_start":75,"line_end":75,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[{"value":"/ Returns the number of color channels that make up this pixel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944357,"byte_end":944421,"line_start":74,"line_end":74,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7926},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945122,"byte_end":945124,"line_start":93,"line_end":93,"column_start":5,"column_end":7},"name":"A8","qualname":"::color::ExtendedColorType::A8","value":"ExtendedColorType::A8","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 8-bit alpha\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit alpha","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945093,"byte_end":945117,"line_start":92,"line_end":92,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7928},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945163,"byte_end":945165,"line_start":95,"line_end":95,"column_start":5,"column_end":7},"name":"L1","qualname":"::color::ExtendedColorType::L1","value":"ExtendedColorType::L1","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945130,"byte_end":945158,"line_start":94,"line_end":94,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7930},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945226,"byte_end":945229,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"La1","qualname":"::color::ExtendedColorType::La1","value":"ExtendedColorType::La1","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945171,"byte_end":945221,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7932},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945284,"byte_end":945288,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Rgb1","qualname":"::color::ExtendedColorType::Rgb1","value":"ExtendedColorType::Rgb1","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel contains 1-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 1-bit R, G and B channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945235,"byte_end":945279,"line_start":98,"line_end":98,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7934},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945343,"byte_end":945348,"line_start":101,"line_end":101,"column_start":5,"column_end":10},"name":"Rgba1","qualname":"::color::ExtendedColorType::Rgba1","value":"ExtendedColorType::Rgba1","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 1-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit RGB with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945294,"byte_end":945338,"line_start":100,"line_end":100,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7936},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945387,"byte_end":945389,"line_start":103,"line_end":103,"column_start":5,"column_end":7},"name":"L2","qualname":"::color::ExtendedColorType::L2","value":"ExtendedColorType::L2","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945354,"byte_end":945382,"line_start":102,"line_end":102,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7938},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945450,"byte_end":945453,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"La2","qualname":"::color::ExtendedColorType::La2","value":"ExtendedColorType::La2","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945395,"byte_end":945445,"line_start":104,"line_end":104,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7940},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945508,"byte_end":945512,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Rgb2","qualname":"::color::ExtendedColorType::Rgb2","value":"ExtendedColorType::Rgb2","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel contains 2-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 2-bit R, G and B channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945459,"byte_end":945503,"line_start":106,"line_end":106,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7942},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945567,"byte_end":945572,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Rgba2","qualname":"::color::ExtendedColorType::Rgba2","value":"ExtendedColorType::Rgba2","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 2-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit RGB with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945518,"byte_end":945562,"line_start":108,"line_end":108,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7944},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945611,"byte_end":945613,"line_start":111,"line_end":111,"column_start":5,"column_end":7},"name":"L4","qualname":"::color::ExtendedColorType::L4","value":"ExtendedColorType::L4","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945578,"byte_end":945606,"line_start":110,"line_end":110,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7946},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945674,"byte_end":945677,"line_start":113,"line_end":113,"column_start":5,"column_end":8},"name":"La4","qualname":"::color::ExtendedColorType::La4","value":"ExtendedColorType::La4","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945619,"byte_end":945669,"line_start":112,"line_end":112,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7948},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945732,"byte_end":945736,"line_start":115,"line_end":115,"column_start":5,"column_end":9},"name":"Rgb4","qualname":"::color::ExtendedColorType::Rgb4","value":"ExtendedColorType::Rgb4","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel contains 4-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 4-bit R, G and B channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945683,"byte_end":945727,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7950},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945791,"byte_end":945796,"line_start":117,"line_end":117,"column_start":5,"column_end":10},"name":"Rgba4","qualname":"::color::ExtendedColorType::Rgba4","value":"ExtendedColorType::Rgba4","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 4-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit RGB with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945742,"byte_end":945786,"line_start":116,"line_end":116,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7952},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945835,"byte_end":945837,"line_start":119,"line_end":119,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ExtendedColorType::L8","value":"ExtendedColorType::L8","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945802,"byte_end":945830,"line_start":118,"line_end":118,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7954},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945898,"byte_end":945901,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ExtendedColorType::La8","value":"ExtendedColorType::La8","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945843,"byte_end":945893,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7956},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945956,"byte_end":945960,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ExtendedColorType::Rgb8","value":"ExtendedColorType::Rgb8","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945907,"byte_end":945951,"line_start":122,"line_end":122,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7958},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946015,"byte_end":946020,"line_start":125,"line_end":125,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ExtendedColorType::Rgba8","value":"ExtendedColorType::Rgba8","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945966,"byte_end":946010,"line_start":124,"line_end":124,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7960},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946060,"byte_end":946063,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ExtendedColorType::L16","value":"ExtendedColorType::L16","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946026,"byte_end":946055,"line_start":126,"line_end":126,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7962},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946125,"byte_end":946129,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ExtendedColorType::La16","value":"ExtendedColorType::La16","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946069,"byte_end":946120,"line_start":128,"line_end":128,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7964},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946185,"byte_end":946190,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ExtendedColorType::Rgb16","value":"ExtendedColorType::Rgb16","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel contains 16-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 16-bit R, G and B channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946135,"byte_end":946180,"line_start":130,"line_end":130,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7966},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946246,"byte_end":946252,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ExtendedColorType::Rgba16","value":"ExtendedColorType::Rgba16","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946196,"byte_end":946241,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7968},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946307,"byte_end":946311,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ExtendedColorType::Bgr8","value":"ExtendedColorType::Bgr8","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946258,"byte_end":946302,"line_start":134,"line_end":134,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7970},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946366,"byte_end":946371,"line_start":137,"line_end":137,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ExtendedColorType::Bgra8","value":"ExtendedColorType::Bgra8","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946317,"byte_end":946361,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7972},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946435,"byte_end":946441,"line_start":141,"line_end":141,"column_start":5,"column_end":11},"name":"Rgb32F","qualname":"::color::ExtendedColorType::Rgb32F","value":"ExtendedColorType::Rgb32F","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 32-bit float RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 32-bit float RGB","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946401,"byte_end":946430,"line_start":140,"line_end":140,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7974},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946482,"byte_end":946489,"line_start":143,"line_end":143,"column_start":5,"column_end":12},"name":"Rgba32F","qualname":"::color::ExtendedColorType::Rgba32F","value":"ExtendedColorType::Rgba32F","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is 32-bit float RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 32-bit float RGBA","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946447,"byte_end":946477,"line_start":142,"line_end":142,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":7976},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946718,"byte_end":946725,"line_start":148,"line_end":148,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::color::ExtendedColorType::Unknown","value":"ExtendedColorType::Unknown(u8)","parent":{"krate":0,"index":7925},"children":[],"decl_id":null,"docs":" Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n which are associated with an external palette. In that case, the pixel value is an index\n into the palette.\n","sig":null,"attributes":[{"value":"/ Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946496,"byte_end":946590,"line_start":145,"line_end":145,"column_start":5,"column_end":99}},{"value":"/ which are associated with an external palette. In that case, the pixel value is an index","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946595,"byte_end":946687,"line_start":146,"line_end":146,"column_start":5,"column_end":97}},{"value":"/ into the palette.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946692,"byte_end":946713,"line_start":147,"line_end":147,"column_start":5,"column_end":26}}]},{"kind":"Enum","id":{"krate":0,"index":7925},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945069,"byte_end":945086,"line_start":91,"line_end":91,"column_start":10,"column_end":27},"name":"ExtendedColorType","qualname":"::color::ExtendedColorType","value":"pub enum ExtendedColorType {\n    A8,\n    L1,\n    La1,\n    Rgb1,\n    Rgba1,\n    L2,\n    La2,\n    Rgb2,\n    Rgba2,\n    L4,\n    La4,\n    Rgb4,\n    Rgba4,\n    L8,\n    La8,\n    Rgb8,\n    Rgba8,\n    L16,\n    La16,\n    Rgb16,\n    Rgba16,\n    Bgr8,\n    Bgra8,\n    Rgb32F,\n    Rgba32F,\n    Unknown(u8),\n}","parent":null,"children":[{"krate":0,"index":7926},{"krate":0,"index":7928},{"krate":0,"index":7930},{"krate":0,"index":7932},{"krate":0,"index":7934},{"krate":0,"index":7936},{"krate":0,"index":7938},{"krate":0,"index":7940},{"krate":0,"index":7942},{"krate":0,"index":7944},{"krate":0,"index":7946},{"krate":0,"index":7948},{"krate":0,"index":7950},{"krate":0,"index":7952},{"krate":0,"index":7954},{"krate":0,"index":7956},{"krate":0,"index":7958},{"krate":0,"index":7960},{"krate":0,"index":7962},{"krate":0,"index":7964},{"krate":0,"index":7966},{"krate":0,"index":7968},{"krate":0,"index":7970},{"krate":0,"index":7972},{"krate":0,"index":7974},{"krate":0,"index":7976}],"decl_id":null,"docs":" An enumeration of color types encountered in image formats.","sig":null,"attributes":[{"value":"/ An enumeration of color types encountered in image formats.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944544,"byte_end":944607,"line_start":81,"line_end":81,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944608,"byte_end":944611,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ This is not exhaustive over all existing image formats but should be granular enough to allow","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944612,"byte_end":944709,"line_start":83,"line_end":83,"column_start":1,"column_end":98}},{"value":"/ round tripping of decoding and encoding as much as possible. The variants will be extended as","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944710,"byte_end":944807,"line_start":84,"line_end":84,"column_start":1,"column_end":98}},{"value":"/ necessary to enable this.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944808,"byte_end":944837,"line_start":85,"line_end":85,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944838,"byte_end":944841,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ Another purpose is to advise users of a rough estimate of the accuracy and effort of the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944842,"byte_end":944934,"line_start":87,"line_end":87,"column_start":1,"column_end":93}},{"value":"/ decoding from and encoding to such an image format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":944935,"byte_end":944990,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"non_exhaustive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":945042,"byte_end":945059,"line_start":90,"line_end":90,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":5371},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946977,"byte_end":946990,"line_start":156,"line_end":156,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ExtendedColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of channels for colors of this type.","sig":null,"attributes":[{"value":"/ Get the number of channels for colors of this type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946763,"byte_end":946818,"line_start":152,"line_end":152,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946823,"byte_end":946826,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ Note that the `Unknown` variant returns a value of `1` since pixels can only be treated as","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946831,"byte_end":946925,"line_start":154,"line_end":154,"column_start":5,"column_end":99}},{"value":"/ an opaque datum by the library.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946930,"byte_end":946965,"line_start":155,"line_end":155,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":8182},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":952984,"byte_end":952987,"line_start":363,"line_end":363,"column_start":16,"column_end":19},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":" RGB colors.","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":949041,"byte_end":949051,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":949052,"byte_end":949074,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":8211},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":953075,"byte_end":953079,"line_start":365,"line_end":365,"column_start":16,"column_end":20},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":" Grayscale colors.\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":949041,"byte_end":949051,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":949052,"byte_end":949074,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":8240},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":953162,"byte_end":953166,"line_start":367,"line_end":367,"column_start":16,"column_end":20},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":" RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":949041,"byte_end":949051,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":949052,"byte_end":949074,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":8269},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":953270,"byte_end":953275,"line_start":369,"line_end":369,"column_start":16,"column_end":21},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":" Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":949041,"byte_end":949051,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":949052,"byte_end":949074,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":5375},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":953430,"byte_end":953443,"line_start":373,"line_end":373,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::color::FromPrimitive","value":"FromPrimitive<Component>","parent":null,"children":[{"krate":0,"index":5377}],"decl_id":null,"docs":" Convert from one pixel component type to another. For example, convert from `u8` to `f32` pixel values.\n","sig":null,"attributes":[{"value":"/ Convert from one pixel component type to another. For example, convert from `u8` to `f32` pixel values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":953312,"byte_end":953419,"line_start":372,"line_end":372,"column_start":1,"column_end":108}}]},{"kind":"Method","id":{"krate":0,"index":5377},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":953525,"byte_end":953539,"line_start":375,"line_end":375,"column_start":8,"column_end":22},"name":"from_primitive","qualname":"::color::FromPrimitive::from_primitive","value":"pub fn from_primitive(Component) -> Self","parent":{"krate":0,"index":5375},"children":[],"decl_id":null,"docs":" Converts from any pixel component type to this type.\n","sig":null,"attributes":[{"value":"/ Converts from any pixel component type to this type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":953461,"byte_end":953517,"line_start":374,"line_end":374,"column_start":5,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":5395},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":955361,"byte_end":955370,"line_start":441,"line_end":441,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":5397}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":955289,"byte_end":955350,"line_start":440,"line_end":440,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":5397},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":955460,"byte_end":955470,"line_start":443,"line_end":443,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"pub fn from_color(&mut Self, &Other)","parent":{"krate":0,"index":5395},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":955384,"byte_end":955452,"line_start":442,"line_end":442,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8299},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972928,"byte_end":972938,"line_start":57,"line_end":57,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":8298},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972881,"byte_end":972923,"line_start":56,"line_end":56,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8302},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973014,"byte_end":973025,"line_start":60,"line_end":60,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":8298},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972956,"byte_end":973009,"line_start":59,"line_end":59,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8305},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973094,"byte_end":973103,"line_start":63,"line_end":63,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":8298},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973048,"byte_end":973089,"line_start":62,"line_end":62,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8308},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973177,"byte_end":973187,"line_start":66,"line_end":66,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":8298},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973120,"byte_end":973172,"line_start":65,"line_end":65,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8311},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973253,"byte_end":973264,"line_start":69,"line_end":69,"column_start":5,"column_end":16},"name":"ImageLuma16","qualname":"::dynimage::DynamicImage::ImageLuma16","value":"DynamicImage::ImageLuma16(Gray16Image)","parent":{"krate":0,"index":8298},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973205,"byte_end":973248,"line_start":68,"line_end":68,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8314},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973343,"byte_end":973355,"line_start":72,"line_end":72,"column_start":5,"column_end":17},"name":"ImageLumaA16","qualname":"::dynimage::DynamicImage::ImageLumaA16","value":"DynamicImage::ImageLumaA16(GrayAlpha16Image)","parent":{"krate":0,"index":8298},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma with alpha","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973284,"byte_end":973338,"line_start":71,"line_end":71,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8317},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973427,"byte_end":973437,"line_start":75,"line_end":75,"column_start":5,"column_end":15},"name":"ImageRgb16","qualname":"::dynimage::DynamicImage::ImageRgb16","value":"DynamicImage::ImageRgb16(Rgb16Image)","parent":{"krate":0,"index":8298},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973380,"byte_end":973422,"line_start":74,"line_end":74,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8320},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973514,"byte_end":973525,"line_start":78,"line_end":78,"column_start":5,"column_end":16},"name":"ImageRgba16","qualname":"::dynimage::DynamicImage::ImageRgba16","value":"DynamicImage::ImageRgba16(Rgba16Image)","parent":{"krate":0,"index":8298},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb with alpha","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973456,"byte_end":973509,"line_start":77,"line_end":77,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8323},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973598,"byte_end":973609,"line_start":81,"line_end":81,"column_start":5,"column_end":16},"name":"ImageRgb32F","qualname":"::dynimage::DynamicImage::ImageRgb32F","value":"DynamicImage::ImageRgb32F(Rgb32FImage)","parent":{"krate":0,"index":8298},"children":[],"decl_id":null,"docs":" Each pixel in this image is 32-bit float Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 32-bit float Rgb","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973545,"byte_end":973593,"line_start":80,"line_end":80,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8326},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973693,"byte_end":973705,"line_start":84,"line_end":84,"column_start":5,"column_end":17},"name":"ImageRgba32F","qualname":"::dynimage::DynamicImage::ImageRgba32F","value":"DynamicImage::ImageRgba32F(Rgba32FImage)","parent":{"krate":0,"index":8298},"children":[],"decl_id":null,"docs":" Each pixel in this image is 32-bit float Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 32-bit float Rgb with alpha","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":973629,"byte_end":973688,"line_start":83,"line_end":83,"column_start":5,"column_end":64}}]},{"kind":"Enum","id":{"krate":0,"index":8298},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972862,"byte_end":972874,"line_start":55,"line_end":55,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"pub enum DynamicImage {\n    ImageLuma8(GrayImage),\n    ImageLumaA8(GrayAlphaImage),\n    ImageRgb8(RgbImage),\n    ImageRgba8(RgbaImage),\n    ImageLuma16(Gray16Image),\n    ImageLumaA16(GrayAlpha16Image),\n    ImageRgb16(Rgb16Image),\n    ImageRgba16(Rgba16Image),\n    ImageRgb32F(Rgb32FImage),\n    ImageRgba32F(Rgba32FImage),\n}","parent":null,"children":[{"krate":0,"index":8299},{"krate":0,"index":8302},{"krate":0,"index":8305},{"krate":0,"index":8308},{"krate":0,"index":8311},{"krate":0,"index":8314},{"krate":0,"index":8317},{"krate":0,"index":8320},{"krate":0,"index":8323},{"krate":0,"index":8326}],"decl_id":null,"docs":" A Dynamic Image","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":971847,"byte_end":971866,"line_start":30,"line_end":30,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":971867,"byte_end":971870,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ This represents a _matrix_ of _pixels_ which are _convertible_ from and to an _RGBA_","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":971871,"byte_end":971959,"line_start":32,"line_end":32,"column_start":1,"column_end":89}},{"value":"/ representation. More variants that adhere to these principles may get added in the future, in","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":971960,"byte_end":972057,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ particular to cover other combinations typically used.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972058,"byte_end":972116,"line_start":34,"line_end":34,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972117,"byte_end":972120,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972121,"byte_end":972132,"line_start":36,"line_end":36,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972133,"byte_end":972136,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ This type can act as a converter between specific `ImageBuffer` instances.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972137,"byte_end":972215,"line_start":38,"line_end":38,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972216,"byte_end":972219,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972220,"byte_end":972227,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/ use image::{DynamicImage, GrayImage, RgbImage};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972228,"byte_end":972279,"line_start":41,"line_end":41,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972280,"byte_end":972283,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let rgb: RgbImage = RgbImage::new(10, 10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972284,"byte_end":972330,"line_start":43,"line_end":43,"column_start":1,"column_end":47}},{"value":"/ let luma: GrayImage = DynamicImage::ImageRgb8(rgb).into_luma8();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972331,"byte_end":972399,"line_start":44,"line_end":44,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972400,"byte_end":972407,"line_start":45,"line_end":45,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972408,"byte_end":972411,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Design","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972412,"byte_end":972424,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972425,"byte_end":972428,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ There is no goal to provide an all-encompassing type with all possible memory layouts. This","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972429,"byte_end":972524,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ would hardly be feasible as a simple enum, due to the sheer number of combinations of channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972525,"byte_end":972622,"line_start":50,"line_end":50,"column_start":1,"column_end":98}},{"value":"/ kinds, channel order, and bit depth. Rather, this type provides an opinionated selection with","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972623,"byte_end":972720,"line_start":51,"line_end":51,"column_start":1,"column_end":98}},{"value":"/ normalized channel order which can store common pixel values without loss.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972721,"byte_end":972799,"line_start":52,"line_end":52,"column_start":1,"column_end":79}},{"value":"non_exhaustive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":972835,"byte_end":972852,"line_start":54,"line_end":54,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":5639},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":975340,"byte_end":975349,"line_start":122,"line_end":122,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"pub fn new_luma8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of gray pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of gray pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":975266,"byte_end":975328,"line_start":121,"line_end":121,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5640},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":975552,"byte_end":975563,"line_start":128,"line_end":128,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"pub fn new_luma_a8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of gray\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of gray","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":975452,"byte_end":975506,"line_start":126,"line_end":126,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":975511,"byte_end":975540,"line_start":127,"line_end":127,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5641},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":975740,"byte_end":975748,"line_start":133,"line_end":133,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"pub fn new_rgb8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":975667,"byte_end":975728,"line_start":132,"line_end":132,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5642},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":975924,"byte_end":975933,"line_start":138,"line_end":138,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"pub fn new_rgba8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":975850,"byte_end":975912,"line_start":137,"line_end":137,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5643},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":976110,"byte_end":976120,"line_start":143,"line_end":143,"column_start":12,"column_end":22},"name":"new_luma16","qualname":"<DynamicImage>::new_luma16","value":"pub fn new_luma16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of gray pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of gray pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":976036,"byte_end":976098,"line_start":142,"line_end":142,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5644},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":976324,"byte_end":976336,"line_start":149,"line_end":149,"column_start":12,"column_end":24},"name":"new_luma_a16","qualname":"<DynamicImage>::new_luma_a16","value":"pub fn new_luma_a16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of gray\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of gray","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":976224,"byte_end":976278,"line_start":147,"line_end":147,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":976283,"byte_end":976312,"line_start":148,"line_end":148,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5645},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":976514,"byte_end":976523,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"new_rgb16","qualname":"<DynamicImage>::new_rgb16","value":"pub fn new_rgb16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":976441,"byte_end":976502,"line_start":153,"line_end":153,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5646},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":976700,"byte_end":976710,"line_start":159,"line_end":159,"column_start":12,"column_end":22},"name":"new_rgba16","qualname":"<DynamicImage>::new_rgba16","value":"pub fn new_rgba16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":976626,"byte_end":976688,"line_start":158,"line_end":158,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5647},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":976887,"byte_end":976897,"line_start":164,"line_end":164,"column_start":12,"column_end":22},"name":"new_rgb32f","qualname":"<DynamicImage>::new_rgb32f","value":"pub fn new_rgb32f(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":976814,"byte_end":976875,"line_start":163,"line_end":163,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5648},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977075,"byte_end":977086,"line_start":169,"line_end":169,"column_start":12,"column_end":23},"name":"new_rgba32f","qualname":"<DynamicImage>::new_rgba32f","value":"pub fn new_rgba32f(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977001,"byte_end":977063,"line_start":168,"line_end":168,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":5649},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977253,"byte_end":977265,"line_start":174,"line_end":174,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"pub fn from_decoder<'a,\n                    impl ImageDecoder<'a>: ImageDecoder>(impl ImageDecoder<'a>)\n-> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[{"value":"/ Decodes an encoded image into a dynamic image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977191,"byte_end":977241,"line_start":173,"line_end":173,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5652},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977431,"byte_end":977438,"line_start":179,"line_end":179,"column_start":12,"column_end":19},"name":"to_rgb8","qualname":"<DynamicImage>::to_rgb8","value":"pub fn to_rgb8(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977370,"byte_end":977419,"line_start":178,"line_end":178,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5653},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977581,"byte_end":977589,"line_start":184,"line_end":184,"column_start":12,"column_end":20},"name":"to_rgb16","qualname":"<DynamicImage>::to_rgb16","value":"pub fn to_rgb16(&Self) -> Rgb16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977520,"byte_end":977569,"line_start":183,"line_end":183,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5654},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977734,"byte_end":977743,"line_start":189,"line_end":189,"column_start":12,"column_end":21},"name":"to_rgb32f","qualname":"<DynamicImage>::to_rgb32f","value":"pub fn to_rgb32f(&Self) -> Rgb32FImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977673,"byte_end":977722,"line_start":188,"line_end":188,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5655},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977890,"byte_end":977898,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"to_rgba8","qualname":"<DynamicImage>::to_rgba8","value":"pub fn to_rgba8(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977828,"byte_end":977878,"line_start":193,"line_end":193,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5656},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978043,"byte_end":978052,"line_start":199,"line_end":199,"column_start":12,"column_end":21},"name":"to_rgba16","qualname":"<DynamicImage>::to_rgba16","value":"pub fn to_rgba16(&Self) -> Rgba16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":977981,"byte_end":978031,"line_start":198,"line_end":198,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5657},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978199,"byte_end":978209,"line_start":204,"line_end":204,"column_start":12,"column_end":22},"name":"to_rgba32f","qualname":"<DynamicImage>::to_rgba32f","value":"pub fn to_rgba32f(&Self) -> Rgba32FImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978137,"byte_end":978187,"line_start":203,"line_end":203,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5658},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978356,"byte_end":978364,"line_start":209,"line_end":209,"column_start":12,"column_end":20},"name":"to_luma8","qualname":"<DynamicImage>::to_luma8","value":"pub fn to_luma8(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978295,"byte_end":978344,"line_start":208,"line_end":208,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5659},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978508,"byte_end":978517,"line_start":214,"line_end":214,"column_start":12,"column_end":21},"name":"to_luma16","qualname":"<DynamicImage>::to_luma16","value":"pub fn to_luma16(&Self) -> Gray16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978447,"byte_end":978496,"line_start":213,"line_end":213,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5660},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978663,"byte_end":978673,"line_start":219,"line_end":219,"column_start":12,"column_end":22},"name":"to_luma32f","qualname":"<DynamicImage>::to_luma32f","value":"pub fn to_luma32f(&Self) -> ImageBuffer<Luma<f32>, Vec<f32>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978602,"byte_end":978651,"line_start":218,"line_end":218,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5661},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978841,"byte_end":978855,"line_start":224,"line_end":224,"column_start":12,"column_end":26},"name":"to_luma_alpha8","qualname":"<DynamicImage>::to_luma_alpha8","value":"pub fn to_luma_alpha8(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978779,"byte_end":978829,"line_start":223,"line_end":223,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5662},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979005,"byte_end":979020,"line_start":229,"line_end":229,"column_start":12,"column_end":27},"name":"to_luma_alpha16","qualname":"<DynamicImage>::to_luma_alpha16","value":"pub fn to_luma_alpha16(&Self) -> GrayAlpha16Image","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":978943,"byte_end":978993,"line_start":228,"line_end":228,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5663},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979172,"byte_end":979188,"line_start":234,"line_end":234,"column_start":12,"column_end":28},"name":"to_luma_alpha32f","qualname":"<DynamicImage>::to_luma_alpha32f","value":"pub fn to_luma_alpha32f(&Self) -> ImageBuffer<LumaA<f32>, Vec<f32>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979110,"byte_end":979160,"line_start":233,"line_end":233,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5664},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979474,"byte_end":979483,"line_start":242,"line_end":242,"column_start":12,"column_end":21},"name":"into_rgb8","qualname":"<DynamicImage>::into_rgb8","value":"pub fn into_rgb8(Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979295,"byte_end":979341,"line_start":238,"line_end":238,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979346,"byte_end":979349,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979354,"byte_end":979424,"line_start":240,"line_end":240,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979429,"byte_end":979462,"line_start":241,"line_end":241,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5665},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979800,"byte_end":979810,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"into_rgb16","qualname":"<DynamicImage>::into_rgb16","value":"pub fn into_rgb16(Self) -> Rgb16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979621,"byte_end":979667,"line_start":249,"line_end":249,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979672,"byte_end":979675,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979680,"byte_end":979750,"line_start":251,"line_end":251,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979755,"byte_end":979788,"line_start":252,"line_end":252,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5666},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980131,"byte_end":980142,"line_start":264,"line_end":264,"column_start":12,"column_end":23},"name":"into_rgb32f","qualname":"<DynamicImage>::into_rgb32f","value":"pub fn into_rgb32f(Self) -> Rgb32FImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":979952,"byte_end":979998,"line_start":260,"line_end":260,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980003,"byte_end":980006,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980011,"byte_end":980081,"line_start":262,"line_end":262,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980086,"byte_end":980119,"line_start":263,"line_end":263,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5667},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980467,"byte_end":980477,"line_start":275,"line_end":275,"column_start":12,"column_end":22},"name":"into_rgba8","qualname":"<DynamicImage>::into_rgba8","value":"pub fn into_rgba8(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980287,"byte_end":980334,"line_start":271,"line_end":271,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980339,"byte_end":980342,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980347,"byte_end":980417,"line_start":273,"line_end":273,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980422,"byte_end":980455,"line_start":274,"line_end":274,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5668},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980798,"byte_end":980809,"line_start":286,"line_end":286,"column_start":12,"column_end":23},"name":"into_rgba16","qualname":"<DynamicImage>::into_rgba16","value":"pub fn into_rgba16(Self) -> Rgba16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980618,"byte_end":980665,"line_start":282,"line_end":282,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980670,"byte_end":980673,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980678,"byte_end":980748,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980753,"byte_end":980786,"line_start":285,"line_end":285,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5669},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981134,"byte_end":981146,"line_start":297,"line_end":297,"column_start":12,"column_end":24},"name":"into_rgba32f","qualname":"<DynamicImage>::into_rgba32f","value":"pub fn into_rgba32f(Self) -> Rgba32FImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":980954,"byte_end":981001,"line_start":293,"line_end":293,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981006,"byte_end":981009,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981014,"byte_end":981084,"line_start":295,"line_end":295,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981089,"byte_end":981122,"line_start":296,"line_end":296,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5670},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981474,"byte_end":981484,"line_start":308,"line_end":308,"column_start":12,"column_end":22},"name":"into_luma8","qualname":"<DynamicImage>::into_luma8","value":"pub fn into_luma8(Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981294,"byte_end":981341,"line_start":304,"line_end":304,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981346,"byte_end":981349,"line_start":305,"line_end":305,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981354,"byte_end":981424,"line_start":306,"line_end":306,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981429,"byte_end":981462,"line_start":307,"line_end":307,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5671},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981805,"byte_end":981816,"line_start":319,"line_end":319,"column_start":12,"column_end":23},"name":"into_luma16","qualname":"<DynamicImage>::into_luma16","value":"pub fn into_luma16(Self) -> Gray16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981625,"byte_end":981672,"line_start":315,"line_end":315,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981677,"byte_end":981680,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981685,"byte_end":981755,"line_start":317,"line_end":317,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981760,"byte_end":981793,"line_start":318,"line_end":318,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5672},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982142,"byte_end":982158,"line_start":330,"line_end":330,"column_start":12,"column_end":28},"name":"into_luma_alpha8","qualname":"<DynamicImage>::into_luma_alpha8","value":"pub fn into_luma_alpha8(Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":981961,"byte_end":982009,"line_start":326,"line_end":326,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982014,"byte_end":982017,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982022,"byte_end":982092,"line_start":328,"line_end":328,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982097,"byte_end":982130,"line_start":329,"line_end":329,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5673},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982492,"byte_end":982509,"line_start":341,"line_end":341,"column_start":12,"column_end":29},"name":"into_luma_alpha16","qualname":"<DynamicImage>::into_luma_alpha16","value":"pub fn into_luma_alpha16(Self) -> GrayAlpha16Image","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982311,"byte_end":982359,"line_start":337,"line_end":337,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982364,"byte_end":982367,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982372,"byte_end":982442,"line_start":339,"line_end":339,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982447,"byte_end":982480,"line_start":340,"line_end":340,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5674},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982896,"byte_end":982900,"line_start":352,"line_end":352,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"pub fn crop(&mut Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982666,"byte_end":982737,"line_start":348,"line_end":348,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982742,"byte_end":982745,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ Note: this method does *not* modify the object,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982750,"byte_end":982801,"line_start":350,"line_end":350,"column_start":5,"column_end":56}},{"value":"/ and its signature will be replaced with `crop_imm()`'s in the 0.24 release","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":982806,"byte_end":982884,"line_start":351,"line_end":351,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":5675},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":983157,"byte_end":983165,"line_start":357,"line_end":357,"column_start":12,"column_end":20},"name":"crop_imm","qualname":"<DynamicImage>::crop_imm","value":"pub fn crop_imm(&Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":983074,"byte_end":983145,"line_start":356,"line_end":356,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":5676},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":983390,"byte_end":983397,"line_start":362,"line_end":362,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"pub fn as_rgb8(&Self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":983335,"byte_end":983378,"line_start":361,"line_end":361,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":5677},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":983612,"byte_end":983623,"line_start":370,"line_end":370,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"pub fn as_mut_rgb8(&mut Self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":983549,"byte_end":983600,"line_start":369,"line_end":369,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":5678},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":983843,"byte_end":983851,"line_start":378,"line_end":378,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"pub fn as_rgba8(&Self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":983787,"byte_end":983831,"line_start":377,"line_end":377,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":5679},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":984069,"byte_end":984081,"line_start":386,"line_end":386,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"pub fn as_mut_rgba8(&mut Self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":984005,"byte_end":984057,"line_start":385,"line_end":385,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":5680},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":984308,"byte_end":984316,"line_start":394,"line_end":394,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"pub fn as_luma8(&Self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":984247,"byte_end":984296,"line_start":393,"line_end":393,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5681},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":984539,"byte_end":984551,"line_start":402,"line_end":402,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"pub fn as_mut_luma8(&mut Self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":984470,"byte_end":984527,"line_start":401,"line_end":401,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":5682},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":984800,"byte_end":984814,"line_start":410,"line_end":410,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"pub fn as_luma_alpha8(&Self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":984717,"byte_end":984788,"line_start":409,"line_end":409,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":5683},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":985065,"byte_end":985083,"line_start":418,"line_end":418,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"pub fn as_mut_luma_alpha8(&mut Self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":984974,"byte_end":985053,"line_start":417,"line_end":417,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":5684},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":985311,"byte_end":985319,"line_start":426,"line_end":426,"column_start":12,"column_end":20},"name":"as_rgb16","qualname":"<DynamicImage>::as_rgb16","value":"pub fn as_rgb16(&Self) -> Option<&Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":985255,"byte_end":985299,"line_start":425,"line_end":425,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":5685},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":985538,"byte_end":985550,"line_start":434,"line_end":434,"column_start":12,"column_end":24},"name":"as_mut_rgb16","qualname":"<DynamicImage>::as_mut_rgb16","value":"pub fn as_mut_rgb16(&mut Self) -> Option<&mut Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGB image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":985474,"byte_end":985526,"line_start":433,"line_end":433,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":5686},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":985774,"byte_end":985783,"line_start":442,"line_end":442,"column_start":12,"column_end":21},"name":"as_rgba16","qualname":"<DynamicImage>::as_rgba16","value":"pub fn as_rgba16(&Self) -> Option<&Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGBA image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":985717,"byte_end":985762,"line_start":441,"line_end":441,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":5687},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":986005,"byte_end":986018,"line_start":450,"line_end":450,"column_start":12,"column_end":25},"name":"as_mut_rgba16","qualname":"<DynamicImage>::as_mut_rgba16","value":"pub fn as_mut_rgba16(&mut Self) -> Option<&mut Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":985940,"byte_end":985993,"line_start":449,"line_end":449,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":5688},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":986243,"byte_end":986252,"line_start":458,"line_end":458,"column_start":12,"column_end":21},"name":"as_rgb32f","qualname":"<DynamicImage>::as_rgb32f","value":"pub fn as_rgb32f(&Self) -> Option<&Rgb32FImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":986187,"byte_end":986231,"line_start":457,"line_end":457,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":5689},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":986473,"byte_end":986486,"line_start":466,"line_end":466,"column_start":12,"column_end":25},"name":"as_mut_rgb32f","qualname":"<DynamicImage>::as_mut_rgb32f","value":"pub fn as_mut_rgb32f(&mut Self) -> Option<&mut Rgb32FImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 32bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 32bit RGB image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":986409,"byte_end":986461,"line_start":465,"line_end":465,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":5690},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":986712,"byte_end":986722,"line_start":474,"line_end":474,"column_start":12,"column_end":22},"name":"as_rgba32f","qualname":"<DynamicImage>::as_rgba32f","value":"pub fn as_rgba32f(&Self) -> Option<&Rgba32FImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 32bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 32bit RGBA image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":986655,"byte_end":986700,"line_start":473,"line_end":473,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":5691},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":986946,"byte_end":986960,"line_start":482,"line_end":482,"column_start":12,"column_end":26},"name":"as_mut_rgba32f","qualname":"<DynamicImage>::as_mut_rgba32f","value":"pub fn as_mut_rgba32f(&mut Self) -> Option<&mut Rgba32FImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":986881,"byte_end":986934,"line_start":481,"line_end":481,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":5692},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":987193,"byte_end":987202,"line_start":490,"line_end":490,"column_start":12,"column_end":21},"name":"as_luma16","qualname":"<DynamicImage>::as_luma16","value":"pub fn as_luma16(&Self) -> Option<&Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":987131,"byte_end":987181,"line_start":489,"line_end":489,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":5693},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":987429,"byte_end":987442,"line_start":498,"line_end":498,"column_start":12,"column_end":25},"name":"as_mut_luma16","qualname":"<DynamicImage>::as_mut_luma16","value":"pub fn as_mut_luma16(&mut Self) -> Option<&mut Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":987359,"byte_end":987417,"line_start":497,"line_end":497,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":5694},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":987695,"byte_end":987710,"line_start":506,"line_end":506,"column_start":12,"column_end":27},"name":"as_luma_alpha16","qualname":"<DynamicImage>::as_luma_alpha16","value":"pub fn as_luma_alpha16(&Self) -> Option<&GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":987611,"byte_end":987683,"line_start":505,"line_end":505,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":5695},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":987965,"byte_end":987984,"line_start":514,"line_end":514,"column_start":12,"column_end":31},"name":"as_mut_luma_alpha16","qualname":"<DynamicImage>::as_mut_luma_alpha16","value":"pub fn as_mut_luma_alpha16(&mut Self) -> Option<&mut GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":987873,"byte_end":987953,"line_start":513,"line_end":513,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5696},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":988243,"byte_end":988261,"line_start":522,"line_end":522,"column_start":12,"column_end":30},"name":"as_flat_samples_u8","qualname":"<DynamicImage>::as_flat_samples_u8","value":"pub fn as_flat_samples_u8(&Self) -> Option<FlatSamples<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 8 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 8 bit per channel images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":988159,"byte_end":988231,"line_start":521,"line_end":521,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":5697},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":988748,"byte_end":988767,"line_start":533,"line_end":533,"column_start":12,"column_end":31},"name":"as_flat_samples_u16","qualname":"<DynamicImage>::as_flat_samples_u16","value":"pub fn as_flat_samples_u16(&Self) -> Option<FlatSamples<&[u16]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 16 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 16 bit per channel images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":988663,"byte_end":988736,"line_start":532,"line_end":532,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":5698},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":989258,"byte_end":989277,"line_start":544,"line_end":544,"column_start":12,"column_end":31},"name":"as_flat_samples_f32","qualname":"<DynamicImage>::as_flat_samples_f32","value":"pub fn as_flat_samples_f32(&Self) -> Option<FlatSamples<&[f32]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 32bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 32bit per channel images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":989174,"byte_end":989246,"line_start":543,"line_end":543,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":5699},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":989608,"byte_end":989616,"line_start":553,"line_end":553,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<DynamicImage>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a native endian byte slice.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a native endian byte slice.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":989535,"byte_end":989596,"line_start":552,"line_end":552,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":5701},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":990329,"byte_end":990339,"line_start":571,"line_end":571,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<DynamicImage>::into_bytes","value":"pub fn into_bytes(Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector. If the `ImageBuffer`\n container is `Vec<u8>`, this operation is free. Otherwise, a copy\n is returned.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector. If the `ImageBuffer`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":990153,"byte_end":990222,"line_start":568,"line_end":568,"column_start":5,"column_end":74}},{"value":"/ container is `Vec<u8>`, this operation is free. Otherwise, a copy","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":990227,"byte_end":990296,"line_start":569,"line_end":569,"column_start":5,"column_end":74}},{"value":"/ is returned.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":990301,"byte_end":990317,"line_start":570,"line_end":570,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":5702},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":990861,"byte_end":990869,"line_start":584,"line_end":584,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<DynamicImage>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return a copy of this image's pixels as a byte vector.\n Deprecated, because it does nothing but hide an expensive clone operation.\n","sig":null,"attributes":[{"value":"/ Return a copy of this image's pixels as a byte vector.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":990576,"byte_end":990634,"line_start":578,"line_end":578,"column_start":5,"column_end":63}},{"value":"/ Deprecated, because it does nothing but hide an expensive clone operation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":990639,"byte_end":990717,"line_start":579,"line_end":579,"column_start":5,"column_end":83}},{"value":"deprecated(since = \"0.24.0\", note =\n             \"use `image.into_bytes()` or `image.as_bytes().to_vec()` instead\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":990722,"byte_end":990849,"line_start":580,"line_end":583,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":5703},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":990981,"byte_end":990986,"line_start":589,"line_end":589,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"pub fn color(&Self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":990934,"byte_end":990969,"line_start":588,"line_end":588,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":5704},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":991798,"byte_end":991803,"line_start":605,"line_end":605,"column_start":12,"column_end":17},"name":"width","qualname":"<DynamicImage>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the width of the underlying image\n","sig":null,"attributes":[{"value":"/ Returns the width of the underlying image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":991741,"byte_end":991786,"line_start":604,"line_end":604,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":5705},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":991940,"byte_end":991946,"line_start":610,"line_end":610,"column_start":12,"column_end":18},"name":"height","qualname":"<DynamicImage>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the height of the underlying image\n","sig":null,"attributes":[{"value":"/ Returns the height of the underlying image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":991882,"byte_end":991928,"line_start":609,"line_end":609,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":5706},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":992218,"byte_end":992227,"line_start":617,"line_end":617,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"pub fn grayscale(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n Returns `Luma` images in most cases. However, for `f32` images,\n this will return a grayscale `Rgb/Rgba` image instead.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":992026,"byte_end":992071,"line_start":614,"line_end":614,"column_start":5,"column_end":50}},{"value":"/ Returns `Luma` images in most cases. However, for `f32` images,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":992076,"byte_end":992143,"line_start":615,"line_end":615,"column_start":5,"column_end":72}},{"value":"/ this will return a grayscale `Rgb/Rgba` image instead.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":992148,"byte_end":992206,"line_start":616,"line_end":616,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":5707},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":993580,"byte_end":993586,"line_start":646,"line_end":646,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"pub fn invert(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":993494,"byte_end":993530,"line_start":644,"line_end":644,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":993535,"byte_end":993568,"line_start":645,"line_end":645,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":5708},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":993941,"byte_end":993947,"line_start":654,"line_end":654,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"pub fn resize(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by `nwidth` and `nheight`.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":993672,"byte_end":993731,"line_start":650,"line_end":650,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":993736,"byte_end":993799,"line_start":651,"line_end":651,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":993804,"byte_end":993866,"line_start":652,"line_end":652,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by `nwidth` and `nheight`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":993871,"byte_end":993929,"line_start":653,"line_end":653,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":5709},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":994403,"byte_end":994415,"line_start":664,"line_end":664,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"pub fn resize_exact(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n `nwidth` and `nheight` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":994209,"byte_end":994268,"line_start":661,"line_end":661,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":994273,"byte_end":994329,"line_start":662,"line_end":662,"column_start":5,"column_end":61}},{"value":"/ `nwidth` and `nheight` are the new image's dimensions","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":994334,"byte_end":994391,"line_start":663,"line_end":663,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":5710},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995098,"byte_end":995107,"line_start":681,"line_end":681,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"pub fn thumbnail(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by `nwidth` and `nheight`.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":994631,"byte_end":994687,"line_start":673,"line_end":673,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":994692,"byte_end":994755,"line_start":674,"line_end":674,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":994760,"byte_end":994822,"line_start":675,"line_end":675,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by `nwidth` and `nheight`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":994827,"byte_end":994885,"line_start":676,"line_end":676,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":994890,"byte_end":994893,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":994898,"byte_end":994961,"line_start":678,"line_end":678,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":994966,"byte_end":995016,"line_start":679,"line_end":679,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995021,"byte_end":995086,"line_start":680,"line_end":680,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":5711},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995707,"byte_end":995722,"line_start":693,"line_end":693,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"pub fn thumbnail_exact(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n `nwidth` and `nheight` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995333,"byte_end":995378,"line_start":687,"line_end":687,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995383,"byte_end":995439,"line_start":688,"line_end":688,"column_start":5,"column_end":61}},{"value":"/ `nwidth` and `nheight` are the new image's dimensions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995444,"byte_end":995502,"line_start":689,"line_end":689,"column_start":5,"column_end":63}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995507,"byte_end":995570,"line_start":690,"line_end":690,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995575,"byte_end":995625,"line_start":691,"line_end":691,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995630,"byte_end":995695,"line_start":692,"line_end":692,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":5712},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":996234,"byte_end":996248,"line_start":703,"line_end":703,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"pub fn resize_to_fill(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by `nwidth` and `nheight`, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995864,"byte_end":995923,"line_start":697,"line_end":697,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995928,"byte_end":995991,"line_start":698,"line_end":698,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":995996,"byte_end":996058,"line_start":699,"line_end":699,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":996063,"byte_end":996125,"line_start":700,"line_end":700,"column_start":5,"column_end":67}},{"value":"/ specified by `nwidth` and `nheight`, then cropped to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":996130,"byte_end":996186,"line_start":701,"line_end":701,"column_start":5,"column_end":61}},{"value":"/ fit within the other bound.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":996191,"byte_end":996222,"line_start":702,"line_end":702,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":5713},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997064,"byte_end":997068,"line_start":726,"line_end":726,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"pub fn blur(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n `sigma` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":996956,"byte_end":996999,"line_start":724,"line_end":724,"column_start":5,"column_end":48}},{"value":"/ `sigma` is a measure of how much to blur by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997004,"byte_end":997052,"line_start":725,"line_end":725,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":5714},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997438,"byte_end":997447,"line_start":735,"line_end":735,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"pub fn unsharpen(&Self, f32, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n `sigma` is the amount to blur the image by.\n `threshold` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997180,"byte_end":997225,"line_start":730,"line_end":730,"column_start":5,"column_end":50}},{"value":"/ `sigma` is the amount to blur the image by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997230,"byte_end":997277,"line_start":731,"line_end":731,"column_start":5,"column_end":52}},{"value":"/ `threshold` is a control of how much to sharpen.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997282,"byte_end":997334,"line_start":732,"line_end":732,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997339,"byte_end":997342,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997347,"byte_end":997426,"line_start":734,"line_end":734,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":5715},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997656,"byte_end":997665,"line_start":740,"line_end":740,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"pub fn filter3x3(&Self, &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997591,"byte_end":997644,"line_start":739,"line_end":739,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":5716},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998071,"byte_end":998086,"line_start":751,"line_end":751,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"pub fn adjust_contrast(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n `contrast` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997872,"byte_end":997910,"line_start":748,"line_end":748,"column_start":5,"column_end":43}},{"value":"/ `contrast` is the amount to adjust the contrast by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997915,"byte_end":997970,"line_start":749,"line_end":749,"column_start":5,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":997975,"byte_end":998059,"line_start":750,"line_end":750,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":5717},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998382,"byte_end":998390,"line_start":758,"line_end":758,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"pub fn brighten(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n `value` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998194,"byte_end":998232,"line_start":755,"line_end":755,"column_start":5,"column_end":43}},{"value":"/ `value` is the amount to brighten each pixel by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998237,"byte_end":998289,"line_start":756,"line_end":756,"column_start":5,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998294,"byte_end":998370,"line_start":757,"line_end":757,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":5718},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998738,"byte_end":998747,"line_start":766,"line_end":766,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"pub fn huerotate(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998506,"byte_end":998540,"line_start":762,"line_end":762,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998545,"byte_end":998596,"line_start":763,"line_end":763,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998601,"byte_end":998670,"line_start":764,"line_end":764,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998675,"byte_end":998726,"line_start":765,"line_end":765,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":5719},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998906,"byte_end":998911,"line_start":771,"line_end":771,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"pub fn flipv(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":998864,"byte_end":998894,"line_start":770,"line_end":770,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":5720},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999057,"byte_end":999062,"line_start":776,"line_end":776,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"pub fn fliph(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999013,"byte_end":999045,"line_start":775,"line_end":775,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":5721},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999221,"byte_end":999229,"line_start":781,"line_end":781,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"pub fn rotate90(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999166,"byte_end":999209,"line_start":780,"line_end":780,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":5722},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999382,"byte_end":999391,"line_start":786,"line_end":786,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"pub fn rotate180(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999326,"byte_end":999370,"line_start":785,"line_end":785,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":5723},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999545,"byte_end":999554,"line_start":791,"line_end":791,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"pub fn rotate270(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999489,"byte_end":999533,"line_start":790,"line_end":790,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":5724},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999848,"byte_end":999856,"line_start":799,"line_end":799,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"pub fn write_to<W: Write + Seek, F: Into<ImageOutputFormat>>(&Self, &mut W, F)\n-> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```.","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999652,"byte_end":999698,"line_start":795,"line_end":795,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999703,"byte_end":999706,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ Assumes the writer is buffered. In most cases,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999711,"byte_end":999761,"line_start":797,"line_end":797,"column_start":5,"column_end":55}},{"value":"/ you should wrap your writer in a `BufWriter` for best performance.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":999766,"byte_end":999836,"line_start":798,"line_end":798,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":5727},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1001481,"byte_end":1001485,"line_start":847,"line_end":847,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1001347,"byte_end":1001400,"line_start":844,"line_end":844,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1001405,"byte_end":1001408,"line_start":845,"line_end":845,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1001413,"byte_end":1001469,"line_start":846,"line_end":846,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":5729},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1001832,"byte_end":1001848,"line_start":859,"line_end":859,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1001625,"byte_end":1001680,"line_start":854,"line_end":854,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1001685,"byte_end":1001710,"line_start":855,"line_end":855,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1001715,"byte_end":1001718,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1001723,"byte_end":1001795,"line_start":857,"line_end":857,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1001800,"byte_end":1001820,"line_start":858,"line_end":858,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":5769},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1009724,"byte_end":1009728,"line_start":1091,"line_end":1091,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"pub fn open<P>(P) -> ImageResult<DynamicImage> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1009422,"byte_end":1009471,"line_start":1084,"line_end":1084,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1009472,"byte_end":1009540,"line_start":1085,"line_end":1085,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1009541,"byte_end":1009544,"line_start":1086,"line_end":1086,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1009545,"byte_end":1009641,"line_start":1087,"line_end":1087,"column_start":1,"column_end":97}},{"value":"/ content before its path.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1009642,"byte_end":1009670,"line_start":1088,"line_end":1088,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1009671,"byte_end":1009674,"line_start":1089,"line_end":1089,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1009675,"byte_end":1009716,"line_start":1090,"line_end":1090,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":5771},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010283,"byte_end":1010299,"line_start":1106,"line_end":1106,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"pub fn image_dimensions<P>(P) -> ImageResult<(u32, u32)> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[{"value":"/ Read the dimensions of the image located at the specified path.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1009918,"byte_end":1009985,"line_start":1099,"line_end":1099,"column_start":1,"column_end":68}},{"value":"/ This is faster than fully loading the image and then getting its dimensions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1009986,"byte_end":1010066,"line_start":1100,"line_end":1100,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010067,"byte_end":1010070,"line_start":1101,"line_end":1101,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010071,"byte_end":1010167,"line_start":1102,"line_end":1102,"column_start":1,"column_end":97}},{"value":"/ content before its path or manually supplying the format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010168,"byte_end":1010229,"line_start":1103,"line_end":1103,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010230,"byte_end":1010233,"line_start":1104,"line_end":1104,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010234,"byte_end":1010275,"line_start":1105,"line_end":1105,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":5773},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010882,"byte_end":1010893,"line_start":1121,"line_end":1121,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"pub fn save_buffer<P>(P, &[u8], u32, u32, color::ColorType) -> ImageResult<()>\nwhere P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010499,"byte_end":1010561,"line_start":1114,"line_end":1114,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010562,"byte_end":1010565,"line_start":1115,"line_end":1115,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010566,"byte_end":1010652,"line_start":1116,"line_end":1116,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010653,"byte_end":1010714,"line_start":1117,"line_end":1117,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010715,"byte_end":1010718,"line_start":1118,"line_end":1118,"column_start":1,"column_end":4}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010719,"byte_end":1010810,"line_start":1119,"line_end":1119,"column_start":1,"column_end":92}},{"value":"/ jpeg, png, ico, pnm, bmp, exr and tiff files are supported.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1010811,"byte_end":1010874,"line_start":1120,"line_end":1120,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":5775},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011552,"byte_end":1011575,"line_start":1143,"line_end":1143,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"pub fn save_buffer_with_format<P>(P, &[u8], u32, u32, color::ColorType,\n                                  ImageFormat) -> ImageResult<()> where\nP: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011199,"byte_end":1011260,"line_start":1135,"line_end":1135,"column_start":1,"column_end":62}},{"value":"/ in the specified format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011261,"byte_end":1011289,"line_start":1136,"line_end":1136,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011290,"byte_end":1011293,"line_start":1137,"line_end":1137,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011294,"byte_end":1011356,"line_start":1138,"line_end":1138,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011357,"byte_end":1011389,"line_start":1139,"line_end":1139,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted files if the buffer contains","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011390,"byte_end":1011450,"line_start":1140,"line_end":1140,"column_start":1,"column_end":61}},{"value":"/ malformed data. Currently only jpeg, png, ico, bmp, exr and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011451,"byte_end":1011514,"line_start":1141,"line_end":1141,"column_start":1,"column_end":64}},{"value":"/ tiff files are supported.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011515,"byte_end":1011544,"line_start":1142,"line_end":1142,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":5777},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012369,"byte_end":1012393,"line_start":1170,"line_end":1170,"column_start":8,"column_end":32},"name":"write_buffer_with_format","qualname":"::dynimage::write_buffer_with_format","value":"pub fn write_buffer_with_format<W,\n                                F>(&mut W, &[u8], u32, u32, color::ColorType,\n                                   F) -> ImageResult<()> where W: Write +\nSeek, F: Into<ImageOutputFormat>","parent":null,"children":[],"decl_id":null,"docs":" Writes the supplied buffer to a writer in the specified format.","sig":null,"attributes":[{"value":"/ Writes the supplied buffer to a writer in the specified format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011894,"byte_end":1011961,"line_start":1158,"line_end":1158,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011962,"byte_end":1011965,"line_start":1159,"line_end":1159,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1011966,"byte_end":1012028,"line_start":1160,"line_end":1160,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012029,"byte_end":1012061,"line_start":1161,"line_end":1161,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted writers if the buffer contains","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012062,"byte_end":1012124,"line_start":1162,"line_end":1162,"column_start":1,"column_end":63}},{"value":"/ malformed data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012125,"byte_end":1012144,"line_start":1163,"line_end":1163,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012145,"byte_end":1012148,"line_start":1164,"line_end":1164,"column_start":1,"column_end":4}},{"value":"/ See [`ImageOutputFormat`](../enum.ImageOutputFormat.html) for","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012149,"byte_end":1012214,"line_start":1165,"line_end":1165,"column_start":1,"column_end":66}},{"value":"/ supported types.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012215,"byte_end":1012235,"line_start":1166,"line_end":1166,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012236,"byte_end":1012239,"line_start":1167,"line_end":1167,"column_start":1,"column_end":4}},{"value":"/ Assumes the writer is buffered. In most cases,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012240,"byte_end":1012290,"line_start":1168,"line_end":1168,"column_start":1,"column_end":51}},{"value":"/ you should wrap your writer in a `BufWriter` for best performance.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012291,"byte_end":1012361,"line_start":1169,"line_end":1169,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":5780},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012996,"byte_end":1013012,"line_start":1194,"line_end":1194,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"pub fn load_from_memory(&[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012752,"byte_end":1012792,"line_start":1186,"line_end":1186,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012793,"byte_end":1012796,"line_start":1187,"line_end":1187,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012797,"byte_end":1012848,"line_start":1188,"line_end":1188,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012849,"byte_end":1012891,"line_start":1189,"line_end":1189,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012892,"byte_end":1012895,"line_start":1190,"line_end":1190,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012896,"byte_end":1012942,"line_start":1191,"line_end":1191,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012943,"byte_end":1012946,"line_start":1192,"line_end":1192,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1012947,"byte_end":1012988,"line_start":1193,"line_end":1193,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":5781},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1013494,"byte_end":1013522,"line_start":1209,"line_end":1209,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"pub fn load_from_memory_with_format(&[u8], ImageFormat)\n-> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1013167,"byte_end":1013207,"line_start":1199,"line_end":1199,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1013208,"byte_end":1013211,"line_start":1200,"line_end":1200,"column_start":1,"column_end":4}},{"value":"/ This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1013212,"byte_end":1013309,"line_start":1201,"line_end":1201,"column_start":1,"column_end":98}},{"value":"/ calls `load` with that reader.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1013310,"byte_end":1013344,"line_start":1202,"line_end":1202,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1013345,"byte_end":1013348,"line_start":1203,"line_end":1203,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1013349,"byte_end":1013395,"line_start":1204,"line_end":1204,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1013396,"byte_end":1013399,"line_start":1205,"line_end":1205,"column_start":1,"column_end":4}},{"value":"/ [`load`]: fn.load.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1013400,"byte_end":1013426,"line_start":1206,"line_end":1206,"column_start":1,"column_end":27}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1013427,"byte_end":1013468,"line_start":1207,"line_end":1207,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1013469,"byte_end":1013486,"line_start":1208,"line_end":1208,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8353},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017702,"byte_end":1017705,"line_start":30,"line_end":30,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageFormat::Png","value":"ImageFormat::Png","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017671,"byte_end":1017697,"line_start":29,"line_end":29,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8355},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017744,"byte_end":1017748,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageFormat::Jpeg","value":"ImageFormat::Jpeg","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017712,"byte_end":1017739,"line_start":32,"line_end":32,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8357},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017786,"byte_end":1017789,"line_start":36,"line_end":36,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageFormat::Gif","value":"ImageFormat::Gif","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017755,"byte_end":1017781,"line_start":35,"line_end":35,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8359},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017828,"byte_end":1017832,"line_start":39,"line_end":39,"column_start":5,"column_end":9},"name":"WebP","qualname":"::image::ImageFormat::WebP","value":"ImageFormat::WebP","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017796,"byte_end":1017823,"line_start":38,"line_end":38,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8361},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017878,"byte_end":1017881,"line_start":42,"line_end":42,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageFormat::Pnm","value":"ImageFormat::Pnm","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017839,"byte_end":1017873,"line_start":41,"line_end":41,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8363},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017920,"byte_end":1017924,"line_start":45,"line_end":45,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageFormat::Tiff","value":"ImageFormat::Tiff","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017888,"byte_end":1017915,"line_start":44,"line_end":44,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8365},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017962,"byte_end":1017965,"line_start":48,"line_end":48,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageFormat::Tga","value":"ImageFormat::Tga","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017931,"byte_end":1017957,"line_start":47,"line_end":47,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8367},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018003,"byte_end":1018006,"line_start":51,"line_end":51,"column_start":5,"column_end":8},"name":"Dds","qualname":"::image::ImageFormat::Dds","value":"ImageFormat::Dds","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in DDS Format\n","sig":null,"attributes":[{"value":"/ An Image in DDS Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017972,"byte_end":1017998,"line_start":50,"line_end":50,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8369},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018044,"byte_end":1018047,"line_start":54,"line_end":54,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageFormat::Bmp","value":"ImageFormat::Bmp","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018013,"byte_end":1018039,"line_start":53,"line_end":53,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8371},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018085,"byte_end":1018088,"line_start":57,"line_end":57,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageFormat::Ico","value":"ImageFormat::Ico","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018054,"byte_end":1018080,"line_start":56,"line_end":56,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8373},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018135,"byte_end":1018138,"line_start":60,"line_end":60,"column_start":5,"column_end":8},"name":"Hdr","qualname":"::image::ImageFormat::Hdr","value":"ImageFormat::Hdr","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018095,"byte_end":1018130,"line_start":59,"line_end":59,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8375},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018180,"byte_end":1018187,"line_start":63,"line_end":63,"column_start":5,"column_end":12},"name":"OpenExr","qualname":"::image::ImageFormat::OpenExr","value":"ImageFormat::OpenExr","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in OpenEXR Format\n","sig":null,"attributes":[{"value":"/ An Image in OpenEXR Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018145,"byte_end":1018175,"line_start":62,"line_end":62,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8377},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018230,"byte_end":1018238,"line_start":66,"line_end":66,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageFormat::Farbfeld","value":"ImageFormat::Farbfeld","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"/ An Image in farbfeld Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018194,"byte_end":1018225,"line_start":65,"line_end":65,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8379},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018278,"byte_end":1018282,"line_start":69,"line_end":69,"column_start":5,"column_end":9},"name":"Avif","qualname":"::image::ImageFormat::Avif","value":"ImageFormat::Avif","parent":{"krate":0,"index":8352},"children":[],"decl_id":null,"docs":" An Image in AVIF format.\n","sig":null,"attributes":[{"value":"/ An Image in AVIF format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018245,"byte_end":1018273,"line_start":68,"line_end":68,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":8352},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017653,"byte_end":1017664,"line_start":28,"line_end":28,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"pub enum ImageFormat {\n    Png,\n    Jpeg,\n    Gif,\n    WebP,\n    Pnm,\n    Tiff,\n    Tga,\n    Dds,\n    Bmp,\n    Ico,\n    Hdr,\n    OpenExr,\n    Farbfeld,\n    Avif,\n}","parent":null,"children":[{"krate":0,"index":8353},{"krate":0,"index":8355},{"krate":0,"index":8357},{"krate":0,"index":8359},{"krate":0,"index":8361},{"krate":0,"index":8363},{"krate":0,"index":8365},{"krate":0,"index":8367},{"krate":0,"index":8369},{"krate":0,"index":8371},{"krate":0,"index":8373},{"krate":0,"index":8375},{"krate":0,"index":8377},{"krate":0,"index":8379}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017472,"byte_end":1017518,"line_start":24,"line_end":24,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017519,"byte_end":1017574,"line_start":25,"line_end":25,"column_start":1,"column_end":56}},{"value":"non_exhaustive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1017626,"byte_end":1017643,"line_start":27,"line_end":27,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":5853},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018609,"byte_end":1018623,"line_start":84,"line_end":84,"column_start":12,"column_end":26},"name":"from_extension","qualname":"<ImageFormat>::from_extension","value":"pub fn from_extension<S>(S) -> Option<Self> where S: AsRef<OsStr>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by a path's file extension.","sig":null,"attributes":[{"value":"/ Return the image format specified by a path's file extension.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018310,"byte_end":1018375,"line_start":73,"line_end":73,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018380,"byte_end":1018383,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018388,"byte_end":1018401,"line_start":75,"line_end":75,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018406,"byte_end":1018409,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018414,"byte_end":1018421,"line_start":77,"line_end":77,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018426,"byte_end":1018453,"line_start":78,"line_end":78,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018458,"byte_end":1018461,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_extension(\"jpg\");","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018466,"byte_end":1018518,"line_start":80,"line_end":80,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(format, Some(ImageFormat::Jpeg));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018523,"byte_end":1018571,"line_start":81,"line_end":81,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018576,"byte_end":1018583,"line_start":82,"line_end":82,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018588,"byte_end":1018597,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5856},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020026,"byte_end":1020035,"line_start":127,"line_end":127,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"pub fn from_path<P>(P) -> ImageResult<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.","sig":null,"attributes":[{"value":"/ Return the image format specified by the path's file extension.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019665,"byte_end":1019732,"line_start":114,"line_end":114,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019737,"byte_end":1019740,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019745,"byte_end":1019758,"line_start":116,"line_end":116,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019763,"byte_end":1019766,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019771,"byte_end":1019778,"line_start":118,"line_end":118,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019783,"byte_end":1019810,"line_start":119,"line_end":119,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019815,"byte_end":1019818,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_path(\"images/ferris.png\")?;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019823,"byte_end":1019885,"line_start":121,"line_end":121,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format, ImageFormat::Png);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019890,"byte_end":1019931,"line_start":122,"line_end":122,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019936,"byte_end":1019939,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Ok::<(), image::error::ImageError>(())","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019944,"byte_end":1019988,"line_start":124,"line_end":124,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1019993,"byte_end":1020000,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020005,"byte_end":1020014,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5860},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1021007,"byte_end":1021021,"line_start":158,"line_end":158,"column_start":12,"column_end":26},"name":"from_mime_type","qualname":"<ImageFormat>::from_mime_type","value":"pub fn from_mime_type<M>(M) -> Option<Self> where M: AsRef<str>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by a MIME type.","sig":null,"attributes":[{"value":"/ Return the image format specified by a MIME type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020726,"byte_end":1020779,"line_start":148,"line_end":148,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020784,"byte_end":1020787,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020792,"byte_end":1020805,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020810,"byte_end":1020813,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020818,"byte_end":1020825,"line_start":152,"line_end":152,"column_start":5,"column_end":12}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020830,"byte_end":1020857,"line_start":153,"line_end":153,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020862,"byte_end":1020865,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let format = ImageFormat::from_mime_type(\"image/png\").unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020870,"byte_end":1020937,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(format, ImageFormat::Png);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020942,"byte_end":1020983,"line_start":156,"line_end":156,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1020988,"byte_end":1020995,"line_start":157,"line_end":157,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5862},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1022106,"byte_end":1022114,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"can_read","qualname":"<ImageFormat>::can_read","value":"pub fn can_read(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the ImageFormat can be decoded by the lib.\n","sig":null,"attributes":[{"value":"/ Return if the ImageFormat can be decoded by the lib.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1022024,"byte_end":1022080,"line_start":183,"line_end":183,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1022085,"byte_end":1022094,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5863},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1022898,"byte_end":1022907,"line_start":207,"line_end":207,"column_start":12,"column_end":21},"name":"can_write","qualname":"<ImageFormat>::can_write","value":"pub fn can_write(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return if the ImageFormat can be encoded by the lib.\n","sig":null,"attributes":[{"value":"/ Return if the ImageFormat can be encoded by the lib.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1022816,"byte_end":1022872,"line_start":205,"line_end":205,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1022877,"byte_end":1022886,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":5864},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1024225,"byte_end":1024239,"line_start":236,"line_end":236,"column_start":12,"column_end":26},"name":"extensions_str","qualname":"<ImageFormat>::extensions_str","value":"pub fn extensions_str(Self) -> &'static [&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Return a list of applicable extensions for this format.","sig":null,"attributes":[{"value":"/ Return a list of applicable extensions for this format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1023635,"byte_end":1023694,"line_start":227,"line_end":227,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1023699,"byte_end":1023702,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ All currently recognized image formats specify at least on extension but for future","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1023707,"byte_end":1023794,"line_start":229,"line_end":229,"column_start":5,"column_end":92}},{"value":"/ compatibility you should not rely on this fact. The list may be empty if the format has no","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1023799,"byte_end":1023893,"line_start":230,"line_end":230,"column_start":5,"column_end":99}},{"value":"/ recognized file representation, for example in case it is used as a purely transient memory","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1023898,"byte_end":1023993,"line_start":231,"line_end":231,"column_start":5,"column_end":100}},{"value":"/ format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1023998,"byte_end":1024009,"line_start":232,"line_end":232,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1024014,"byte_end":1024017,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ The method name `extensions` remains reserved for introducing another method in the future","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1024022,"byte_end":1024116,"line_start":234,"line_end":234,"column_start":5,"column_end":99}},{"value":"/ that yields a slice of `OsStr` which is blocked by several features of const evaluation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1024121,"byte_end":1024213,"line_start":235,"line_end":235,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8396},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025251,"byte_end":1025254,"line_start":263,"line_end":263,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageOutputFormat::Png","value":"ImageOutputFormat::Png","parent":{"krate":0,"index":8395},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025192,"byte_end":1025215,"line_start":261,"line_end":261,"column_start":5,"column_end":28}},{"value":"/ An Image in PNG Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025220,"byte_end":1025246,"line_start":262,"line_end":262,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8398},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025345,"byte_end":1025349,"line_start":267,"line_end":267,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageOutputFormat::Jpeg","value":"ImageOutputFormat::Jpeg(u8)","parent":{"krate":0,"index":8395},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025261,"byte_end":1025285,"line_start":265,"line_end":265,"column_start":5,"column_end":29}},{"value":"/ An Image in JPEG Format with specified quality","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025290,"byte_end":1025340,"line_start":266,"line_end":266,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8401},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025431,"byte_end":1025434,"line_start":271,"line_end":271,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageOutputFormat::Pnm","value":"ImageOutputFormat::Pnm(PnmSubtype)","parent":{"krate":0,"index":8395},"children":[],"decl_id":null,"docs":" An Image in one of the PNM Formats\n","sig":null,"attributes":[{"value":"cfg(feature = \"pnm\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025360,"byte_end":1025383,"line_start":269,"line_end":269,"column_start":5,"column_end":28}},{"value":"/ An Image in one of the PNM Formats","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025388,"byte_end":1025426,"line_start":270,"line_end":270,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8404},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025512,"byte_end":1025515,"line_start":275,"line_end":275,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageOutputFormat::Gif","value":"ImageOutputFormat::Gif","parent":{"krate":0,"index":8395},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"gif\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025453,"byte_end":1025476,"line_start":273,"line_end":273,"column_start":5,"column_end":28}},{"value":"/ An Image in GIF Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025481,"byte_end":1025507,"line_start":274,"line_end":274,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8406},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025581,"byte_end":1025584,"line_start":279,"line_end":279,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageOutputFormat::Ico","value":"ImageOutputFormat::Ico","parent":{"krate":0,"index":8395},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025522,"byte_end":1025545,"line_start":277,"line_end":277,"column_start":5,"column_end":28}},{"value":"/ An Image in ICO Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025550,"byte_end":1025576,"line_start":278,"line_end":278,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8408},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025650,"byte_end":1025653,"line_start":283,"line_end":283,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageOutputFormat::Bmp","value":"ImageOutputFormat::Bmp","parent":{"krate":0,"index":8395},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025591,"byte_end":1025614,"line_start":281,"line_end":281,"column_start":5,"column_end":28}},{"value":"/ An Image in BMP Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025619,"byte_end":1025645,"line_start":282,"line_end":282,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8410},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025729,"byte_end":1025737,"line_start":287,"line_end":287,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageOutputFormat::Farbfeld","value":"ImageOutputFormat::Farbfeld","parent":{"krate":0,"index":8395},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"farbfeld\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025660,"byte_end":1025688,"line_start":285,"line_end":285,"column_start":5,"column_end":33}},{"value":"/ An Image in farbfeld Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025693,"byte_end":1025724,"line_start":286,"line_end":286,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8412},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025803,"byte_end":1025806,"line_start":291,"line_end":291,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageOutputFormat::Tga","value":"ImageOutputFormat::Tga","parent":{"krate":0,"index":8395},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025744,"byte_end":1025767,"line_start":289,"line_end":289,"column_start":5,"column_end":28}},{"value":"/ An Image in TGA Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025772,"byte_end":1025798,"line_start":290,"line_end":290,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8414},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025880,"byte_end":1025887,"line_start":295,"line_end":295,"column_start":5,"column_end":12},"name":"OpenExr","qualname":"::image::ImageOutputFormat::OpenExr","value":"ImageOutputFormat::OpenExr","parent":{"krate":0,"index":8395},"children":[],"decl_id":null,"docs":" An Image in OpenEXR Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"openexr\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025813,"byte_end":1025840,"line_start":293,"line_end":293,"column_start":5,"column_end":32}},{"value":"/ An Image in OpenEXR Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025845,"byte_end":1025875,"line_start":294,"line_end":294,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8416},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025955,"byte_end":1025959,"line_start":299,"line_end":299,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageOutputFormat::Tiff","value":"ImageOutputFormat::Tiff","parent":{"krate":0,"index":8395},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025894,"byte_end":1025918,"line_start":297,"line_end":297,"column_start":5,"column_end":29}},{"value":"/ An Image in TIFF Format","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025923,"byte_end":1025950,"line_start":298,"line_end":298,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":8418},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1026291,"byte_end":1026302,"line_start":308,"line_end":308,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":8395},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1026046,"byte_end":1026118,"line_start":305,"line_end":305,"column_start":5,"column_end":77}}]},{"kind":"Enum","id":{"krate":0,"index":8395},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025168,"byte_end":1025185,"line_start":260,"line_end":260,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"pub enum ImageOutputFormat {\n    Png,\n    Jpeg(u8),\n    Pnm(PnmSubtype),\n    Gif,\n    Ico,\n    Bmp,\n    Farbfeld,\n    Tga,\n    OpenExr,\n    Tiff,\n    Unsupported(String),\n}","parent":null,"children":[{"krate":0,"index":8396},{"krate":0,"index":8398},{"krate":0,"index":8401},{"krate":0,"index":8404},{"krate":0,"index":8406},{"krate":0,"index":8408},{"krate":0,"index":8410},{"krate":0,"index":8412},{"krate":0,"index":8414},{"krate":0,"index":8416},{"krate":0,"index":8418}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025042,"byte_end":1025101,"line_start":257,"line_end":257,"column_start":1,"column_end":60}},{"value":"non_exhaustive","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1025141,"byte_end":1025158,"line_start":259,"line_end":259,"column_start":1,"column_end":18}}]},{"kind":"Struct","id":{"krate":0,"index":8432},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037157,"byte_end":1037165,"line_start":595,"line_end":595,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":8433},{"krate":0,"index":8434}],"decl_id":null,"docs":" Represents the progress of an image operation.","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1036753,"byte_end":1036803,"line_start":589,"line_end":589,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1036804,"byte_end":1036807,"line_start":590,"line_end":590,"column_start":1,"column_end":4}},{"value":"/ Note that this is not necessarily accurate and no change to the values passed to the progress","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1036808,"byte_end":1036905,"line_start":591,"line_end":591,"column_start":1,"column_end":98}},{"value":"/ function during decoding will be considered breaking. A decoder could in theory report the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1036906,"byte_end":1037000,"line_start":592,"line_end":592,"column_start":1,"column_end":95}},{"value":"/ progress `(0, 0)` if progress is unknown, without violating the interface contract of the type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037001,"byte_end":1037100,"line_start":593,"line_end":593,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":5891},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037471,"byte_end":1037478,"line_start":607,"line_end":607,"column_start":12,"column_end":19},"name":"current","qualname":"<Progress>::current","value":"pub fn current(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of completed decoding.\n","sig":null,"attributes":[{"value":"/ A measure of completed decoding.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037423,"byte_end":1037459,"line_start":606,"line_end":606,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":5892},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037651,"byte_end":1037656,"line_start":614,"line_end":614,"column_start":12,"column_end":17},"name":"total","qualname":"<Progress>::total","value":"pub fn total(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of all necessary decoding work.","sig":null,"attributes":[{"value":"/ A measure of all necessary decoding work.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037526,"byte_end":1037571,"line_start":611,"line_end":611,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037576,"byte_end":1037579,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ This is in general greater or equal than `current`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037584,"byte_end":1037639,"line_start":613,"line_end":613,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":5893},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037766,"byte_end":1037775,"line_start":619,"line_end":619,"column_start":12,"column_end":21},"name":"remaining","qualname":"<Progress>::remaining","value":"pub fn remaining(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a measure for remaining decoding work.\n","sig":null,"attributes":[{"value":"/ Calculate a measure for remaining decoding work.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037702,"byte_end":1037754,"line_start":618,"line_end":618,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":5894},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037904,"byte_end":1037916,"line_start":625,"line_end":625,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":5896},{"krate":0,"index":5897},{"krate":0,"index":5898},{"krate":0,"index":5899},{"krate":0,"index":5900},{"krate":0,"index":5901},{"krate":0,"index":5902},{"krate":0,"index":5903},{"krate":0,"index":5905},{"krate":0,"index":5907}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037852,"byte_end":1037893,"line_start":624,"line_end":624,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":5896},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037993,"byte_end":1037999,"line_start":627,"line_end":627,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":5894},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037934,"byte_end":1037983,"line_start":626,"line_end":626,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5897},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038089,"byte_end":1038099,"line_start":630,"line_end":630,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":5894},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038017,"byte_end":1038081,"line_start":629,"line_end":629,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":5898},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038204,"byte_end":1038214,"line_start":633,"line_end":633,"column_start":8,"column_end":18},"name":"color_type","qualname":"::image::ImageDecoder::color_type","value":"pub fn color_type(&Self) -> ColorType","parent":{"krate":0,"index":5894},"children":[],"decl_id":null,"docs":" Returns the color type of the image data produced by this decoder\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image data produced by this decoder","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038127,"byte_end":1038196,"line_start":632,"line_end":632,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":5899},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038308,"byte_end":1038327,"line_start":636,"line_end":636,"column_start":8,"column_end":27},"name":"original_color_type","qualname":"::image::ImageDecoder::original_color_type","value":"pub fn original_color_type(&Self) -> ExtendedColorType","parent":{"krate":0,"index":5894},"children":[],"decl_id":null,"docs":" Retuns the color type of the image file before decoding\n","sig":null,"attributes":[{"value":"/ Retuns the color type of the image file before decoding","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038241,"byte_end":1038300,"line_start":635,"line_end":635,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":5900},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038668,"byte_end":1038679,"line_start":643,"line_end":643,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"pub fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":5894},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038402,"byte_end":1038486,"line_start":640,"line_end":640,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038491,"byte_end":1038587,"line_start":641,"line_end":641,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038592,"byte_end":1038660,"line_start":642,"line_end":642,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":5901},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1039137,"byte_end":1039148,"line_start":651,"line_end":651,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"pub fn total_bytes(&Self) -> u64","parent":{"krate":0,"index":5894},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the decoded image.","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the decoded image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038721,"byte_end":1038780,"line_start":645,"line_end":645,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038785,"byte_end":1038788,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ This is the size of the buffer that must be passed to `read_image` or","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038793,"byte_end":1038866,"line_start":647,"line_end":647,"column_start":5,"column_end":78}},{"value":"/ `read_image_with_progress`. The returned value may exceed usize::MAX, in","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038871,"byte_end":1038947,"line_start":648,"line_end":648,"column_start":5,"column_end":81}},{"value":"/ which case it isn't actually possible to construct a buffer to decode all the image data","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1038952,"byte_end":1039044,"line_start":649,"line_end":649,"column_start":5,"column_end":97}},{"value":"/ into. If, however, the size does not fit in a u64 then u64::MAX is returned.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1039049,"byte_end":1039129,"line_start":650,"line_end":650,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":5902},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1039587,"byte_end":1039601,"line_start":660,"line_end":660,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"pub fn scanline_bytes(&Self) -> u64","parent":{"krate":0,"index":5894},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1039429,"byte_end":1039525,"line_start":658,"line_end":658,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1039530,"byte_end":1039579,"line_start":659,"line_end":659,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5903},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040502,"byte_end":1040512,"line_start":685,"line_end":685,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"pub fn read_image(Self, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":5894},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1039656,"byte_end":1039695,"line_start":664,"line_end":664,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1039700,"byte_end":1039703,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes and writes the pixel data of the image into it.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1039708,"byte_end":1039796,"line_start":666,"line_end":666,"column_start":5,"column_end":93}},{"value":"/ Although not required, for certain color types callers may want to pass buffers which are","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1039801,"byte_end":1039894,"line_start":667,"line_end":667,"column_start":5,"column_end":98}},{"value":"/ aligned to 2 or 4 byte boundaries to the slice can be cast to a [u16] or [u32]. To accommodate","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1039899,"byte_end":1039997,"line_start":668,"line_end":668,"column_start":5,"column_end":103}},{"value":"/ such casts, the returned contents will always be in native endian.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040002,"byte_end":1040072,"line_start":669,"line_end":669,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040077,"byte_end":1040080,"line_start":670,"line_end":670,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040085,"byte_end":1040097,"line_start":671,"line_end":671,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040102,"byte_end":1040105,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ This function panics if buf.len() != self.total_bytes().","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040110,"byte_end":1040170,"line_start":673,"line_end":673,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040175,"byte_end":1040178,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040183,"byte_end":1040197,"line_start":675,"line_end":675,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040202,"byte_end":1040205,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ ```no_build","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040210,"byte_end":1040225,"line_start":677,"line_end":677,"column_start":5,"column_end":20}},{"value":"/ use zerocopy::{AsBytes, FromBytes};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040230,"byte_end":1040269,"line_start":678,"line_end":678,"column_start":5,"column_end":44}},{"value":"/ fn read_16bit_image(decoder: impl ImageDecoder) -> Vec<16> {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040274,"byte_end":1040338,"line_start":679,"line_end":679,"column_start":5,"column_end":69}},{"value":"/     let mut buf: Vec<u16> = vec![0; decoder.total_bytes()/2];","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040343,"byte_end":1040408,"line_start":680,"line_end":680,"column_start":5,"column_end":70}},{"value":"/     decoder.read_image(buf.as_bytes());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040413,"byte_end":1040456,"line_start":681,"line_end":681,"column_start":5,"column_end":48}},{"value":"/     buf","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040461,"byte_end":1040472,"line_start":682,"line_end":682,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040477,"byte_end":1040482,"line_start":683,"line_end":683,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040487,"byte_end":1040494,"line_start":684,"line_end":684,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5905},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040740,"byte_end":1040764,"line_start":691,"line_end":691,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"pub fn read_image_with_progress<F: Fn(Progress) -> ()>(Self, &mut [u8], F)\n-> ImageResult<()>","parent":{"krate":0,"index":5894},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040618,"byte_end":1040714,"line_start":689,"line_end":689,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1040719,"byte_end":1040732,"line_start":690,"line_end":690,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":5907},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042352,"byte_end":1042362,"line_start":734,"line_end":734,"column_start":8,"column_end":18},"name":"set_limits","qualname":"::image::ImageDecoder::set_limits","value":"pub fn set_limits(&mut Self, crate::io::Limits) -> ImageResult<()>","parent":{"krate":0,"index":5894},"children":[],"decl_id":null,"docs":" Set decoding limits for this decoder. See [`Limits`] for the different kinds of\n limits that is possible to set.","sig":null,"attributes":[{"value":"/ Set decoding limits for this decoder. See [`Limits`] for the different kinds of","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1041716,"byte_end":1041799,"line_start":723,"line_end":723,"column_start":5,"column_end":88}},{"value":"/ limits that is possible to set.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1041804,"byte_end":1041839,"line_start":724,"line_end":724,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1041844,"byte_end":1041847,"line_start":725,"line_end":725,"column_start":5,"column_end":8}},{"value":"/ Note to implementors: make sure you call [`Limits::check_support`] so that","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1041852,"byte_end":1041930,"line_start":726,"line_end":726,"column_start":5,"column_end":83}},{"value":"/ decoding fails if any unsupported strict limits are set. Also make sure","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1041935,"byte_end":1042010,"line_start":727,"line_end":727,"column_start":5,"column_end":80}},{"value":"/ you call [`Limits::check_dimensions`] to check the `max_image_width` and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042015,"byte_end":1042091,"line_start":728,"line_end":728,"column_start":5,"column_end":81}},{"value":"/ `max_image_height` limits.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042096,"byte_end":1042126,"line_start":729,"line_end":729,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042131,"byte_end":1042134,"line_start":730,"line_end":730,"column_start":5,"column_end":8}},{"value":"/ [`Limits`]: ./io/struct.Limits.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042139,"byte_end":1042178,"line_start":731,"line_end":731,"column_start":5,"column_end":44}},{"value":"/ [`Limits::check_support`]: ./io/struct.Limits.html#method.check_support","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042183,"byte_end":1042258,"line_start":732,"line_end":732,"column_start":5,"column_end":80}},{"value":"/ [`Limits::check_dimensions`]: ./io/struct.Limits.html#method.check_dimensions","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042263,"byte_end":1042344,"line_start":733,"line_end":733,"column_start":5,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":5908},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042687,"byte_end":1042703,"line_start":745,"line_end":745,"column_start":11,"column_end":27},"name":"ImageDecoderRect","qualname":"::image::ImageDecoderRect","value":"ImageDecoderRect<'a>: ImageDecoder + Sized","parent":null,"children":[{"krate":0,"index":5910},{"krate":0,"index":5912}],"decl_id":null,"docs":" Specialized image decoding not be supported by all formats\n","sig":null,"attributes":[{"value":"/ Specialized image decoding not be supported by all formats","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042614,"byte_end":1042676,"line_start":744,"line_end":744,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":5910},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042858,"byte_end":1042867,"line_start":747,"line_end":747,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderRect::read_rect","value":"pub fn read_rect(&mut Self, u32, u32, u32, u32, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":5908},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).\n","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042740,"byte_end":1042850,"line_start":746,"line_end":746,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":5912},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043810,"byte_end":1043833,"line_start":770,"line_end":770,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderRect::read_rect_with_progress","value":"pub fn read_rect_with_progress<F: Fn(Progress) ->\n                               ()>(&mut Self, u32, u32, u32, u32, &mut [u8],\n                                   F) -> ImageResult<()>","parent":{"krate":0,"index":5908},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image, periodically reporting progress.","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image, periodically reporting progress.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043094,"byte_end":1043173,"line_start":758,"line_end":758,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043178,"byte_end":1043181,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ The output buffer will be filled with fields specified by","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043186,"byte_end":1043247,"line_start":760,"line_end":760,"column_start":5,"column_end":66}},{"value":"/ [`ImageDecoder::color_type()`](trait.ImageDecoder.html#fn.color_type),","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043252,"byte_end":1043326,"line_start":761,"line_end":761,"column_start":5,"column_end":79}},{"value":"/ in that order, each field represented in native-endian.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043331,"byte_end":1043390,"line_start":762,"line_end":762,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043395,"byte_end":1043398,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ The progress callback will be called at least once at the start and the end of decoding,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043403,"byte_end":1043495,"line_start":764,"line_end":764,"column_start":5,"column_end":97}},{"value":"/ implementations are encouraged to call this more often,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043500,"byte_end":1043559,"line_start":765,"line_end":765,"column_start":5,"column_end":64}},{"value":"/ with a frequency meaningful for display to the end-user.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043564,"byte_end":1043624,"line_start":766,"line_end":766,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043629,"byte_end":1043632,"line_start":767,"line_end":767,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the output buffer isn't at least","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043637,"byte_end":1043701,"line_start":768,"line_end":768,"column_start":5,"column_end":69}},{"value":"/ `color_type().bytes_per_pixel() * color_type().channel_count() * width * height` bytes long.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1043706,"byte_end":1043802,"line_start":769,"line_end":769,"column_start":5,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":5914},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044064,"byte_end":1044080,"line_start":782,"line_end":782,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":5916}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044027,"byte_end":1044053,"line_start":781,"line_end":781,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":5916},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044152,"byte_end":1044163,"line_start":784,"line_end":784,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"pub fn into_frames(Self) -> Frames","parent":{"krate":0,"index":5914},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044091,"byte_end":1044144,"line_start":783,"line_end":783,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":5917},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044235,"byte_end":1044247,"line_start":788,"line_end":788,"column_start":11,"column_end":23},"name":"ImageEncoder","qualname":"::image::ImageEncoder","value":"ImageEncoder","parent":null,"children":[{"krate":0,"index":5918}],"decl_id":null,"docs":" The trait all encoders implement\n","sig":null,"attributes":[{"value":"/ The trait all encoders implement","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044188,"byte_end":1044224,"line_start":787,"line_end":787,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":5918},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044796,"byte_end":1044807,"line_start":799,"line_end":799,"column_start":8,"column_end":19},"name":"write_image","qualname":"::image::ImageEncoder::write_image","value":"pub fn write_image(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":{"krate":0,"index":5917},"children":[],"decl_id":null,"docs":" Writes all the bytes in an image to the encoder.","sig":null,"attributes":[{"value":"/ Writes all the bytes in an image to the encoder.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044254,"byte_end":1044306,"line_start":789,"line_end":789,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044311,"byte_end":1044314,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes of the pixel data of the image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044319,"byte_end":1044390,"line_start":791,"line_end":791,"column_start":5,"column_end":76}},{"value":"/ and encodes them. Unlike particular format encoders inherent impl encode","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044395,"byte_end":1044471,"line_start":792,"line_end":792,"column_start":5,"column_end":81}},{"value":"/ methods where endianness is not specified, here image data bytes should","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044476,"byte_end":1044551,"line_start":793,"line_end":793,"column_start":5,"column_end":80}},{"value":"/ always be in native endian. The implementor will reorder the endianess","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044556,"byte_end":1044630,"line_start":794,"line_end":794,"column_start":5,"column_end":79}},{"value":"/ as necessary for the target encoding format.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044635,"byte_end":1044683,"line_start":795,"line_end":795,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044688,"byte_end":1044691,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ See also `ImageDecoder::read_image` which reads byte buffers into","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044696,"byte_end":1044765,"line_start":797,"line_end":797,"column_start":5,"column_end":74}},{"value":"/ native endian.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044770,"byte_end":1044788,"line_start":798,"line_end":798,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":8447},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045001,"byte_end":1045007,"line_start":810,"line_end":810,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":8450},{"krate":0,"index":8451},{"krate":0,"index":8452},{"krate":0,"index":8453},{"krate":0,"index":8454}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1044944,"byte_end":1044972,"line_start":808,"line_end":808,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":5927},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045925,"byte_end":1045941,"line_start":854,"line_end":854,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":5928},{"krate":0,"index":5929},{"krate":0,"index":5930},{"krate":0,"index":5931},{"krate":0,"index":5932},{"krate":0,"index":5933},{"krate":0,"index":5934},{"krate":0,"index":5935},{"krate":0,"index":5936},{"krate":0,"index":5937}],"decl_id":null,"docs":" Trait to inspect an image.","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045707,"byte_end":1045737,"line_start":846,"line_end":846,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045738,"byte_end":1045741,"line_start":847,"line_end":847,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045742,"byte_end":1045749,"line_start":848,"line_end":848,"column_start":1,"column_end":8}},{"value":"/ use image::{GenericImageView, Rgb, RgbImage};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045750,"byte_end":1045799,"line_start":849,"line_end":849,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045800,"byte_end":1045803,"line_start":850,"line_end":850,"column_start":1,"column_end":4}},{"value":"/ let buffer = RgbImage::new(10, 10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045804,"byte_end":1045843,"line_start":851,"line_end":851,"column_start":1,"column_end":40}},{"value":"/ let image: &dyn GenericImageView<Pixel=Rgb<u8>> = &buffer;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045844,"byte_end":1045906,"line_start":852,"line_end":852,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045907,"byte_end":1045914,"line_start":853,"line_end":853,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":5928},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045980,"byte_end":1045985,"line_start":856,"line_end":856,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":5927},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045948,"byte_end":1045970,"line_start":855,"line_end":855,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":5929},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046046,"byte_end":1046056,"line_start":859,"line_end":859,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":5927},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045999,"byte_end":1046038,"line_start":858,"line_end":858,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":5930},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046120,"byte_end":1046125,"line_start":862,"line_end":862,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":5927},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046084,"byte_end":1046112,"line_start":861,"line_end":861,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":5931},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046240,"byte_end":1046246,"line_start":868,"line_end":868,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":5927},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046203,"byte_end":1046232,"line_start":867,"line_end":867,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":5932},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046373,"byte_end":1046379,"line_start":874,"line_end":874,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"pub fn bounds(&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":5927},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046324,"byte_end":1046365,"line_start":873,"line_end":873,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":5933},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046496,"byte_end":1046505,"line_start":877,"line_end":877,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"pub fn in_bounds(&Self, u32, u32) -> bool","parent":{"krate":0,"index":5927},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046417,"byte_end":1046488,"line_start":876,"line_end":876,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":5934},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046802,"byte_end":1046811,"line_start":887,"line_end":887,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":5927},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y). Indexed from top left.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046653,"byte_end":1046716,"line_start":882,"line_end":882,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046721,"byte_end":1046724,"line_start":883,"line_end":883,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046729,"byte_end":1046741,"line_start":884,"line_end":884,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046746,"byte_end":1046749,"line_start":885,"line_end":885,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046754,"byte_end":1046794,"line_start":886,"line_end":886,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":5935},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047156,"byte_end":1047172,"line_start":897,"line_end":897,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"pub unsafe fn unsafe_get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":5927},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y). Indexed from top left.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046856,"byte_end":1046919,"line_start":889,"line_end":889,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046924,"byte_end":1046927,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1046932,"byte_end":1047007,"line_start":891,"line_end":891,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047012,"byte_end":1047024,"line_start":892,"line_end":892,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047029,"byte_end":1047032,"line_start":893,"line_end":893,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047037,"byte_end":1047092,"line_start":894,"line_end":894,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047097,"byte_end":1047100,"line_start":895,"line_end":895,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: #method.in_bounds","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047105,"byte_end":1047141,"line_start":896,"line_end":896,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":5936},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047404,"byte_end":1047410,"line_start":904,"line_end":904,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"pub fn pixels(&Self) -> Pixels<, Self> where Self: Sized","parent":{"krate":0,"index":5927},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047253,"byte_end":1047307,"line_start":901,"line_end":901,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047312,"byte_end":1047365,"line_start":902,"line_end":902,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047370,"byte_end":1047396,"line_start":903,"line_end":903,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":5937},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047893,"byte_end":1047897,"line_start":922,"line_end":922,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"pub fn view(&Self, u32, u32, u32, u32) -> SubImage<&Self> where Self: Sized","parent":{"krate":0,"index":5927},"children":[],"decl_id":null,"docs":" Returns a subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n The coordinates set the position of the top left corner of the view.\n","sig":null,"attributes":[{"value":"/ Returns a subimage that is an immutable view into this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047659,"byte_end":1047724,"line_start":919,"line_end":919,"column_start":5,"column_end":70}},{"value":"/ You can use [`GenericImage::sub_image`] if you need a mutable view instead.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047729,"byte_end":1047808,"line_start":920,"line_end":920,"column_start":5,"column_end":84}},{"value":"/ The coordinates set the position of the top left corner of the view.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1047813,"byte_end":1047885,"line_start":921,"line_end":921,"column_start":5,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":5938},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048239,"byte_end":1048251,"line_start":933,"line_end":933,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":5939},{"krate":0,"index":5940},{"krate":0,"index":5941},{"krate":0,"index":5942},{"krate":0,"index":5943},{"krate":0,"index":5945},{"krate":0,"index":5947}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048192,"byte_end":1048228,"line_start":932,"line_end":932,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":5939},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049125,"byte_end":1049138,"line_start":955,"line_end":955,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":5938},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`. Indexed from top left.","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`. Indexed from top left.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048276,"byte_end":1048362,"line_start":934,"line_end":934,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048367,"byte_end":1048370,"line_start":935,"line_end":935,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048375,"byte_end":1048387,"line_start":936,"line_end":936,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048392,"byte_end":1048395,"line_start":937,"line_end":937,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048400,"byte_end":1048440,"line_start":938,"line_end":938,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048445,"byte_end":1048448,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ Panics for dynamic images (this method is deprecated and will be removed).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048453,"byte_end":1048531,"line_start":940,"line_end":940,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048536,"byte_end":1048539,"line_start":941,"line_end":941,"column_start":5,"column_end":8}},{"value":"/ ## Known issues","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048544,"byte_end":1048563,"line_start":942,"line_end":942,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048568,"byte_end":1048571,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ This requires the buffer to contain a unique set of continuous channels in the exact order","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048576,"byte_end":1048670,"line_start":944,"line_end":944,"column_start":5,"column_end":99}},{"value":"/ and byte representation that the pixel type requires. This is somewhat restrictive.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048675,"byte_end":1048762,"line_start":945,"line_end":945,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048767,"byte_end":1048770,"line_start":946,"line_end":946,"column_start":5,"column_end":8}},{"value":"/ TODO: Maybe use some kind of entry API? this would allow pixel type conversion on the fly","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048775,"byte_end":1048868,"line_start":947,"line_end":947,"column_start":5,"column_end":98}},{"value":"/ while still doing only one array lookup:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048873,"byte_end":1048917,"line_start":948,"line_end":948,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048922,"byte_end":1048925,"line_start":949,"line_end":949,"column_start":5,"column_end":8}},{"value":"/ ```ignore","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048930,"byte_end":1048943,"line_start":950,"line_end":950,"column_start":5,"column_end":18}},{"value":"/ let px = image.pixel_entry_at(x,y);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048948,"byte_end":1048987,"line_start":951,"line_end":951,"column_start":5,"column_end":44}},{"value":"/ px.set_from_rgba(rgba)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048992,"byte_end":1049018,"line_start":952,"line_end":952,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049023,"byte_end":1049030,"line_start":953,"line_end":953,"column_start":5,"column_end":12}},{"value":"deprecated(since = \"0.24.0\", note =\n             \"Use `get_pixel` and `put_pixel` instead.\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049035,"byte_end":1049117,"line_start":954,"line_end":954,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":5940},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049336,"byte_end":1049345,"line_start":962,"line_end":962,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":5938},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y). Indexed from top left.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049192,"byte_end":1049250,"line_start":957,"line_end":957,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049255,"byte_end":1049258,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049263,"byte_end":1049275,"line_start":959,"line_end":959,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049280,"byte_end":1049283,"line_start":960,"line_end":960,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049288,"byte_end":1049328,"line_start":961,"line_end":961,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":5941},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049723,"byte_end":1049739,"line_start":972,"line_end":972,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"pub unsafe fn unsafe_put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":5938},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y). Indexed from top left.","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y). Indexed from top left.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049399,"byte_end":1049458,"line_start":964,"line_end":964,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049463,"byte_end":1049466,"line_start":965,"line_end":965,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049471,"byte_end":1049546,"line_start":966,"line_end":966,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049551,"byte_end":1049563,"line_start":967,"line_end":967,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049568,"byte_end":1049571,"line_start":968,"line_end":968,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049576,"byte_end":1049631,"line_start":969,"line_end":969,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049636,"byte_end":1049639,"line_start":970,"line_end":970,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: traits.GenericImageView.html#method.in_bounds","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049644,"byte_end":1049708,"line_start":971,"line_end":971,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":5942},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050038,"byte_end":1050049,"line_start":981,"line_end":981,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"pub fn blend_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":5938},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049837,"byte_end":1049907,"line_start":976,"line_end":976,"column_start":5,"column_end":75}},{"value":"deprecated(since = \"0.24.0\", note =\n             \"Use iterator `pixels_mut` to blend the pixels directly\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1049912,"byte_end":1050030,"line_start":977,"line_end":980,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":5943},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050811,"byte_end":1050820,"line_start":998,"line_end":998,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"pub fn copy_from<O>(&mut Self, &O, u32, u32) -> ImageResult<()> where\nO: GenericImageView<Pixel = Self::Pixel>","parent":{"krate":0,"index":5938},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050103,"byte_end":1050167,"line_start":983,"line_end":983,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050172,"byte_end":1050175,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050180,"byte_end":1050241,"line_start":985,"line_end":985,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050246,"byte_end":1050279,"line_start":986,"line_end":986,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050284,"byte_end":1050287,"line_start":987,"line_end":987,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use [`GenericImageView::view`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050292,"byte_end":1050377,"line_start":988,"line_end":988,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050382,"byte_end":1050385,"line_start":989,"line_end":989,"column_start":5,"column_end":8}},{"value":"/ You can use [`FlatSamples`] to source pixels from an arbitrary regular raster of channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050390,"byte_end":1050482,"line_start":990,"line_end":990,"column_start":5,"column_end":97}},{"value":"/ values, for example from a foreign interface or a fixed image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050487,"byte_end":1050553,"line_start":991,"line_end":991,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050558,"byte_end":1050561,"line_start":992,"line_end":992,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050566,"byte_end":1050579,"line_start":993,"line_end":993,"column_start":5,"column_end":18}},{"value":"/ Returns an error if the image is too large to be copied at the given position","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050584,"byte_end":1050665,"line_start":994,"line_end":994,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050670,"byte_end":1050673,"line_start":995,"line_end":995,"column_start":5,"column_end":8}},{"value":"/ [`GenericImageView::view`]: trait.GenericImageView.html#method.view","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050678,"byte_end":1050749,"line_start":996,"line_end":996,"column_start":5,"column_end":76}},{"value":"/ [`FlatSamples`]: flat/struct.FlatSamples.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1050754,"byte_end":1050803,"line_start":997,"line_end":997,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":5945},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1051867,"byte_end":1051878,"line_start":1026,"line_end":1026,"column_start":8,"column_end":19},"name":"copy_within","qualname":"::image::GenericImage::copy_within","value":"pub fn copy_within(&mut Self, Rect, u32, u32) -> bool","parent":{"krate":0,"index":5938},"children":[],"decl_id":null,"docs":" Copies all of the pixels from one part of this image to another part of this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from one part of this image to another part of this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1051519,"byte_end":1051606,"line_start":1019,"line_end":1019,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1051611,"byte_end":1051614,"line_start":1020,"line_end":1020,"column_start":5,"column_end":8}},{"value":"/ The destination rectangle of the copy is specified with the top-left corner placed at (x, y).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1051619,"byte_end":1051716,"line_start":1021,"line_end":1021,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1051721,"byte_end":1051724,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1051729,"byte_end":1051742,"line_start":1023,"line_end":1023,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1051747,"byte_end":1051816,"line_start":1024,"line_end":1024,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1051821,"byte_end":1051859,"line_start":1025,"line_end":1025,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":5947},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1053762,"byte_end":1053771,"line_start":1069,"line_end":1069,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"pub fn sub_image(&mut Self, u32, u32, u32, u32) -> SubImage<&mut Self> where\nSelf: Sized","parent":{"krate":0,"index":5938},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n The coordinates set the position of the top left corner of the SubImage.\n","sig":null,"attributes":[{"value":"/ Returns a mutable subimage that is a view into this image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1053529,"byte_end":1053591,"line_start":1066,"line_end":1066,"column_start":5,"column_end":67}},{"value":"/ If you want an immutable subimage instead, use [`GenericImageView::view`]","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1053596,"byte_end":1053673,"line_start":1067,"line_end":1067,"column_start":5,"column_end":82}},{"value":"/ The coordinates set the position of the top left corner of the SubImage.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1053678,"byte_end":1053754,"line_start":1068,"line_end":1068,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":8459},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055272,"byte_end":1055280,"line_start":1101,"line_end":1101,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":8461}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054074,"byte_end":1054103,"line_start":1079,"line_end":1079,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054104,"byte_end":1054107,"line_start":1080,"line_end":1080,"column_start":1,"column_end":4}},{"value":"/ Instances of this struct can be created using:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054108,"byte_end":1054158,"line_start":1081,"line_end":1081,"column_start":1,"column_end":51}},{"value":"/   - [`GenericImage::sub_image`] to create a mutable view,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054159,"byte_end":1054220,"line_start":1082,"line_end":1082,"column_start":1,"column_end":62}},{"value":"/   - [`GenericImageView::view`] to create an immutable view,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054221,"byte_end":1054284,"line_start":1083,"line_end":1083,"column_start":1,"column_end":64}},{"value":"/   - [`SubImage::new`] to instantiate the struct directly.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054285,"byte_end":1054346,"line_start":1084,"line_end":1084,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054347,"byte_end":1054350,"line_start":1085,"line_end":1085,"column_start":1,"column_end":4}},{"value":"/ Note that this does _not_ implement `GenericImage`, but it dereferences to one which allows you","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054351,"byte_end":1054450,"line_start":1086,"line_end":1086,"column_start":1,"column_end":100}},{"value":"/ to use it as if it did. See [Design Considerations](#Design-Considerations) below for details.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054451,"byte_end":1054549,"line_start":1087,"line_end":1087,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054550,"byte_end":1054553,"line_start":1088,"line_end":1088,"column_start":1,"column_end":4}},{"value":"/ # Design Considerations","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054554,"byte_end":1054581,"line_start":1089,"line_end":1089,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054582,"byte_end":1054585,"line_start":1090,"line_end":1090,"column_start":1,"column_end":4}},{"value":"/ For reasons relating to coherence, this is not itself a `GenericImage` or a `GenericImageView`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054586,"byte_end":1054685,"line_start":1091,"line_end":1091,"column_start":1,"column_end":100}},{"value":"/ In short, we want to reserve the ability of adding traits implemented for _all_ generic images","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054686,"byte_end":1054784,"line_start":1092,"line_end":1092,"column_start":1,"column_end":99}},{"value":"/ but in a different manner for `SubImage`. This may be required to ensure that stacking","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054785,"byte_end":1054875,"line_start":1093,"line_end":1093,"column_start":1,"column_end":91}},{"value":"/ sub-images comes at no double indirect cost.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054876,"byte_end":1054924,"line_start":1094,"line_end":1094,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054925,"byte_end":1054928,"line_start":1095,"line_end":1095,"column_start":1,"column_end":4}},{"value":"/ If, ultimately, this is not needed then a directly implementation of `GenericImage` can and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1054929,"byte_end":1055024,"line_start":1096,"line_end":1096,"column_start":1,"column_end":96}},{"value":"/ will get added. This inconvenience may alternatively get resolved if Rust allows some forms of","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055025,"byte_end":1055123,"line_start":1097,"line_end":1097,"column_start":1,"column_end":99}},{"value":"/ specialization, which might make this trick unnecessary and thus also allows for a direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055124,"byte_end":1055217,"line_start":1098,"line_end":1098,"column_start":1,"column_end":94}},{"value":"/ implementation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055218,"byte_end":1055237,"line_start":1099,"line_end":1099,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":8467},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055564,"byte_end":1055577,"line_start":1110,"line_end":1110,"column_start":12,"column_end":25},"name":"SubImageInner","qualname":"::image::SubImageInner","value":"SubImageInner {  }","parent":null,"children":[{"krate":0,"index":8469},{"krate":0,"index":8470},{"krate":0,"index":8471},{"krate":0,"index":8472},{"krate":0,"index":8473}],"decl_id":null,"docs":" The inner type of `SubImage` that implements `GenericImage{,View}`.","sig":null,"attributes":[{"value":"/ The inner type of `SubImage` that implements `GenericImage{,View}`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055318,"byte_end":1055389,"line_start":1105,"line_end":1105,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055390,"byte_end":1055393,"line_start":1106,"line_end":1106,"column_start":1,"column_end":4}},{"value":"/ This type is _nominally_ `pub` but it is not exported from the crate. It should be regarded as","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055394,"byte_end":1055492,"line_start":1107,"line_end":1107,"column_start":1,"column_end":99}},{"value":"/ an existential type in any case.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055493,"byte_end":1055529,"line_start":1108,"line_end":1108,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":5954},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1056046,"byte_end":1056049,"line_start":1127,"line_end":1127,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"pub fn new(I, u32, u32, u32, u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n The coordinates set the position of the top left corner of the SubImage.\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055925,"byte_end":1055953,"line_start":1125,"line_end":1125,"column_start":5,"column_end":33}},{"value":"/ The coordinates set the position of the top left corner of the SubImage.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055958,"byte_end":1056034,"line_start":1126,"line_end":1126,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":5955},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1056408,"byte_end":1056421,"line_start":1140,"line_end":1140,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"pub fn change_bounds(&mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1056352,"byte_end":1056396,"line_start":1139,"line_end":1139,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":5956},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1056679,"byte_end":1056687,"line_start":1148,"line_end":1148,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"pub fn to_image(&Self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>\nwhere I: Deref, I::Target: GenericImageView + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1056624,"byte_end":1056667,"line_start":1147,"line_end":1147,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":5959},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1058132,"byte_end":1058136,"line_start":1191,"line_end":1191,"column_start":12,"column_end":16},"name":"view","qualname":"<SubImage<I>>::view","value":"pub fn view(&Self, u32, u32, u32, u32) -> SubImage<&I::Target>","parent":null,"children":[],"decl_id":null,"docs":" Create a sub-view of the image.","sig":null,"attributes":[{"value":"/ Create a sub-view of the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057335,"byte_end":1057370,"line_start":1173,"line_end":1173,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057375,"byte_end":1057378,"line_start":1174,"line_end":1174,"column_start":5,"column_end":8}},{"value":"/ The coordinates given are relative to the current view on the underlying image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057383,"byte_end":1057466,"line_start":1175,"line_end":1175,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057471,"byte_end":1057474,"line_start":1176,"line_end":1176,"column_start":5,"column_end":8}},{"value":"/ Note that this method is preferred to the one from `GenericImageView`. This is accessible","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057479,"byte_end":1057572,"line_start":1177,"line_end":1177,"column_start":5,"column_end":98}},{"value":"/ with the explicit method call syntax but it should rarely be needed due to causing an","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057577,"byte_end":1057666,"line_start":1178,"line_end":1178,"column_start":5,"column_end":94}},{"value":"/ extra level of indirection.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057671,"byte_end":1057702,"line_start":1179,"line_end":1179,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057707,"byte_end":1057710,"line_start":1180,"line_end":1180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057715,"byte_end":1057722,"line_start":1181,"line_end":1181,"column_start":5,"column_end":12}},{"value":"/ use image::{GenericImageView, RgbImage, SubImage};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057727,"byte_end":1057781,"line_start":1182,"line_end":1182,"column_start":5,"column_end":59}},{"value":"/ let buffer = RgbImage::new(10, 10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057786,"byte_end":1057825,"line_start":1183,"line_end":1183,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057830,"byte_end":1057833,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ let subimage: SubImage<&RgbImage> = buffer.view(0, 0, 10, 10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057838,"byte_end":1057904,"line_start":1185,"line_end":1185,"column_start":5,"column_end":71}},{"value":"/ let subview: SubImage<&RgbImage> = subimage.view(0, 0, 10, 10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057909,"byte_end":1057976,"line_start":1186,"line_end":1186,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057981,"byte_end":1057984,"line_start":1187,"line_end":1187,"column_start":5,"column_end":8}},{"value":"/ // Less efficient and NOT &RgbImage","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057989,"byte_end":1058028,"line_start":1188,"line_end":1188,"column_start":5,"column_end":44}},{"value":"/ let _: SubImage<&_> = GenericImageView::view(&*subimage, 0, 0, 10, 10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1058033,"byte_end":1058108,"line_start":1189,"line_end":1189,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1058113,"byte_end":1058120,"line_start":1190,"line_end":1190,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":5963},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1058607,"byte_end":1058612,"line_start":1201,"line_end":1201,"column_start":12,"column_end":17},"name":"inner","qualname":"<SubImage<I>>::inner","value":"pub fn inner(&Self) -> &I::Target","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Get a reference to the underlying image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1058551,"byte_end":1058595,"line_start":1200,"line_end":1200,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":5966},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1058900,"byte_end":1058909,"line_start":1214,"line_end":1214,"column_start":12,"column_end":21},"name":"sub_image","qualname":"<SubImage<I>>::sub_image","value":"pub fn sub_image(&mut Self, u32, u32, u32, u32) -> SubImage<&mut I::Target>","parent":null,"children":[],"decl_id":null,"docs":" Create a mutable sub-view of the image.","sig":null,"attributes":[{"value":"/ Create a mutable sub-view of the image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1058749,"byte_end":1058792,"line_start":1211,"line_end":1211,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1058797,"byte_end":1058800,"line_start":1212,"line_end":1212,"column_start":5,"column_end":8}},{"value":"/ The coordinates given are relative to the current view on the underlying image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1058805,"byte_end":1058888,"line_start":1213,"line_end":1213,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":5967},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1059405,"byte_end":1059414,"line_start":1229,"line_end":1229,"column_start":12,"column_end":21},"name":"inner_mut","qualname":"<SubImage<I>>::inner_mut","value":"pub fn inner_mut(&mut Self) -> &mut I::Target","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference to the underlying image.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1059341,"byte_end":1059393,"line_start":1228,"line_end":1228,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":6016},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1077765,"byte_end":1077780,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"EncodableLayout","qualname":"::traits::EncodableLayout","value":"EncodableLayout: seals::EncodableLayout","parent":null,"children":[{"krate":0,"index":6017}],"decl_id":null,"docs":" Types which are safe to treat as an immutable byte slice in a pixel layout\n for image encoding.\n","sig":null,"attributes":[{"value":"/ Types which are safe to treat as an immutable byte slice in a pixel layout","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1077652,"byte_end":1077730,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ for image encoding.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1077731,"byte_end":1077754,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":6017},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1077851,"byte_end":1077859,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::traits::EncodableLayout::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":6016},"children":[],"decl_id":null,"docs":" Get the bytes of this value.\n","sig":null,"attributes":[{"value":"/ Get the bytes of this value.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1077811,"byte_end":1077843,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":6024},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078381,"byte_end":1078390,"line_start":37,"line_end":37,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[{"krate":0,"index":6025},{"krate":0,"index":6026}],"decl_id":null,"docs":" The type of each channel in a pixel. For example, this can be `u8`, `u16`, `f32`.\n","sig":null,"attributes":[{"value":"/ The type of each channel in a pixel. For example, this can be `u8`, `u16`, `f32`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078212,"byte_end":1078297,"line_start":35,"line_end":35,"column_start":1,"column_end":86}}]},{"kind":"Const","id":{"krate":0,"index":6025},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078648,"byte_end":1078665,"line_start":40,"line_end":40,"column_start":11,"column_end":28},"name":"DEFAULT_MAX_VALUE","qualname":"::traits::Primitive::DEFAULT_MAX_VALUE","value":"Self","parent":{"krate":0,"index":6024},"children":[],"decl_id":null,"docs":" The maximum value for this type of primitive within the context of color.\n For floats, the maximum is `1.0`, whereas the integer types inherit their usual maximum values.\n","sig":null,"attributes":[{"value":"/ The maximum value for this type of primitive within the context of color.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078456,"byte_end":1078533,"line_start":38,"line_end":38,"column_start":5,"column_end":82}},{"value":"/ For floats, the maximum is `1.0`, whereas the integer types inherit their usual maximum values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078538,"byte_end":1078637,"line_start":39,"line_end":39,"column_start":5,"column_end":104}}]},{"kind":"Const","id":{"krate":0,"index":6026},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078870,"byte_end":1078887,"line_start":44,"line_end":44,"column_start":11,"column_end":28},"name":"DEFAULT_MIN_VALUE","qualname":"::traits::Primitive::DEFAULT_MIN_VALUE","value":"Self","parent":{"krate":0,"index":6024},"children":[],"decl_id":null,"docs":" The minimum value for this type of primitive within the context of color.\n For floats, the minimum is `0.0`, whereas the integer types inherit their usual minimum values.\n","sig":null,"attributes":[{"value":"/ The minimum value for this type of primitive within the context of color.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078678,"byte_end":1078755,"line_start":42,"line_end":42,"column_start":5,"column_end":82}},{"value":"/ For floats, the minimum is `0.0`, whereas the integer types inherit their usual minimum values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078760,"byte_end":1078859,"line_start":43,"line_end":43,"column_start":5,"column_end":104}}]},{"kind":"Trait","id":{"krate":0,"index":6028},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1079801,"byte_end":1079812,"line_start":72,"line_end":72,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":6029},{"krate":0,"index":6030},{"krate":0,"index":6031}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1079658,"byte_end":1079719,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1079720,"byte_end":1079790,"line_start":71,"line_end":71,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":6029},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1079851,"byte_end":1079857,"line_start":73,"line_end":73,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Copy + NumCast + Num + PartialOrd<Self::Larger> + Clone + Bounded + AddAssign;","parent":{"krate":0,"index":6028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6030},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1079946,"byte_end":1079956,"line_start":75,"line_end":75,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"pub fn clamp_from(Self::Larger) -> Self","parent":{"krate":0,"index":6028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6031},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1080224,"byte_end":1080233,"line_start":85,"line_end":85,"column_start":8,"column_end":17},"name":"to_larger","qualname":"::traits::Enlargeable::to_larger","value":"pub fn to_larger(Self) -> Self::Larger","parent":{"krate":0,"index":6028},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6056},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1081136,"byte_end":1081140,"line_start":130,"line_end":130,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::traits::Lerp","value":"Lerp: Bounded + NumCast","parent":null,"children":[{"krate":0,"index":6057},{"krate":0,"index":6058}],"decl_id":null,"docs":" Linear interpolation without involving floating numbers.\n","sig":null,"attributes":[{"value":"/ Linear interpolation without involving floating numbers.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1081065,"byte_end":1081125,"line_start":129,"line_end":129,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":6057},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1081171,"byte_end":1081176,"line_start":131,"line_end":131,"column_start":10,"column_end":15},"name":"Ratio","qualname":"::traits::Lerp::Ratio","value":"type Ratio: Primitive;","parent":{"krate":0,"index":6056},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":6058},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1081197,"byte_end":1081201,"line_start":133,"line_end":133,"column_start":8,"column_end":12},"name":"lerp","qualname":"::traits::Lerp::lerp","value":"pub fn lerp(Self, Self, Self::Ratio) -> Self","parent":{"krate":0,"index":6056},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6068},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082072,"byte_end":1082090,"line_start":171,"line_end":171,"column_start":11,"column_end":29},"name":"PixelWithColorType","qualname":"::traits::PixelWithColorType","value":"PixelWithColorType: Pixel + self::private::SealedPixelWithColorType","parent":null,"children":[{"krate":0,"index":6069}],"decl_id":null,"docs":" The pixel with an associated `ColorType`.\n Not all possible pixels represent one of the predefined `ColorType`s.\n","sig":null,"attributes":[{"value":"/ The pixel with an associated `ColorType`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1081942,"byte_end":1081987,"line_start":169,"line_end":169,"column_start":1,"column_end":46}},{"value":"/ Not all possible pixels represent one of the predefined `ColorType`s.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1081988,"byte_end":1082061,"line_start":170,"line_end":170,"column_start":1,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":6069},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082376,"byte_end":1082386,"line_start":176,"line_end":176,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::traits::PixelWithColorType::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":6068},"children":[],"decl_id":null,"docs":" This pixel has the format of one of the predefined `ColorType`s,\n such as `Rgb8`, `La16` or `Rgba32F`.\n This is needed for automatically detecting\n a color format when saving an image as a file.\n","sig":null,"attributes":[{"value":"/ This pixel has the format of one of the predefined `ColorType`s,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082146,"byte_end":1082214,"line_start":172,"line_end":172,"column_start":5,"column_end":73}},{"value":"/ such as `Rgb8`, `La16` or `Rgba32F`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082219,"byte_end":1082259,"line_start":173,"line_end":173,"column_start":5,"column_end":45}},{"value":"/ This is needed for automatically detecting","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082264,"byte_end":1082310,"line_start":174,"line_end":174,"column_start":5,"column_end":51}},{"value":"/ a color format when saving an image as a file.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082315,"byte_end":1082365,"line_start":175,"line_end":175,"column_start":5,"column_end":55}}]},{"kind":"Trait","id":{"krate":0,"index":6092},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083460,"byte_end":1083484,"line_start":216,"line_end":216,"column_start":15,"column_end":39},"name":"SealedPixelWithColorType","qualname":"::traits::private::SealedPixelWithColorType","value":"SealedPixelWithColorType","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":6103},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084124,"byte_end":1084129,"line_start":235,"line_end":235,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::traits::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":6104},{"krate":0,"index":6105},{"krate":0,"index":6106},{"krate":0,"index":6107},{"krate":0,"index":6108},{"krate":0,"index":6109},{"krate":0,"index":6110},{"krate":0,"index":6111},{"krate":0,"index":6112},{"krate":0,"index":6113},{"krate":0,"index":6114},{"krate":0,"index":6115},{"krate":0,"index":6116},{"krate":0,"index":6117},{"krate":0,"index":6119},{"krate":0,"index":6121},{"krate":0,"index":6124},{"krate":0,"index":6127},{"krate":0,"index":6130},{"krate":0,"index":6133},{"krate":0,"index":6135},{"krate":0,"index":6137},{"krate":0,"index":6138}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083999,"byte_end":1084023,"line_start":232,"line_end":232,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084024,"byte_end":1084027,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084028,"byte_end":1084113,"line_start":234,"line_end":234,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":6104},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084229,"byte_end":1084237,"line_start":237,"line_end":237,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::traits::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" The scalar type that is used to store each channel in this pixel.\n","sig":null,"attributes":[{"value":"/ The scalar type that is used to store each channel in this pixel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084150,"byte_end":1084219,"line_start":236,"line_end":236,"column_start":5,"column_end":74}}]},{"kind":"Const","id":{"krate":0,"index":6105},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084312,"byte_end":1084325,"line_start":240,"line_end":240,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::traits::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ The number of channels of this pixel type.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084255,"byte_end":1084301,"line_start":239,"line_end":239,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":6106},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084382,"byte_end":1084390,"line_start":243,"line_end":243,"column_start":8,"column_end":16},"name":"channels","qualname":"::traits::Pixel::channels","value":"pub fn channels(&Self) -> &[Self::Subpixel]","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084336,"byte_end":1084374,"line_start":242,"line_end":242,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":6107},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084478,"byte_end":1084490,"line_start":246,"line_end":246,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::traits::Pixel::channels_mut","value":"pub fn channels_mut(&mut Self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084425,"byte_end":1084470,"line_start":245,"line_end":245,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":6108},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084656,"byte_end":1084667,"line_start":250,"line_end":250,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::traits::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ A string that can help to interpret the meaning each channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084533,"byte_end":1084597,"line_start":248,"line_end":248,"column_start":5,"column_end":69}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084602,"byte_end":1084645,"line_start":249,"line_end":249,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":6109},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084924,"byte_end":1084933,"line_start":255,"line_end":255,"column_start":8,"column_end":17},"name":"channels4","qualname":"::traits::Pixel::channels4","value":"pub fn channels4(&Self)\n-> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value\n","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084688,"byte_end":1084753,"line_start":252,"line_end":252,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084758,"byte_end":1084833,"line_start":253,"line_end":253,"column_start":5,"column_end":80}},{"value":"deprecated(since = \"0.24.0\", note = \"Use `channels()` or `channels_mut()`\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084838,"byte_end":1084916,"line_start":254,"line_end":254,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":6110},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085363,"byte_end":1085376,"line_start":270,"line_end":270,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::traits::Pixel::from_channels","value":"pub fn from_channels(Self::Subpixel, Self::Subpixel, Self::Subpixel,\n                     Self::Subpixel) -> Self","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.\n","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085069,"byte_end":1085125,"line_start":264,"line_end":264,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085130,"byte_end":1085197,"line_start":265,"line_end":265,"column_start":5,"column_end":72}},{"value":"deprecated(since = \"0.24.0\", note =\n             \"Use the constructor of the pixel, for example `Rgba::new(r,g,b,a)` or `Pixel::from_slice`\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085202,"byte_end":1085355,"line_start":266,"line_end":269,"column_start":5,"column_end":7}}]},{"kind":"Method","id":{"krate":0,"index":6111},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085730,"byte_end":1085740,"line_start":281,"line_end":281,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::traits::Pixel::from_slice","value":"pub fn from_slice(&[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085506,"byte_end":1085538,"line_start":277,"line_end":277,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085543,"byte_end":1085546,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085551,"byte_end":1085635,"line_start":279,"line_end":279,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085640,"byte_end":1085722,"line_start":280,"line_end":280,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":6112},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086020,"byte_end":1086034,"line_start":287,"line_end":287,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::traits::Pixel::from_slice_mut","value":"pub fn from_slice_mut(&mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085782,"byte_end":1085828,"line_start":283,"line_end":283,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085833,"byte_end":1085836,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085841,"byte_end":1085925,"line_start":285,"line_end":285,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to prevent panics if the pixel is used later on.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1085930,"byte_end":1086012,"line_start":286,"line_end":286,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":6113},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086121,"byte_end":1086127,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::traits::Pixel::to_rgb","value":"pub fn to_rgb(&Self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086084,"byte_end":1086113,"line_start":289,"line_end":289,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":6114},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086223,"byte_end":1086230,"line_start":293,"line_end":293,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::traits::Pixel::to_rgba","value":"pub fn to_rgba(&Self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086164,"byte_end":1086215,"line_start":292,"line_end":292,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":6115},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086306,"byte_end":1086313,"line_start":296,"line_end":296,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::traits::Pixel::to_luma","value":"pub fn to_luma(&Self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086268,"byte_end":1086298,"line_start":295,"line_end":295,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":6116},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086411,"byte_end":1086424,"line_start":299,"line_end":299,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::traits::Pixel::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086351,"byte_end":1086403,"line_start":298,"line_end":298,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":6117},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086532,"byte_end":1086535,"line_start":302,"line_end":302,"column_start":8,"column_end":11},"name":"map","qualname":"::traits::Pixel::map","value":"pub fn map<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086463,"byte_end":1086524,"line_start":301,"line_end":301,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":6119},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086696,"byte_end":1086701,"line_start":307,"line_end":307,"column_start":8,"column_end":13},"name":"apply","qualname":"::traits::Pixel::apply","value":"pub fn apply<F>(&mut Self, F) where F: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086627,"byte_end":1086688,"line_start":306,"line_end":306,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":6121},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086926,"byte_end":1086940,"line_start":313,"line_end":313,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::traits::Pixel::map_with_alpha","value":"pub fn map_with_alpha<F, G>(&Self, F, G) -> Self where\nF: FnMut(Self::Subpixel) -> Self::Subpixel, G: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086789,"byte_end":1086861,"line_start":311,"line_end":311,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1086866,"byte_end":1086918,"line_start":312,"line_end":312,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":6124},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1087246,"byte_end":1087262,"line_start":320,"line_end":320,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::traits::Pixel::apply_with_alpha","value":"pub fn apply_with_alpha<F, G>(&mut Self, F, G) where F: FnMut(Self::Subpixel)\n-> Self::Subpixel, G: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1087093,"byte_end":1087165,"line_start":318,"line_end":318,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1087170,"byte_end":1087238,"line_start":319,"line_end":319,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":6127},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1087491,"byte_end":1087508,"line_start":326,"line_end":326,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::traits::Pixel::map_without_alpha","value":"pub fn map_without_alpha<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel)\n-> Self::Subpixel","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1087411,"byte_end":1087483,"line_start":325,"line_end":325,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":6130},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1087800,"byte_end":1087819,"line_start":337,"line_end":337,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::traits::Pixel::apply_without_alpha","value":"pub fn apply_without_alpha<F>(&mut Self, F) where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1087696,"byte_end":1087768,"line_start":335,"line_end":335,"column_start":5,"column_end":77}},{"value":"/ Works in place.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1087773,"byte_end":1087792,"line_start":336,"line_end":336,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":6133},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1088062,"byte_end":1088066,"line_start":346,"line_end":346,"column_start":8,"column_end":12},"name":"map2","qualname":"::traits::Pixel::map2","value":"pub fn map2<F>(&Self, &Self, F) -> Self where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1087960,"byte_end":1088024,"line_start":344,"line_end":344,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1088029,"byte_end":1088054,"line_start":345,"line_end":345,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":6135},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1088306,"byte_end":1088312,"line_start":352,"line_end":352,"column_start":8,"column_end":14},"name":"apply2","qualname":"::traits::Pixel::apply2","value":"pub fn apply2<F>(&mut Self, &Self, F) where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1088188,"byte_end":1088252,"line_start":350,"line_end":350,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1088257,"byte_end":1088298,"line_start":351,"line_end":351,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":6137},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1088459,"byte_end":1088465,"line_start":357,"line_end":357,"column_start":8,"column_end":14},"name":"invert","qualname":"::traits::Pixel::invert","value":"pub fn invert(&mut Self)","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1088430,"byte_end":1088451,"line_start":356,"line_end":356,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":6138},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1088576,"byte_end":1088581,"line_start":360,"line_end":360,"column_start":8,"column_end":13},"name":"blend","qualname":"::traits::Pixel::blend","value":"pub fn blend(&mut Self, &Self)","parent":{"krate":0,"index":6103},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1088483,"byte_end":1088568,"line_start":359,"line_end":359,"column_start":5,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":6140},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1088690,"byte_end":1088705,"line_start":365,"line_end":365,"column_start":15,"column_end":30},"name":"EncodableLayout","qualname":"::traits::seals::EncodableLayout","value":"EncodableLayout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16316,"byte_end":16332,"line_start":192,"line_end":192,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16997,"byte_end":17010,"line_start":212,"line_end":212,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17763,"byte_end":17776,"line_start":237,"line_end":237,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":171},{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18530,"byte_end":18544,"line_start":262,"line_end":262,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18923,"byte_end":18933,"line_start":277,"line_end":277,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":19269,"byte_end":19279,"line_start":289,"line_end":289,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":19395,"byte_end":19410,"line_start":295,"line_end":295,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":19539,"byte_end":19554,"line_start":301,"line_end":301,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":19804,"byte_end":19820,"line_start":310,"line_end":310,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":188}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":20123,"byte_end":20133,"line_start":322,"line_end":322,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":192}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":20594,"byte_end":20604,"line_start":335,"line_end":335,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":21057,"byte_end":21073,"line_start":348,"line_end":348,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":22446,"byte_end":22462,"line_start":383,"line_end":383,"column_start":16,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":22489,"byte_end":22503,"line_start":385,"line_end":385,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":199}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":23376,"byte_end":23390,"line_start":411,"line_end":411,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":23595,"byte_end":23608,"line_start":420,"line_end":420,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":203}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":23991,"byte_end":24004,"line_start":433,"line_end":433,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":24209,"byte_end":24222,"line_start":442,"line_end":442,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":207}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":24700,"byte_end":24713,"line_start":456,"line_end":456,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":209}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":24918,"byte_end":24928,"line_start":465,"line_end":465,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":211}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":25432,"byte_end":25442,"line_start":478,"line_end":478,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":25469,"byte_end":25484,"line_start":480,"line_end":480,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72531,"byte_end":72538,"line_start":403,"line_end":403,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":73305,"byte_end":73313,"line_start":438,"line_end":438,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":83617,"byte_end":83629,"line_start":112,"line_end":112,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":92055,"byte_end":92067,"line_start":388,"line_end":388,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":120215,"byte_end":120226,"line_start":94,"line_end":94,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":121334,"byte_end":121344,"line_start":127,"line_end":127,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":815},{"krate":0,"index":816}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129962,"byte_end":129968,"line_start":70,"line_end":70,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132032,"byte_end":132038,"line_start":135,"line_end":135,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132862,"byte_end":132868,"line_start":160,"line_end":160,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111085,"byte_end":111097,"line_start":19,"line_end":19,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113145,"byte_end":113151,"line_start":62,"line_end":62,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113376,"byte_end":113382,"line_start":73,"line_end":73,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140754,"byte_end":140766,"line_start":127,"line_end":127,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1004},{"krate":0,"index":1006},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1017},{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153442,"byte_end":153445,"line_start":446,"line_end":446,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153705,"byte_end":153716,"line_start":461,"line_end":461,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1041},{"krate":0,"index":1043},{"krate":0,"index":1045},{"krate":0,"index":1047},{"krate":0,"index":1049},{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171174,"byte_end":171185,"line_start":913,"line_end":913,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177161,"byte_end":177165,"line_start":1070,"line_end":1070,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182769,"byte_end":182776,"line_start":1206,"line_end":1206,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":187207,"byte_end":187218,"line_start":1325,"line_end":1325,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1099},{"krate":0,"index":1100}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":187842,"byte_end":187853,"line_start":1346,"line_end":1346,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":188471,"byte_end":188475,"line_start":1365,"line_end":1365,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1113}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":189633,"byte_end":189640,"line_start":1408,"line_end":1408,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121},{"krate":0,"index":1122},{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":190817,"byte_end":190824,"line_start":1451,"line_end":1451,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1129},{"krate":0,"index":1130},{"krate":0,"index":1131}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":191677,"byte_end":191687,"line_start":1477,"line_end":1477,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1133}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":191839,"byte_end":191862,"line_start":1481,"line_end":1481,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":192070,"byte_end":192093,"line_start":1486,"line_end":1486,"column_start":31,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":192769,"byte_end":192774,"line_start":1506,"line_end":1506,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":193709,"byte_end":193714,"line_start":1530,"line_end":1530,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":193739,"byte_end":193749,"line_start":1532,"line_end":1532,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":203001,"byte_end":203012,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1280},{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":204936,"byte_end":204948,"line_start":164,"line_end":164,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":207117,"byte_end":207127,"line_start":208,"line_end":208,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1285}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":207283,"byte_end":207295,"line_start":214,"line_end":214,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":207642,"byte_end":207659,"line_start":229,"line_end":229,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":215534,"byte_end":215542,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1314},{"krate":0,"index":1315}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":216928,"byte_end":216937,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":218222,"byte_end":218237,"line_start":579,"line_end":579,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":220093,"byte_end":220103,"line_start":631,"line_end":631,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1382},{"krate":0,"index":1385},{"krate":0,"index":1386},{"krate":0,"index":1387},{"krate":0,"index":1389},{"krate":0,"index":1391},{"krate":0,"index":1394},{"krate":0,"index":1396},{"krate":0,"index":1399},{"krate":0,"index":1401},{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":253893,"byte_end":253902,"line_start":1484,"line_end":1484,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1410},{"krate":0,"index":1411}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":254322,"byte_end":254332,"line_start":1498,"line_end":1498,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":255108,"byte_end":255118,"line_start":1528,"line_end":1528,"column_start":56,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":259719,"byte_end":259729,"line_start":17,"line_end":17,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1471},{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1478},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1482}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":267971,"byte_end":267981,"line_start":242,"line_end":242,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1486}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":273682,"byte_end":273694,"line_start":44,"line_end":44,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1550}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":274967,"byte_end":274977,"line_start":73,"line_end":73,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1552}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":275133,"byte_end":275145,"line_start":79,"line_end":79,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":275834,"byte_end":275845,"line_start":117,"line_end":117,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":276574,"byte_end":276580,"line_start":140,"line_end":140,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1558}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":278213,"byte_end":278223,"line_start":187,"line_end":187,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1564},{"krate":0,"index":1565}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":280310,"byte_end":280320,"line_start":247,"line_end":247,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1571}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":284281,"byte_end":284291,"line_start":330,"line_end":330,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1578},{"krate":0,"index":1579},{"krate":0,"index":1580},{"krate":0,"index":1581}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":287161,"byte_end":287171,"line_start":33,"line_end":33,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":1637}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":288128,"byte_end":288138,"line_start":69,"line_end":69,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1647},{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":290164,"byte_end":290174,"line_start":120,"line_end":120,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1652},{"krate":0,"index":1653},{"krate":0,"index":1654},{"krate":0,"index":1655},{"krate":0,"index":1656},{"krate":0,"index":1657}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":291072,"byte_end":291082,"line_start":152,"line_end":152,"column_start":56,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":1661}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292108,"byte_end":292117,"line_start":192,"line_end":192,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1672}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292377,"byte_end":292387,"line_start":204,"line_end":204,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1679},{"krate":0,"index":1680}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":318211,"byte_end":318225,"line_start":41,"line_end":41,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1817}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":319960,"byte_end":319974,"line_start":91,"line_end":91,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1826}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":320753,"byte_end":320767,"line_start":117,"line_end":117,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1829}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":323444,"byte_end":323459,"line_start":191,"line_end":191,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1843}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":323752,"byte_end":323767,"line_start":200,"line_end":200,"column_start":45,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1847},{"krate":0,"index":1848},{"krate":0,"index":1849},{"krate":0,"index":1850},{"krate":0,"index":1851}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":324179,"byte_end":324194,"line_start":220,"line_end":220,"column_start":56,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":1855}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":325060,"byte_end":325075,"line_start":254,"line_end":254,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1865},{"krate":0,"index":1866},{"krate":0,"index":1867}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":326107,"byte_end":326122,"line_start":286,"line_end":286,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1871}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":331438,"byte_end":331448,"line_start":56,"line_end":56,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1974},{"krate":0,"index":1975}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":332369,"byte_end":332378,"line_start":82,"line_end":82,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1983},{"krate":0,"index":1984}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":332791,"byte_end":332801,"line_start":96,"line_end":96,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1991},{"krate":0,"index":1992}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":337647,"byte_end":337663,"line_start":230,"line_end":230,"column_start":15,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2001}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":338274,"byte_end":338290,"line_start":251,"line_end":251,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2004},{"krate":0,"index":2005}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":342851,"byte_end":342861,"line_start":363,"line_end":363,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":2011}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":343153,"byte_end":343162,"line_start":378,"line_end":378,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2020}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":343825,"byte_end":343831,"line_start":401,"line_end":401,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":2022}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344214,"byte_end":344224,"line_start":418,"line_end":418,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036},{"krate":0,"index":2038},{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2044}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":349582,"byte_end":349592,"line_start":566,"line_end":566,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2046},{"krate":0,"index":2048}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":353188,"byte_end":353200,"line_start":52,"line_end":52,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2155}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":354967,"byte_end":354977,"line_start":89,"line_end":89,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2157}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":355133,"byte_end":355145,"line_start":95,"line_end":95,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2159}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":355647,"byte_end":355655,"line_start":115,"line_end":115,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2161}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":356246,"byte_end":356256,"line_start":135,"line_end":135,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2166}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":357630,"byte_end":357639,"line_start":177,"line_end":177,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2174},{"krate":0,"index":2175}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":358055,"byte_end":358065,"line_start":191,"line_end":191,"column_start":48,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2181},{"krate":0,"index":2182},{"krate":0,"index":2183}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":358609,"byte_end":358619,"line_start":214,"line_end":214,"column_start":59,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":2187}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359749,"byte_end":359759,"line_start":266,"line_end":266,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2195},{"krate":0,"index":2196},{"krate":0,"index":2198}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362065,"byte_end":362075,"line_start":331,"line_end":331,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2207},{"krate":0,"index":2208},{"krate":0,"index":2209},{"krate":0,"index":2214},{"krate":0,"index":2216}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":368288,"byte_end":368298,"line_start":498,"line_end":498,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2220},{"krate":0,"index":2221},{"krate":0,"index":2222}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":369192,"byte_end":369215,"line_start":526,"line_end":526,"column_start":15,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2234}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":369505,"byte_end":369528,"line_start":539,"line_end":539,"column_start":28,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":2237},{"krate":0,"index":2238},{"krate":0,"index":2239}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":371334,"byte_end":371357,"line_start":590,"line_end":590,"column_start":37,"column_end":60},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377778,"byte_end":377789,"line_start":762,"line_end":762,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2261},{"krate":0,"index":2262}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":388604,"byte_end":388614,"line_start":12,"line_end":12,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2321},{"krate":0,"index":2322}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":391197,"byte_end":391208,"line_start":90,"line_end":90,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2338}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":391334,"byte_end":391345,"line_start":96,"line_end":96,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2341},{"krate":0,"index":2342}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":392046,"byte_end":392066,"line_start":125,"line_end":125,"column_start":10,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2350}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":392325,"byte_end":392345,"line_start":135,"line_end":135,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2353},{"krate":0,"index":2354}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":405971,"byte_end":405983,"line_start":46,"line_end":46,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2454}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":407233,"byte_end":407243,"line_start":75,"line_end":75,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2456}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":407399,"byte_end":407411,"line_start":81,"line_end":81,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":407652,"byte_end":407671,"line_start":92,"line_end":92,"column_start":23,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2459}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":407911,"byte_end":407930,"line_start":101,"line_end":101,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2461}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":409211,"byte_end":409221,"line_start":146,"line_end":146,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2476}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":411564,"byte_end":411572,"line_start":218,"line_end":218,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2484},{"krate":0,"index":2485},{"krate":0,"index":2486},{"krate":0,"index":2487},{"krate":0,"index":2489},{"krate":0,"index":2492}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":412885,"byte_end":412894,"line_start":266,"line_end":266,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2501},{"krate":0,"index":2502}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":413314,"byte_end":413324,"line_start":280,"line_end":280,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":424504,"byte_end":424512,"line_start":34,"line_end":34,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2565},{"krate":0,"index":2567}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":426208,"byte_end":426218,"line_start":84,"line_end":84,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2570},{"krate":0,"index":2571},{"krate":0,"index":2572}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":428472,"byte_end":428482,"line_start":141,"line_end":141,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2575}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":430967,"byte_end":430978,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2646},{"krate":0,"index":2648}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":432761,"byte_end":432771,"line_start":68,"line_end":68,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2656},{"krate":0,"index":2657}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":433184,"byte_end":433195,"line_start":82,"line_end":82,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":2661},{"krate":0,"index":2662},{"krate":0,"index":2663},{"krate":0,"index":2664},{"krate":0,"index":2665}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":434976,"byte_end":434985,"line_start":145,"line_end":145,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":2668}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":435278,"byte_end":435288,"line_start":157,"line_end":157,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":2671}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":474488,"byte_end":474497,"line_start":186,"line_end":186,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2798},{"krate":0,"index":2799},{"krate":0,"index":2800},{"krate":0,"index":2801},{"krate":0,"index":2803},{"krate":0,"index":2807},{"krate":0,"index":2808}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477972,"byte_end":477984,"line_start":318,"line_end":318,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":2810}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":478322,"byte_end":478334,"line_start":330,"line_end":330,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2812}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":478964,"byte_end":478975,"line_start":355,"line_end":355,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2830},{"krate":0,"index":2831},{"krate":0,"index":2834},{"krate":0,"index":2835},{"krate":0,"index":2836},{"krate":0,"index":2840},{"krate":0,"index":2844}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":489562,"byte_end":489573,"line_start":658,"line_end":658,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2854}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":512620,"byte_end":512634,"line_start":52,"line_end":52,"column_start":22,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":2973},{"krate":0,"index":2974},{"krate":0,"index":2978}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":515292,"byte_end":515306,"line_start":111,"line_end":111,"column_start":52,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2982},{"krate":0,"index":2983},{"krate":0,"index":2984},{"krate":0,"index":2985},{"krate":0,"index":2986},{"krate":0,"index":2987},{"krate":0,"index":2988}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":524829,"byte_end":524843,"line_start":346,"line_end":346,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3004}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":525149,"byte_end":525163,"line_start":354,"line_end":354,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3007}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":535783,"byte_end":535792,"line_start":40,"line_end":40,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":3134}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":536584,"byte_end":536593,"line_start":66,"line_end":66,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3137},{"krate":0,"index":3138}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":537986,"byte_end":537996,"line_start":117,"line_end":117,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3145},{"krate":0,"index":3146},{"krate":0,"index":3147}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":542796,"byte_end":542806,"line_start":219,"line_end":219,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3152},{"krate":0,"index":3153},{"krate":0,"index":3154},{"krate":0,"index":3155},{"krate":0,"index":3156},{"krate":0,"index":3168}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":544867,"byte_end":544878,"line_start":283,"line_end":283,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3179},{"krate":0,"index":3180},{"krate":0,"index":3182}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":550549,"byte_end":550560,"line_start":430,"line_end":430,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":3186}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":550698,"byte_end":550711,"line_start":434,"line_end":434,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":3193},{"krate":0,"index":3194}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553138,"byte_end":553148,"line_start":513,"line_end":513,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3202},{"krate":0,"index":3203},{"krate":0,"index":3204},{"krate":0,"index":3205}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":557623,"byte_end":557633,"line_start":614,"line_end":614,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3210}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":559380,"byte_end":559390,"line_start":657,"line_end":657,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3224}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":560330,"byte_end":560345,"line_start":680,"line_end":680,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3227}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":560431,"byte_end":560441,"line_start":686,"line_end":686,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3229}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":560531,"byte_end":560551,"line_start":692,"line_end":692,"column_start":23,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3231}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":560857,"byte_end":560877,"line_start":704,"line_end":704,"column_start":28,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/autobreak.rs","byte_start":569163,"byte_end":569172,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3285},{"krate":0,"index":3286}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/autobreak.rs","byte_start":570433,"byte_end":570442,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3289},{"krate":0,"index":3290}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/autobreak.rs","byte_start":571068,"byte_end":571077,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3293}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":574916,"byte_end":574928,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3413}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":578210,"byte_end":578220,"line_start":158,"line_end":158,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3415}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":578376,"byte_end":578388,"line_start":164,"line_end":164,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3417}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":578864,"byte_end":578877,"line_start":186,"line_end":186,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":3419}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":579469,"byte_end":579484,"line_start":208,"line_end":208,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":3421}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":580504,"byte_end":580514,"line_start":251,"line_end":251,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3443},{"krate":0,"index":3444},{"krate":0,"index":3445},{"krate":0,"index":3446},{"krate":0,"index":3447},{"krate":0,"index":3448}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":592072,"byte_end":592073,"line_start":564,"line_end":564,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":592216,"byte_end":592225,"line_start":568,"line_end":568,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3478},{"krate":0,"index":3479}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":592638,"byte_end":592648,"line_start":582,"line_end":582,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":3483},{"krate":0,"index":3484},{"krate":0,"index":3485},{"krate":0,"index":3486},{"krate":0,"index":3487},{"krate":0,"index":3488}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":594381,"byte_end":594391,"line_start":631,"line_end":631,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3491},{"krate":0,"index":3493},{"krate":0,"index":3495}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":596628,"byte_end":596630,"line_start":692,"line_end":692,"column_start":17,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":3505},{"krate":0,"index":3506},{"krate":0,"index":3507}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":597136,"byte_end":597139,"line_start":710,"line_end":710,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":3509},{"krate":0,"index":3510},{"krate":0,"index":3511}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":598136,"byte_end":598142,"line_start":736,"line_end":736,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3513},{"krate":0,"index":3514},{"krate":0,"index":3515}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":599428,"byte_end":599433,"line_start":774,"line_end":774,"column_start":17,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3518},{"krate":0,"index":3519},{"krate":0,"index":3521}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":600079,"byte_end":600091,"line_start":792,"line_end":792,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3523}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":600216,"byte_end":600229,"line_start":798,"line_end":798,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":3525}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":600545,"byte_end":600557,"line_start":808,"line_end":808,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3527}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":600867,"byte_end":600882,"line_start":818,"line_end":818,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3529}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":618917,"byte_end":618927,"line_start":81,"line_end":81,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3659},{"krate":0,"index":3660},{"krate":0,"index":3661},{"krate":0,"index":3662},{"krate":0,"index":3663},{"krate":0,"index":3666},{"krate":0,"index":3667},{"krate":0,"index":3668}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":626815,"byte_end":626825,"line_start":291,"line_end":291,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3671}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":627058,"byte_end":627076,"line_start":303,"line_end":303,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3674}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":627946,"byte_end":627961,"line_start":331,"line_end":331,"column_start":10,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":3678}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":628522,"byte_end":628539,"line_start":352,"line_end":352,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3681}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":632559,"byte_end":632577,"line_start":446,"line_end":446,"column_start":10,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3684}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":635026,"byte_end":635039,"line_start":510,"line_end":510,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3687},{"krate":0,"index":3688}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":635350,"byte_end":635362,"line_start":523,"line_end":523,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3695},{"krate":0,"index":3697}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":636779,"byte_end":636790,"line_start":568,"line_end":568,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":3701},{"krate":0,"index":3702},{"krate":0,"index":3705}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":638501,"byte_end":638512,"line_start":622,"line_end":622,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3708}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":638631,"byte_end":638642,"line_start":628,"line_end":628,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3711}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":638743,"byte_end":638756,"line_start":634,"line_end":634,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3714}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643613,"byte_end":643630,"line_start":136,"line_end":136,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":3741}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":644142,"byte_end":644152,"line_start":150,"line_end":150,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":3743},{"krate":0,"index":3745}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":645122,"byte_end":645131,"line_start":175,"line_end":175,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":3747},{"krate":0,"index":3748},{"krate":0,"index":3749},{"krate":0,"index":3750},{"krate":0,"index":3751},{"krate":0,"index":3752},{"krate":0,"index":3753},{"krate":0,"index":3754},{"krate":0,"index":3755}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":649805,"byte_end":649819,"line_start":297,"line_end":297,"column_start":43,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":3762}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":650498,"byte_end":650507,"line_start":320,"line_end":320,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3764}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":650700,"byte_end":650709,"line_start":329,"line_end":329,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3766}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":650903,"byte_end":650912,"line_start":338,"line_end":338,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":3768}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":651107,"byte_end":651116,"line_start":347,"line_end":347,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":3770}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":652187,"byte_end":652195,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":3854},{"krate":0,"index":3855}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":653375,"byte_end":653385,"line_start":70,"line_end":70,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3872},{"krate":0,"index":3873},{"krate":0,"index":3874},{"krate":0,"index":3875},{"krate":0,"index":3876},{"krate":0,"index":3877},{"krate":0,"index":3878},{"krate":0,"index":3881},{"krate":0,"index":3882},{"krate":0,"index":3883},{"krate":0,"index":3884},{"krate":0,"index":3885},{"krate":0,"index":3886},{"krate":0,"index":3887}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":665993,"byte_end":666003,"line_start":414,"line_end":414,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3891},{"krate":0,"index":3892},{"krate":0,"index":3893},{"krate":0,"index":3894},{"krate":0,"index":3896},{"krate":0,"index":3897},{"krate":0,"index":3898}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":668916,"byte_end":668925,"line_start":497,"line_end":497,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":3905}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":669570,"byte_end":669582,"line_start":15,"line_end":15,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":3944}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":669949,"byte_end":669959,"line_start":26,"line_end":26,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":3946}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670115,"byte_end":670127,"line_start":32,"line_end":32,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670216,"byte_end":670226,"line_start":39,"line_end":39,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":3953},{"krate":0,"index":3954}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":671750,"byte_end":671760,"line_start":88,"line_end":88,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":3959}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/header.rs","byte_start":676614,"byte_end":676623,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4025},{"krate":0,"index":4026},{"krate":0,"index":4027},{"krate":0,"index":4028}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/header.rs","byte_start":678541,"byte_end":678547,"line_start":80,"line_end":80,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":4030},{"krate":0,"index":4031},{"krate":0,"index":4032}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":682259,"byte_end":682270,"line_start":34,"line_end":34,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":4118}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":685032,"byte_end":685042,"line_start":107,"line_end":107,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4122},{"krate":0,"index":4123}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":686923,"byte_end":686933,"line_start":151,"line_end":151,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4131},{"krate":0,"index":4132}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":687353,"byte_end":687364,"line_start":165,"line_end":165,"column_start":52,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":4136},{"krate":0,"index":4137},{"krate":0,"index":4138},{"krate":0,"index":4139},{"krate":0,"index":4140}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":690870,"byte_end":690881,"line_start":258,"line_end":258,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":4148},{"krate":0,"index":4149}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":692835,"byte_end":692846,"line_start":310,"line_end":310,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":4152}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":694178,"byte_end":694190,"line_start":27,"line_end":27,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4243}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":694327,"byte_end":694342,"line_start":30,"line_end":30,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":4249}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":695250,"byte_end":695260,"line_start":57,"line_end":57,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4251}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":695417,"byte_end":695429,"line_start":63,"line_end":63,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":695711,"byte_end":695724,"line_start":82,"line_end":82,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4254},{"krate":0,"index":4256}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":697109,"byte_end":697120,"line_start":129,"line_end":129,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4274},{"krate":0,"index":4275},{"krate":0,"index":4278},{"krate":0,"index":4279}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":700950,"byte_end":700960,"line_start":256,"line_end":256,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4292},{"krate":0,"index":4293}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":701373,"byte_end":701384,"line_start":270,"line_end":270,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":4297},{"krate":0,"index":4298},{"krate":0,"index":4299},{"krate":0,"index":4300},{"krate":0,"index":4301}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":703572,"byte_end":703583,"line_start":332,"line_end":332,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":4305}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/huffman.rs","byte_start":712232,"byte_end":712243,"line_start":28,"line_end":28,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4343},{"krate":0,"index":4344},{"krate":0,"index":4345},{"krate":0,"index":4346},{"krate":0,"index":4348},{"krate":0,"index":4349},{"krate":0,"index":4350},{"krate":0,"index":4351}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":720472,"byte_end":720484,"line_start":81,"line_end":81,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4417}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":721487,"byte_end":721497,"line_start":105,"line_end":105,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4419}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":721654,"byte_end":721666,"line_start":111,"line_end":111,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":721969,"byte_end":721984,"line_start":125,"line_end":125,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4424},{"krate":0,"index":4425},{"krate":0,"index":4426},{"krate":0,"index":4427},{"krate":0,"index":4429},{"krate":0,"index":4430},{"krate":0,"index":4431},{"krate":0,"index":4432},{"krate":0,"index":4433},{"krate":0,"index":4434},{"krate":0,"index":4435},{"krate":0,"index":4436},{"krate":0,"index":4437}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":739619,"byte_end":739630,"line_start":641,"line_end":641,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":4439}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":740050,"byte_end":740060,"line_start":658,"line_end":658,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4441},{"krate":0,"index":4442}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":740591,"byte_end":740600,"line_start":679,"line_end":679,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4444},{"krate":0,"index":4445},{"krate":0,"index":4446}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":741671,"byte_end":741684,"line_start":724,"line_end":724,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4449},{"krate":0,"index":4450},{"krate":0,"index":4451}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless_transform.rs","byte_start":744100,"byte_end":744113,"line_start":23,"line_end":23,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4463}],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless_transform.rs","byte_start":758674,"byte_end":758695,"line_start":394,"line_end":394,"column_start":6,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4480}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":761639,"byte_end":761651,"line_start":26,"line_end":26,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4569}],"docs":"","sig":null,"attributes":[]},{"id":236,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":762361,"byte_end":762371,"line_start":44,"line_end":44,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4571}],"docs":"","sig":null,"attributes":[]},{"id":237,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":762528,"byte_end":762540,"line_start":50,"line_end":50,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":238,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":763058,"byte_end":763071,"line_start":78,"line_end":78,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":4574},{"krate":0,"index":4575},{"krate":0,"index":4576},{"krate":0,"index":4585},{"krate":0,"index":4587},{"krate":0,"index":4591},{"krate":0,"index":4593},{"krate":0,"index":4597},{"krate":0,"index":4598}],"docs":"","sig":null,"attributes":[]},{"id":239,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":763598,"byte_end":763611,"line_start":98,"line_end":98,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":4583},{"krate":0,"index":4584}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":772061,"byte_end":772071,"line_start":336,"line_end":336,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4600},{"krate":0,"index":4601},{"krate":0,"index":4602},{"krate":0,"index":4603},{"krate":0,"index":4604}],"docs":"","sig":null,"attributes":[]},{"id":241,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":810905,"byte_end":810917,"line_start":689,"line_end":689,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":4742}],"docs":"","sig":null,"attributes":[]},{"id":242,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":812041,"byte_end":812051,"line_start":717,"line_end":717,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":4744}],"docs":"","sig":null,"attributes":[]},{"id":243,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":812208,"byte_end":812220,"line_start":723,"line_end":723,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":244,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":812341,"byte_end":812351,"line_start":734,"line_end":734,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4753},{"krate":0,"index":4754},{"krate":0,"index":4755},{"krate":0,"index":4756},{"krate":0,"index":4757},{"krate":0,"index":4758},{"krate":0,"index":4759}],"docs":"","sig":null,"attributes":[]},{"id":245,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":816074,"byte_end":816079,"line_start":884,"line_end":884,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":4761},{"krate":0,"index":4762},{"krate":0,"index":4763},{"krate":0,"index":4764},{"krate":0,"index":4765},{"krate":0,"index":4766}],"docs":"","sig":null,"attributes":[]},{"id":246,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":819221,"byte_end":819231,"line_start":1009,"line_end":1009,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":4797},{"krate":0,"index":4802},{"krate":0,"index":4803},{"krate":0,"index":4804},{"krate":0,"index":4807},{"krate":0,"index":4808},{"krate":0,"index":4809},{"krate":0,"index":4811},{"krate":0,"index":4812},{"krate":0,"index":4814},{"krate":0,"index":4819},{"krate":0,"index":4820},{"krate":0,"index":4824},{"krate":0,"index":4825},{"krate":0,"index":4826}],"docs":"","sig":null,"attributes":[]},{"id":247,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":857079,"byte_end":857087,"line_start":2105,"line_end":2105,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":4829},{"krate":0,"index":4830}],"docs":"","sig":null,"attributes":[]},{"id":248,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":857704,"byte_end":857712,"line_start":2128,"line_end":2128,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":4832}],"docs":"","sig":null,"attributes":[]},{"id":249,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":857777,"byte_end":857787,"line_start":2134,"line_end":2134,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4834}],"docs":"","sig":null,"attributes":[]},{"id":250,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":858076,"byte_end":858086,"line_start":2146,"line_end":2146,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":4836}],"docs":"","sig":null,"attributes":[]},{"id":251,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":858153,"byte_end":858162,"line_start":2152,"line_end":2152,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":4838}],"docs":"","sig":null,"attributes":[]},{"id":252,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":858699,"byte_end":858708,"line_start":2170,"line_end":2170,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":4840}],"docs":"","sig":null,"attributes":[]},{"id":253,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":881938,"byte_end":881944,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":4890},{"krate":0,"index":4891}],"docs":"","sig":null,"attributes":[]},{"id":254,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882534,"byte_end":882540,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":4894},{"krate":0,"index":4895}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883059,"byte_end":883064,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":4897},{"krate":0,"index":4898},{"krate":0,"index":4899},{"krate":0,"index":4900},{"krate":0,"index":4901},{"krate":0,"index":4902},{"krate":0,"index":4903},{"krate":0,"index":4904}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884137,"byte_end":884142,"line_start":107,"line_end":107,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":4906},{"krate":0,"index":4907},{"krate":0,"index":4909},{"krate":0,"index":4910},{"krate":0,"index":4911},{"krate":0,"index":4912}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":890331,"byte_end":890339,"line_start":270,"line_end":270,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":4921}],"docs":"","sig":null,"attributes":[]},{"id":258,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":893869,"byte_end":893875,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5030},{"krate":0,"index":5031}],"docs":"","sig":null,"attributes":[]},{"id":259,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":894119,"byte_end":894125,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":5036}],"docs":"","sig":null,"attributes":[]},{"id":260,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":894274,"byte_end":894280,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":5040}],"docs":"","sig":null,"attributes":[]},{"id":261,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":894489,"byte_end":894495,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5044}],"docs":"","sig":null,"attributes":[]},{"id":262,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":894642,"byte_end":894648,"line_start":65,"line_end":65,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5047}],"docs":"","sig":null,"attributes":[]},{"id":263,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":895050,"byte_end":895059,"line_start":84,"line_end":84,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5055},{"krate":0,"index":5056}],"docs":"","sig":null,"attributes":[]},{"id":264,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":895315,"byte_end":895324,"line_start":96,"line_end":96,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":5061}],"docs":"","sig":null,"attributes":[]},{"id":265,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":895473,"byte_end":895482,"line_start":105,"line_end":105,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":5065}],"docs":"","sig":null,"attributes":[]},{"id":266,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":895730,"byte_end":895739,"line_start":117,"line_end":117,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5069}],"docs":"","sig":null,"attributes":[]},{"id":267,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":896292,"byte_end":896296,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":5077}],"docs":"","sig":null,"attributes":[]},{"id":268,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":897214,"byte_end":897218,"line_start":162,"line_end":162,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5081},{"krate":0,"index":5082}],"docs":"","sig":null,"attributes":[]},{"id":269,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":897628,"byte_end":897632,"line_start":178,"line_end":178,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5086}],"docs":"","sig":null,"attributes":[]},{"id":270,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":897781,"byte_end":897785,"line_start":187,"line_end":187,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":5090}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898152,"byte_end":898156,"line_start":201,"line_end":201,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5093}],"docs":"","sig":null,"attributes":[]},{"id":272,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898301,"byte_end":898305,"line_start":209,"line_end":209,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5096}],"docs":"","sig":null,"attributes":[]},{"id":273,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898879,"byte_end":898886,"line_start":232,"line_end":232,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":5104}],"docs":"","sig":null,"attributes":[]},{"id":274,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":899826,"byte_end":899833,"line_start":254,"line_end":254,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5108},{"krate":0,"index":5109}],"docs":"","sig":null,"attributes":[]},{"id":275,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":900256,"byte_end":900263,"line_start":270,"line_end":270,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":5113}],"docs":"","sig":null,"attributes":[]},{"id":276,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":900412,"byte_end":900419,"line_start":279,"line_end":279,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":5117}],"docs":"","sig":null,"attributes":[]},{"id":277,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":900801,"byte_end":900808,"line_start":293,"line_end":293,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5120}],"docs":"","sig":null,"attributes":[]},{"id":278,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":901251,"byte_end":901266,"line_start":315,"line_end":315,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":5131},{"krate":0,"index":5132}],"docs":"","sig":null,"attributes":[]},{"id":279,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":901669,"byte_end":901684,"line_start":333,"line_end":333,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5137}],"docs":"","sig":null,"attributes":[]},{"id":280,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":901810,"byte_end":901825,"line_start":342,"line_end":342,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5140}],"docs":"","sig":null,"attributes":[]},{"id":281,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":902001,"byte_end":902016,"line_start":351,"line_end":351,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":5143}],"docs":"","sig":null,"attributes":[]},{"id":282,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":902554,"byte_end":902567,"line_start":375,"line_end":375,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":5153},{"krate":0,"index":5154}],"docs":"","sig":null,"attributes":[]},{"id":283,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":903105,"byte_end":903118,"line_start":399,"line_end":399,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5159}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":903242,"byte_end":903255,"line_start":408,"line_end":408,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5162}],"docs":"","sig":null,"attributes":[]},{"id":285,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":903425,"byte_end":903438,"line_start":417,"line_end":417,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5165}],"docs":"","sig":null,"attributes":[]},{"id":286,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":903963,"byte_end":903981,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":5176},{"krate":0,"index":5177}],"docs":"","sig":null,"attributes":[]},{"id":287,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":904392,"byte_end":904410,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":5182}],"docs":"","sig":null,"attributes":[]},{"id":288,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":904541,"byte_end":904559,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":5185}],"docs":"","sig":null,"attributes":[]},{"id":289,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":905106,"byte_end":905122,"line_start":492,"line_end":492,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":5195},{"krate":0,"index":5196}],"docs":"","sig":null,"attributes":[]},{"id":290,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":905669,"byte_end":905685,"line_start":516,"line_end":516,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5201}],"docs":"","sig":null,"attributes":[]},{"id":291,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":905814,"byte_end":905830,"line_start":525,"line_end":525,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":5204}],"docs":"","sig":null,"attributes":[]},{"id":292,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908701,"byte_end":908712,"line_start":615,"line_end":615,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5208},{"krate":0,"index":5209},{"krate":0,"index":5210},{"krate":0,"index":5211},{"krate":0,"index":5212},{"krate":0,"index":5213},{"krate":0,"index":5214},{"krate":0,"index":5215},{"krate":0,"index":5216},{"krate":0,"index":5217},{"krate":0,"index":5218},{"krate":0,"index":5219},{"krate":0,"index":5220},{"krate":0,"index":5222},{"krate":0,"index":5224},{"krate":0,"index":5227},{"krate":0,"index":5228},{"krate":0,"index":5229},{"krate":0,"index":5230},{"krate":0,"index":5231},{"krate":0,"index":5232}],"docs":"","sig":null,"attributes":[]},{"id":293,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":916480,"byte_end":916491,"line_start":835,"line_end":835,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5236},{"krate":0,"index":5237},{"krate":0,"index":5238},{"krate":0,"index":5239},{"krate":0,"index":5240},{"krate":0,"index":5241},{"krate":0,"index":5242},{"krate":0,"index":5244}],"docs":"","sig":null,"attributes":[]},{"id":294,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":919811,"byte_end":919822,"line_start":932,"line_end":932,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5248}],"docs":"","sig":null,"attributes":[]},{"id":295,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":920418,"byte_end":920429,"line_start":956,"line_end":956,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5253}],"docs":"","sig":null,"attributes":[]},{"id":296,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":921211,"byte_end":921222,"line_start":984,"line_end":984,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":5258}],"docs":"","sig":null,"attributes":[]},{"id":297,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":922170,"byte_end":922181,"line_start":1015,"line_end":1015,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5264}],"docs":"","sig":null,"attributes":[]},{"id":298,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":922450,"byte_end":922461,"line_start":1030,"line_end":1030,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5268},{"krate":0,"index":5269}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":922689,"byte_end":922700,"line_start":1042,"line_end":1042,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":5273}],"docs":"","sig":null,"attributes":[]},{"id":300,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":922930,"byte_end":922941,"line_start":1052,"line_end":1052,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":5277},{"krate":0,"index":5278}],"docs":"","sig":null,"attributes":[]},{"id":301,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":923176,"byte_end":923187,"line_start":1064,"line_end":1064,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":5282}],"docs":"","sig":null,"attributes":[]},{"id":302,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":923412,"byte_end":923423,"line_start":1074,"line_end":1074,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5286}],"docs":"","sig":null,"attributes":[]},{"id":303,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":923782,"byte_end":923793,"line_start":1089,"line_end":1089,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":5290},{"krate":0,"index":5291},{"krate":0,"index":5292},{"krate":0,"index":5293},{"krate":0,"index":5294}],"docs":"","sig":null,"attributes":[]},{"id":304,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":924482,"byte_end":924493,"line_start":1116,"line_end":1116,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":5298},{"krate":0,"index":5299},{"krate":0,"index":5300},{"krate":0,"index":5301},{"krate":0,"index":5302}],"docs":"","sig":null,"attributes":[]},{"id":305,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927156,"byte_end":927167,"line_start":1188,"line_end":1188,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5305},{"krate":0,"index":5306},{"krate":0,"index":5307},{"krate":0,"index":5309},{"krate":0,"index":5310}],"docs":"","sig":null,"attributes":[]},{"id":306,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929569,"byte_end":929578,"line_start":1263,"line_end":1263,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":5315}],"docs":"","sig":null,"attributes":[]},{"id":307,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":930956,"byte_end":930967,"line_start":1301,"line_end":1301,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":5323}],"docs":"","sig":null,"attributes":[]},{"id":308,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":943078,"byte_end":943087,"line_start":35,"line_end":35,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":5363},{"krate":0,"index":5364},{"krate":0,"index":5366},{"krate":0,"index":5368},{"krate":0,"index":5369}],"docs":"","sig":null,"attributes":[]},{"id":309,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946739,"byte_end":946756,"line_start":151,"line_end":151,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":5371}],"docs":"","sig":null,"attributes":[]},{"id":310,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":948077,"byte_end":948094,"line_start":187,"line_end":187,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5373}],"docs":"","sig":null,"attributes":[]},{"id":311,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":953614,"byte_end":953615,"line_start":378,"line_end":378,"column_start":41,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":5380}],"docs":"","sig":null,"attributes":[]},{"id":318,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":955857,"byte_end":955858,"line_start":454,"line_end":454,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5404}],"docs":"","sig":null,"attributes":[]},{"id":319,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":956881,"byte_end":956885,"line_start":481,"line_end":481,"column_start":57,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5413}],"docs":"","sig":null,"attributes":[]},{"id":320,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":957159,"byte_end":957163,"line_start":492,"line_end":492,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5417}],"docs":"","sig":null,"attributes":[]},{"id":321,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":957399,"byte_end":957403,"line_start":501,"line_end":501,"column_start":70,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":5421}],"docs":"","sig":null,"attributes":[]},{"id":322,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":957697,"byte_end":957701,"line_start":512,"line_end":512,"column_start":71,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":5425}],"docs":"","sig":null,"attributes":[]},{"id":323,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":958028,"byte_end":958033,"line_start":526,"line_end":526,"column_start":58,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":5429}],"docs":"","sig":null,"attributes":[]},{"id":324,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":958366,"byte_end":958371,"line_start":538,"line_end":538,"column_start":70,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":5433}],"docs":"","sig":null,"attributes":[]},{"id":325,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":958711,"byte_end":958716,"line_start":550,"line_end":550,"column_start":71,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":5437}],"docs":"","sig":null,"attributes":[]},{"id":326,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":959051,"byte_end":959056,"line_start":562,"line_end":562,"column_start":57,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5441}],"docs":"","sig":null,"attributes":[]},{"id":327,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":959375,"byte_end":959379,"line_start":575,"line_end":575,"column_start":57,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5445}],"docs":"","sig":null,"attributes":[]},{"id":328,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":959773,"byte_end":959777,"line_start":589,"line_end":589,"column_start":56,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5449}],"docs":"","sig":null,"attributes":[]},{"id":329,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":960162,"byte_end":960166,"line_start":603,"line_end":603,"column_start":58,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5453}],"docs":"","sig":null,"attributes":[]},{"id":330,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":960560,"byte_end":960564,"line_start":617,"line_end":617,"column_start":57,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5457}],"docs":"","sig":null,"attributes":[]},{"id":331,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":960967,"byte_end":960970,"line_start":633,"line_end":633,"column_start":56,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":5461}],"docs":"","sig":null,"attributes":[]},{"id":332,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":961318,"byte_end":961321,"line_start":646,"line_end":646,"column_start":57,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5465}],"docs":"","sig":null,"attributes":[]},{"id":333,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":961667,"byte_end":961670,"line_start":659,"line_end":659,"column_start":58,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5469}],"docs":"","sig":null,"attributes":[]},{"id":334,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":962009,"byte_end":962012,"line_start":672,"line_end":672,"column_start":57,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":5473}],"docs":"","sig":null,"attributes":[]},{"id":335,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":962460,"byte_end":962465,"line_start":691,"line_end":691,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5478}],"docs":"","sig":null,"attributes":[]},{"id":336,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":963476,"byte_end":963480,"line_start":724,"line_end":724,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5481}],"docs":"","sig":null,"attributes":[]},{"id":337,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":963590,"byte_end":963594,"line_start":730,"line_end":730,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5484}],"docs":"","sig":null,"attributes":[]},{"id":338,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":965806,"byte_end":965809,"line_start":786,"line_end":786,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5487}],"docs":"","sig":null,"attributes":[]},{"id":339,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":966027,"byte_end":966032,"line_start":798,"line_end":798,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":5492}],"docs":"","sig":null,"attributes":[]},{"id":340,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":966211,"byte_end":966215,"line_start":807,"line_end":807,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5495}],"docs":"","sig":null,"attributes":[]},{"id":341,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":966409,"byte_end":966413,"line_start":818,"line_end":818,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5498}],"docs":"","sig":null,"attributes":[]},{"id":342,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":966631,"byte_end":966634,"line_start":828,"line_end":828,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":5501}],"docs":"","sig":null,"attributes":[]},{"id":343,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":975247,"byte_end":975259,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":5639},{"krate":0,"index":5640},{"krate":0,"index":5641},{"krate":0,"index":5642},{"krate":0,"index":5643},{"krate":0,"index":5644},{"krate":0,"index":5645},{"krate":0,"index":5646},{"krate":0,"index":5647},{"krate":0,"index":5648},{"krate":0,"index":5649},{"krate":0,"index":5652},{"krate":0,"index":5653},{"krate":0,"index":5654},{"krate":0,"index":5655},{"krate":0,"index":5656},{"krate":0,"index":5657},{"krate":0,"index":5658},{"krate":0,"index":5659},{"krate":0,"index":5660},{"krate":0,"index":5661},{"krate":0,"index":5662},{"krate":0,"index":5663},{"krate":0,"index":5664},{"krate":0,"index":5665},{"krate":0,"index":5666},{"krate":0,"index":5667},{"krate":0,"index":5668},{"krate":0,"index":5669},{"krate":0,"index":5670},{"krate":0,"index":5671},{"krate":0,"index":5672},{"krate":0,"index":5673},{"krate":0,"index":5674},{"krate":0,"index":5675},{"krate":0,"index":5676},{"krate":0,"index":5677},{"krate":0,"index":5678},{"krate":0,"index":5679},{"krate":0,"index":5680},{"krate":0,"index":5681},{"krate":0,"index":5682},{"krate":0,"index":5683},{"krate":0,"index":5684},{"krate":0,"index":5685},{"krate":0,"index":5686},{"krate":0,"index":5687},{"krate":0,"index":5688},{"krate":0,"index":5689},{"krate":0,"index":5690},{"krate":0,"index":5691},{"krate":0,"index":5692},{"krate":0,"index":5693},{"krate":0,"index":5694},{"krate":0,"index":5695},{"krate":0,"index":5696},{"krate":0,"index":5697},{"krate":0,"index":5698},{"krate":0,"index":5699},{"krate":0,"index":5700},{"krate":0,"index":5701},{"krate":0,"index":5702},{"krate":0,"index":5703},{"krate":0,"index":5704},{"krate":0,"index":5705},{"krate":0,"index":5706},{"krate":0,"index":5707},{"krate":0,"index":5708},{"krate":0,"index":5709},{"krate":0,"index":5710},{"krate":0,"index":5711},{"krate":0,"index":5712},{"krate":0,"index":5713},{"krate":0,"index":5714},{"krate":0,"index":5715},{"krate":0,"index":5716},{"krate":0,"index":5717},{"krate":0,"index":5718},{"krate":0,"index":5719},{"krate":0,"index":5720},{"krate":0,"index":5721},{"krate":0,"index":5722},{"krate":0,"index":5723},{"krate":0,"index":5724},{"krate":0,"index":5727},{"krate":0,"index":5729}],"docs":"","sig":null,"attributes":[]},{"id":344,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002052,"byte_end":1002064,"line_start":867,"line_end":867,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5732}],"docs":"","sig":null,"attributes":[]},{"id":345,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002186,"byte_end":1002198,"line_start":873,"line_end":873,"column_start":31,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5734}],"docs":"","sig":null,"attributes":[]},{"id":346,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002320,"byte_end":1002332,"line_start":879,"line_end":879,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":5736}],"docs":"","sig":null,"attributes":[]},{"id":347,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002447,"byte_end":1002459,"line_start":885,"line_end":885,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":5738}],"docs":"","sig":null,"attributes":[]},{"id":348,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002578,"byte_end":1002590,"line_start":891,"line_end":891,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5740}],"docs":"","sig":null,"attributes":[]},{"id":349,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002717,"byte_end":1002729,"line_start":897,"line_end":897,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5742}],"docs":"","sig":null,"attributes":[]},{"id":350,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002856,"byte_end":1002868,"line_start":903,"line_end":903,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5744}],"docs":"","sig":null,"attributes":[]},{"id":351,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002988,"byte_end":1003000,"line_start":909,"line_end":909,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5746}],"docs":"","sig":null,"attributes":[]},{"id":352,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1003122,"byte_end":1003134,"line_start":915,"line_end":915,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":5748}],"docs":"","sig":null,"attributes":[]},{"id":353,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1003257,"byte_end":1003269,"line_start":921,"line_end":921,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":5750}],"docs":"","sig":null,"attributes":[]},{"id":354,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1003414,"byte_end":1003426,"line_start":927,"line_end":927,"column_start":49,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":5752}],"docs":"","sig":null,"attributes":[]},{"id":355,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1003601,"byte_end":1003613,"line_start":933,"line_end":933,"column_start":50,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":5754}],"docs":"","sig":null,"attributes":[]},{"id":356,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1003788,"byte_end":1003800,"line_start":940,"line_end":940,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5756},{"krate":0,"index":5757},{"krate":0,"index":5758},{"krate":0,"index":5759}],"docs":"","sig":null,"attributes":[]},{"id":357,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1004298,"byte_end":1004310,"line_start":957,"line_end":957,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":5761},{"krate":0,"index":5762},{"krate":0,"index":5763}],"docs":"","sig":null,"attributes":[]},{"id":358,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1006723,"byte_end":1006735,"line_start":1002,"line_end":1002,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5765}],"docs":"","sig":null,"attributes":[]},{"id":359,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018292,"byte_end":1018303,"line_start":72,"line_end":72,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5853},{"krate":0,"index":5856},{"krate":0,"index":5860},{"krate":0,"index":5862},{"krate":0,"index":5863},{"krate":0,"index":5864}],"docs":"","sig":null,"attributes":[]},{"id":360,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1026342,"byte_end":1026359,"line_start":311,"line_end":311,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":5866}],"docs":"","sig":null,"attributes":[]},{"id":361,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1027962,"byte_end":1027977,"line_start":355,"line_end":355,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":5874},{"krate":0,"index":5875}],"docs":"","sig":null,"attributes":[]},{"id":362,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037210,"byte_end":1037218,"line_start":600,"line_end":600,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":5890},{"krate":0,"index":5891},{"krate":0,"index":5892},{"krate":0,"index":5893}],"docs":"","sig":null,"attributes":[]},{"id":363,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045151,"byte_end":1045157,"line_start":818,"line_end":818,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":5922},{"krate":0,"index":5923}],"docs":"","sig":null,"attributes":[]},{"id":364,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045625,"byte_end":1045631,"line_start":840,"line_end":840,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":5926}],"docs":"","sig":null,"attributes":[]},{"id":365,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055907,"byte_end":1055915,"line_start":1124,"line_end":1124,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5954},{"krate":0,"index":5955},{"krate":0,"index":5956}],"docs":"","sig":null,"attributes":[]},{"id":366,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057264,"byte_end":1057272,"line_start":1168,"line_end":1168,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5959},{"krate":0,"index":5963}],"docs":"","sig":null,"attributes":[]},{"id":367,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1058679,"byte_end":1058687,"line_start":1206,"line_end":1206,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":5966},{"krate":0,"index":5967}],"docs":"","sig":null,"attributes":[]},{"id":368,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1059503,"byte_end":1059511,"line_start":1234,"line_end":1234,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":5970},{"krate":0,"index":5971}],"docs":"","sig":null,"attributes":[]},{"id":369,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1059662,"byte_end":1059670,"line_start":1244,"line_end":1244,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":5974}],"docs":"","sig":null,"attributes":[]},{"id":370,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1059833,"byte_end":1059846,"line_start":1254,"line_end":1254,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":5977},{"krate":0,"index":5978},{"krate":0,"index":5979},{"krate":0,"index":5980}],"docs":"","sig":null,"attributes":[]},{"id":371,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1060319,"byte_end":1060332,"line_start":1275,"line_end":1275,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":5983},{"krate":0,"index":5984},{"krate":0,"index":5985}],"docs":"","sig":null,"attributes":[]},{"id":400,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082430,"byte_end":1082433,"line_start":179,"line_end":179,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6071}],"docs":"","sig":null,"attributes":[]},{"id":401,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082521,"byte_end":1082524,"line_start":182,"line_end":182,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6073}],"docs":"","sig":null,"attributes":[]},{"id":402,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082614,"byte_end":1082617,"line_start":185,"line_end":185,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":6075}],"docs":"","sig":null,"attributes":[]},{"id":403,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082709,"byte_end":1082713,"line_start":189,"line_end":189,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6077}],"docs":"","sig":null,"attributes":[]},{"id":404,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082802,"byte_end":1082806,"line_start":192,"line_end":192,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6079}],"docs":"","sig":null,"attributes":[]},{"id":405,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082897,"byte_end":1082901,"line_start":195,"line_end":195,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6081}],"docs":"","sig":null,"attributes":[]},{"id":406,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082994,"byte_end":1082998,"line_start":199,"line_end":199,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6083}],"docs":"","sig":null,"attributes":[]},{"id":407,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083084,"byte_end":1083088,"line_start":202,"line_end":202,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":6085}],"docs":"","sig":null,"attributes":[]},{"id":408,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083176,"byte_end":1083181,"line_start":205,"line_end":205,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6087}],"docs":"","sig":null,"attributes":[]},{"id":409,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083268,"byte_end":1083273,"line_start":208,"line_end":208,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":6089}],"docs":"","sig":null,"attributes":[]},{"id":410,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083526,"byte_end":1083529,"line_start":217,"line_end":217,"column_start":39,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":411,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083575,"byte_end":1083578,"line_start":218,"line_end":218,"column_start":39,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":412,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083625,"byte_end":1083628,"line_start":219,"line_end":219,"column_start":39,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":413,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083676,"byte_end":1083680,"line_start":221,"line_end":221,"column_start":39,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":414,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083726,"byte_end":1083730,"line_start":222,"line_end":222,"column_start":39,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":415,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083777,"byte_end":1083781,"line_start":223,"line_end":223,"column_start":39,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":416,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083829,"byte_end":1083833,"line_start":225,"line_end":225,"column_start":39,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":417,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083879,"byte_end":1083884,"line_start":226,"line_end":226,"column_start":39,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":418,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083931,"byte_end":1083935,"line_start":228,"line_end":228,"column_start":39,"column_end":43},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":419,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083982,"byte_end":1083987,"line_start":229,"line_end":229,"column_start":39,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5039,"byte_end":5044,"line_start":153,"line_end":153,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":144}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5381,"byte_end":5385,"line_start":165,"line_end":165,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":244}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5426,"byte_end":5434,"line_start":168,"line_end":168,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":257}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/mod.rs","byte_start":32229,"byte_end":32237,"line_start":30,"line_end":30,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":448}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5460,"byte_end":5462,"line_start":171,"line_end":171,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":710}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":5508,"byte_end":5512,"line_start":174,"line_end":174,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":927}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7802,"byte_end":7805,"line_start":221,"line_end":221,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":1143}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":7847,"byte_end":7850,"line_start":223,"line_end":223,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":1492}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8060,"byte_end":8063,"line_start":226,"line_end":226,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":1582}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8110,"byte_end":8118,"line_start":228,"line_end":228,"column_start":13,"column_end":21},"ref_id":{"krate":0,"index":1737}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8160,"byte_end":8163,"line_start":230,"line_end":230,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":1872}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8205,"byte_end":8208,"line_start":232,"line_end":232,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":2050}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8250,"byte_end":8253,"line_start":234,"line_end":234,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":2362}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8296,"byte_end":8300,"line_start":236,"line_end":236,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":2580}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8346,"byte_end":8353,"line_start":238,"line_end":238,"column_start":13,"column_end":20},"ref_id":{"krate":0,"index":2914}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8395,"byte_end":8398,"line_start":240,"line_end":240,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":3009}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8440,"byte_end":8443,"line_start":242,"line_end":242,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":3233}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8485,"byte_end":8488,"line_start":244,"line_end":244,"column_start":13,"column_end":16},"ref_id":{"krate":0,"index":3771}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8531,"byte_end":8535,"line_start":246,"line_end":246,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":4033}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/lib.rs","byte_start":8578,"byte_end":8582,"line_start":248,"line_end":248,"column_start":13,"column_end":17},"ref_id":{"krate":0,"index":4153}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/mod.rs","byte_start":693253,"byte_end":693256,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4622}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16316,"byte_end":16332,"line_start":192,"line_end":192,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":6182},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":16997,"byte_end":17010,"line_start":212,"line_end":212,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":6239},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":17763,"byte_end":17776,"line_start":237,"line_end":237,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":6208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18530,"byte_end":18544,"line_start":262,"line_end":262,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":6213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":18923,"byte_end":18933,"line_start":277,"line_end":277,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":6244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":19269,"byte_end":19279,"line_start":289,"line_end":289,"column_start":26,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":19395,"byte_end":19410,"line_start":295,"line_end":295,"column_start":28,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":6270},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":19539,"byte_end":19554,"line_start":301,"line_end":301,"column_start":36,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":6270},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":19804,"byte_end":19820,"line_start":310,"line_end":310,"column_start":32,"column_end":48},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":6182},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":20123,"byte_end":20133,"line_start":322,"line_end":322,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":20594,"byte_end":20604,"line_start":335,"line_end":335,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":6161},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":21057,"byte_end":21073,"line_start":348,"line_end":348,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":6182},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":22446,"byte_end":22462,"line_start":383,"line_end":383,"column_start":16,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":6182},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":22489,"byte_end":22503,"line_start":385,"line_end":385,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":6213},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":23376,"byte_end":23390,"line_start":411,"line_end":411,"column_start":16,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":6213},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":23595,"byte_end":23608,"line_start":420,"line_end":420,"column_start":23,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":6208},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":23991,"byte_end":24004,"line_start":433,"line_end":433,"column_start":16,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":6208},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":24209,"byte_end":24222,"line_start":442,"line_end":442,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":6239},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":24700,"byte_end":24713,"line_start":456,"line_end":456,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":6239},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":24918,"byte_end":24928,"line_start":465,"line_end":465,"column_start":23,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":6244},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":25432,"byte_end":25442,"line_start":478,"line_end":478,"column_start":16,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":6244},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/error.rs","byte_start":25469,"byte_end":25484,"line_start":480,"line_end":480,"column_start":23,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":6270},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":72531,"byte_end":72538,"line_start":403,"line_end":403,"column_start":19,"column_end":26},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":6313},"to":{"krate":0,"index":531}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/colorops.rs","byte_start":73305,"byte_end":73313,"line_start":438,"line_end":438,"column_start":32,"column_end":40},"kind":{"Impl":{"id":23}},"from":{"krate":61,"index":26},"to":{"krate":0,"index":531}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":83617,"byte_end":83629,"line_start":112,"line_end":112,"column_start":22,"column_end":34},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":603},"to":{"krate":58,"index":311}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/imageops/sample.rs","byte_start":92055,"byte_end":92067,"line_start":388,"line_end":388,"column_start":34,"column_end":46},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":632},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":120215,"byte_end":120226,"line_start":94,"line_end":94,"column_start":29,"column_end":40},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":801},"to":{"krate":0,"index":791}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/free_functions.rs","byte_start":121334,"byte_end":121344,"line_start":127,"line_end":127,"column_start":29,"column_end":39},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":812},"to":{"krate":0,"index":791}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":129962,"byte_end":129968,"line_start":70,"line_end":70,"column_start":15,"column_end":21},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132032,"byte_end":132038,"line_start":135,"line_end":135,"column_start":6,"column_end":12},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/reader.rs","byte_start":132862,"byte_end":132868,"line_start":160,"line_end":160,"column_start":25,"column_end":31},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":111085,"byte_end":111097,"line_start":19,"line_end":19,"column_start":18,"column_end":30},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":6337},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113145,"byte_end":113151,"line_start":62,"line_end":62,"column_start":18,"column_end":24},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":6353},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/io/mod.rs","byte_start":113376,"byte_end":113382,"line_start":73,"line_end":73,"column_start":6,"column_end":12},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":6353},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":140754,"byte_end":140766,"line_start":127,"line_end":127,"column_start":6,"column_end":18},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":6383},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153442,"byte_end":153445,"line_start":446,"line_end":446,"column_start":6,"column_end":9},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":6405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":153705,"byte_end":153716,"line_start":461,"line_end":461,"column_start":14,"column_end":25},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":6372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":171174,"byte_end":171185,"line_start":913,"line_end":913,"column_start":22,"column_end":33},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":6372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":177161,"byte_end":177165,"line_start":1070,"line_end":1070,"column_start":24,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":6425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":182769,"byte_end":182776,"line_start":1206,"line_end":1206,"column_start":24,"column_end":31},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":6438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":187207,"byte_end":187218,"line_start":1325,"line_end":1325,"column_start":40,"column_end":51},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":6372},"to":{"krate":2,"index":3319}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":187842,"byte_end":187853,"line_start":1346,"line_end":1346,"column_start":43,"column_end":54},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":6372},"to":{"krate":2,"index":3323}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":188471,"byte_end":188475,"line_start":1365,"line_end":1365,"column_start":45,"column_end":49},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":6425},"to":{"krate":0,"index":5927}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":189633,"byte_end":189640,"line_start":1408,"line_end":1408,"column_start":45,"column_end":52},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":6438},"to":{"krate":0,"index":5927}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":190817,"byte_end":190824,"line_start":1451,"line_end":1451,"column_start":41,"column_end":48},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":6438},"to":{"krate":0,"index":5938}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":191677,"byte_end":191687,"line_start":1477,"line_end":1477,"column_start":22,"column_end":32},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":191839,"byte_end":191862,"line_start":1481,"line_end":1481,"column_start":31,"column_end":54},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":6500},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":192070,"byte_end":192093,"line_start":1486,"line_end":1486,"column_start":31,"column_end":54},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":6500},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":192769,"byte_end":192774,"line_start":1506,"line_end":1506,"column_start":23,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":6451},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":193709,"byte_end":193714,"line_start":1530,"line_end":1530,"column_start":23,"column_end":28},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":6451},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/flat.rs","byte_start":193739,"byte_end":193749,"line_start":1532,"line_end":1532,"column_start":21,"column_end":31},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":6475},"to":{"krate":2,"index":2717}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":203001,"byte_end":203012,"line_start":106,"line_end":106,"column_start":23,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1275},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":204936,"byte_end":204948,"line_start":164,"line_end":164,"column_start":23,"column_end":35},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":6558},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":207117,"byte_end":207127,"line_start":208,"line_end":208,"column_start":29,"column_end":39},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":207283,"byte_end":207295,"line_start":214,"line_end":214,"column_start":23,"column_end":35},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":6558},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":207642,"byte_end":207659,"line_start":229,"line_end":229,"column_start":23,"column_end":40},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":6619},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":215534,"byte_end":215542,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":6651},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":216928,"byte_end":216937,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":6661},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":218222,"byte_end":218237,"line_start":579,"line_end":579,"column_start":32,"column_end":47},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1353},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":220093,"byte_end":220103,"line_start":631,"line_end":631,"column_start":22,"column_end":32},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1318},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":253893,"byte_end":253902,"line_start":1484,"line_end":1484,"column_start":18,"column_end":27},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1403},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":254322,"byte_end":254332,"line_start":1498,"line_end":1498,"column_start":52,"column_end":62},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1318},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/decoder.rs","byte_start":255108,"byte_end":255118,"line_start":1528,"line_end":1528,"column_start":56,"column_end":66},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1318},"to":{"krate":0,"index":5908}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":259719,"byte_end":259729,"line_start":17,"line_end":17,"column_start":25,"column_end":35},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/bmp/encoder.rs","byte_start":267971,"byte_end":267981,"line_start":242,"line_end":242,"column_start":37,"column_end":47},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1464},"to":{"krate":0,"index":5917}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":273682,"byte_end":273694,"line_start":44,"line_end":44,"column_start":23,"column_end":35},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":6673},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":274967,"byte_end":274977,"line_start":73,"line_end":73,"column_start":29,"column_end":39},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":275133,"byte_end":275145,"line_start":79,"line_end":79,"column_start":23,"column_end":35},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":6673},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":275834,"byte_end":275845,"line_start":117,"line_end":117,"column_start":6,"column_end":17},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":6736},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":276574,"byte_end":276580,"line_start":140,"line_end":140,"column_start":6,"column_end":12},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":6716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":278213,"byte_end":278223,"line_start":187,"line_end":187,"column_start":6,"column_end":16},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":6728},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":280310,"byte_end":280320,"line_start":247,"line_end":247,"column_start":15,"column_end":25},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1566},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dds.rs","byte_start":284281,"byte_end":284291,"line_start":330,"line_end":330,"column_start":45,"column_end":55},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1566},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":287161,"byte_end":287171,"line_start":33,"line_end":33,"column_start":6,"column_end":16},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":6747},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":288128,"byte_end":288138,"line_start":69,"line_end":69,"column_start":15,"column_end":25},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1638},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":290164,"byte_end":290174,"line_start":120,"line_end":120,"column_start":45,"column_end":55},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1638},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":291072,"byte_end":291082,"line_start":152,"line_end":152,"column_start":56,"column_end":66},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1638},"to":{"krate":0,"index":5908}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292108,"byte_end":292117,"line_start":192,"line_end":192,"column_start":24,"column_end":33},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1666},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/dxt.rs","byte_start":292377,"byte_end":292387,"line_start":204,"line_end":204,"column_start":16,"column_end":26},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1674},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":318211,"byte_end":318225,"line_start":41,"line_end":41,"column_start":15,"column_end":29},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1808},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":319960,"byte_end":319974,"line_start":91,"line_end":91,"column_start":24,"column_end":38},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1808},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":320753,"byte_end":320767,"line_start":117,"line_end":117,"column_start":31,"column_end":45},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1808},"to":{"krate":1,"index":4477}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":323444,"byte_end":323459,"line_start":191,"line_end":191,"column_start":15,"column_end":30},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1838},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":323752,"byte_end":323767,"line_start":200,"line_end":200,"column_start":45,"column_end":60},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1838},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":324179,"byte_end":324194,"line_start":220,"line_end":220,"column_start":56,"column_end":71},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1838},"to":{"krate":0,"index":5908}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":325060,"byte_end":325075,"line_start":254,"line_end":254,"column_start":16,"column_end":31},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1860},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/farbfeld.rs","byte_start":326107,"byte_end":326122,"line_start":286,"line_end":286,"column_start":33,"column_end":48},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1860},"to":{"krate":0,"index":5917}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":331438,"byte_end":331448,"line_start":56,"line_end":56,"column_start":15,"column_end":25},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1968},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":332369,"byte_end":332378,"line_start":82,"line_end":82,"column_start":18,"column_end":27},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1976},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":332791,"byte_end":332801,"line_start":96,"line_end":96,"column_start":45,"column_end":55},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1968},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":337647,"byte_end":337663,"line_start":230,"line_end":230,"column_start":15,"column_end":31},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1993},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":338274,"byte_end":338290,"line_start":251,"line_end":251,"column_start":28,"column_end":44},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1993},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":342851,"byte_end":342861,"line_start":363,"line_end":363,"column_start":49,"column_end":59},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1968},"to":{"krate":0,"index":5914}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":343153,"byte_end":343162,"line_start":378,"line_end":378,"column_start":6,"column_end":15},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":2012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":343825,"byte_end":343831,"line_start":401,"line_end":401,"column_start":6,"column_end":12},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":6765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":344214,"byte_end":344224,"line_start":418,"line_end":418,"column_start":16,"column_end":26},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":2023},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/gif.rs","byte_start":349582,"byte_end":349592,"line_start":566,"line_end":566,"column_start":6,"column_end":16},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":6161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":353188,"byte_end":353200,"line_start":52,"line_end":52,"column_start":23,"column_end":35},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":6776},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":354967,"byte_end":354977,"line_start":89,"line_end":89,"column_start":29,"column_end":39},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":355133,"byte_end":355145,"line_start":95,"line_end":95,"column_start":23,"column_end":35},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":6776},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":355647,"byte_end":355655,"line_start":115,"line_end":115,"column_start":23,"column_end":31},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":6820},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":356246,"byte_end":356256,"line_start":135,"line_end":135,"column_start":18,"column_end":28},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":6849},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":357630,"byte_end":357639,"line_start":177,"line_end":177,"column_start":18,"column_end":27},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":2167},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":358055,"byte_end":358065,"line_start":191,"line_end":191,"column_start":48,"column_end":58},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":6849},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":358609,"byte_end":358619,"line_start":214,"line_end":214,"column_start":59,"column_end":69},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":6849},"to":{"krate":0,"index":5908}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":359749,"byte_end":359759,"line_start":266,"line_end":266,"column_start":6,"column_end":16},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":6865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":362065,"byte_end":362075,"line_start":331,"line_end":331,"column_start":18,"column_end":28},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":6856},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":368288,"byte_end":368298,"line_start":498,"line_end":498,"column_start":32,"column_end":42},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":6856},"to":{"krate":2,"index":7633}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":369192,"byte_end":369215,"line_start":526,"line_end":526,"column_start":15,"column_end":38},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":2223},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":369505,"byte_end":369528,"line_start":539,"line_end":539,"column_start":28,"column_end":51},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":2223},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":371334,"byte_end":371357,"line_start":590,"line_end":590,"column_start":37,"column_end":60},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":2223},"to":{"krate":2,"index":7702}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/decoder.rs","byte_start":377778,"byte_end":377789,"line_start":762,"line_end":762,"column_start":6,"column_end":17},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":6885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":388604,"byte_end":388614,"line_start":12,"line_end":12,"column_start":16,"column_end":26},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":2316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":391197,"byte_end":391208,"line_start":90,"line_end":90,"column_start":10,"column_end":21},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":2332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":391334,"byte_end":391345,"line_start":96,"line_end":96,"column_start":23,"column_end":34},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":2332},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":392046,"byte_end":392066,"line_start":125,"line_end":125,"column_start":10,"column_end":30},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/hdr/encoder.rs","byte_start":392325,"byte_end":392345,"line_start":135,"line_end":135,"column_start":23,"column_end":43},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2344},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":405971,"byte_end":405983,"line_start":46,"line_end":46,"column_start":23,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":6915},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":407233,"byte_end":407243,"line_start":75,"line_end":75,"column_start":29,"column_end":39},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":407399,"byte_end":407411,"line_start":81,"line_end":81,"column_start":23,"column_end":35},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":6915},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":407652,"byte_end":407671,"line_start":92,"line_end":92,"column_start":23,"column_end":42},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":407911,"byte_end":407930,"line_start":101,"line_end":101,"column_start":28,"column_end":47},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":6951},"to":{"krate":2,"index":2922}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":409211,"byte_end":409221,"line_start":146,"line_end":146,"column_start":22,"column_end":32},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":411564,"byte_end":411572,"line_start":218,"line_end":218,"column_start":6,"column_end":14},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":6974},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":412885,"byte_end":412894,"line_start":266,"line_end":266,"column_start":18,"column_end":27},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2494},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/decoder.rs","byte_start":413314,"byte_end":413324,"line_start":280,"line_end":280,"column_start":52,"column_end":62},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2462},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":424504,"byte_end":424512,"line_start":34,"line_end":34,"column_start":10,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2557},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":426208,"byte_end":426218,"line_start":84,"line_end":84,"column_start":16,"column_end":26},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2554},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/ico/encoder.rs","byte_start":428472,"byte_end":428482,"line_start":141,"line_end":141,"column_start":33,"column_end":43},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2554},"to":{"krate":0,"index":5917}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":430967,"byte_end":430978,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2640},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":432761,"byte_end":432771,"line_start":68,"line_end":68,"column_start":18,"column_end":28},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2649},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":433184,"byte_end":433195,"line_start":82,"line_end":82,"column_start":45,"column_end":56},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2640},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":434976,"byte_end":434985,"line_start":145,"line_end":145,"column_start":6,"column_end":15},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":7890},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/decoder.rs","byte_start":435278,"byte_end":435288,"line_start":157,"line_end":157,"column_start":6,"column_end":16},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":6161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":474488,"byte_end":474497,"line_start":186,"line_end":186,"column_start":16,"column_end":25},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2791},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":477972,"byte_end":477984,"line_start":318,"line_end":318,"column_start":6,"column_end":18},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":7023},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":478322,"byte_end":478334,"line_start":330,"line_end":330,"column_start":18,"column_end":30},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":7023},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":478964,"byte_end":478975,"line_start":355,"line_end":355,"column_start":16,"column_end":27},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":2813},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/jpeg/encoder.rs","byte_start":489562,"byte_end":489573,"line_start":658,"line_end":658,"column_start":33,"column_end":44},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":2813},"to":{"krate":0,"index":5917}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":512620,"byte_end":512634,"line_start":52,"line_end":52,"column_start":22,"column_end":36},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":7038},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":515292,"byte_end":515306,"line_start":111,"line_end":111,"column_start":52,"column_end":66},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":7038},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":524829,"byte_end":524843,"line_start":346,"line_end":346,"column_start":9,"column_end":23},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":7047},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/openexr.rs","byte_start":525149,"byte_end":525163,"line_start":354,"line_end":354,"column_start":26,"column_end":40},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":7047},"to":{"krate":0,"index":5917}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":535783,"byte_end":535792,"line_start":40,"line_end":40,"column_start":15,"column_end":24},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3127},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":536584,"byte_end":536593,"line_start":66,"line_end":66,"column_start":24,"column_end":33},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3127},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":537986,"byte_end":537996,"line_start":117,"line_end":117,"column_start":15,"column_end":25},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":542796,"byte_end":542806,"line_start":219,"line_end":219,"column_start":45,"column_end":55},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3139},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":544867,"byte_end":544878,"line_start":283,"line_end":283,"column_start":15,"column_end":26},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":550549,"byte_end":550560,"line_start":430,"line_end":430,"column_start":49,"column_end":60},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3169},"to":{"krate":0,"index":5914}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":550698,"byte_end":550711,"line_start":434,"line_end":434,"column_start":36,"column_end":49},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3187},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":553138,"byte_end":553148,"line_start":513,"line_end":513,"column_start":16,"column_end":26},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3195},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":557623,"byte_end":557633,"line_start":614,"line_end":614,"column_start":33,"column_end":43},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3195},"to":{"krate":0,"index":5917}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":559380,"byte_end":559390,"line_start":657,"line_end":657,"column_start":6,"column_end":16},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":6161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":560330,"byte_end":560345,"line_start":680,"line_end":680,"column_start":18,"column_end":33},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":7054},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":560431,"byte_end":560441,"line_start":686,"line_end":686,"column_start":18,"column_end":28},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":7076},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":560531,"byte_end":560551,"line_start":692,"line_end":692,"column_start":23,"column_end":43},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":7100},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/png.rs","byte_start":560857,"byte_end":560877,"line_start":704,"line_end":704,"column_start":28,"column_end":48},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":7100},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/autobreak.rs","byte_start":569163,"byte_end":569172,"line_start":15,"line_end":15,"column_start":20,"column_end":29},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/autobreak.rs","byte_start":570433,"byte_end":570442,"line_start":58,"line_end":58,"column_start":34,"column_end":43},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3276},"to":{"krate":1,"index":4459}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/autobreak.rs","byte_start":571068,"byte_end":571077,"line_start":82,"line_end":82,"column_start":29,"column_end":38},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3276},"to":{"krate":2,"index":3258}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":574916,"byte_end":574928,"line_start":80,"line_end":80,"column_start":18,"column_end":30},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":7116},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":578210,"byte_end":578220,"line_start":158,"line_end":158,"column_start":29,"column_end":39},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":578376,"byte_end":578388,"line_start":164,"line_end":164,"column_start":23,"column_end":35},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":7116},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":578864,"byte_end":578877,"line_start":186,"line_end":186,"column_start":18,"column_end":31},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":7173},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":579469,"byte_end":579484,"line_start":208,"line_end":208,"column_start":18,"column_end":33},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":7200},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":580504,"byte_end":580514,"line_start":251,"line_end":251,"column_start":18,"column_end":28},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":584235,"byte_end":584242,"line_start":351,"line_end":351,"column_start":21,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":4484},"to":{"krate":0,"index":3449}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":592072,"byte_end":592073,"line_start":564,"line_end":564,"column_start":26,"column_end":27},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3470},"to":{"krate":0,"index":3449}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":592216,"byte_end":592225,"line_start":568,"line_end":568,"column_start":18,"column_end":27},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3471},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":592638,"byte_end":592648,"line_start":582,"line_end":582,"column_start":45,"column_end":55},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3436},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":594381,"byte_end":594391,"line_start":631,"line_end":631,"column_start":15,"column_end":25},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3436},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":596628,"byte_end":596630,"line_start":692,"line_end":692,"column_start":17,"column_end":19},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3426},"to":{"krate":0,"index":3422}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":597136,"byte_end":597139,"line_start":710,"line_end":710,"column_start":17,"column_end":20},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3428},"to":{"krate":0,"index":3422}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":598136,"byte_end":598142,"line_start":736,"line_end":736,"column_start":17,"column_end":23},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3430},"to":{"krate":0,"index":3422}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":599428,"byte_end":599433,"line_start":774,"line_end":774,"column_start":17,"column_end":22},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3432},"to":{"krate":0,"index":3422}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":600079,"byte_end":600091,"line_start":792,"line_end":792,"column_start":31,"column_end":43},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":7296},"to":{"krate":0,"index":3434}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":600216,"byte_end":600229,"line_start":798,"line_end":798,"column_start":31,"column_end":44},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":7305},"to":{"krate":0,"index":3434}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":600545,"byte_end":600557,"line_start":808,"line_end":808,"column_start":31,"column_end":43},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":7315},"to":{"krate":0,"index":3434}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/decoder.rs","byte_start":600867,"byte_end":600882,"line_start":818,"line_end":818,"column_start":31,"column_end":46},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":7325},"to":{"krate":0,"index":3434}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":618917,"byte_end":618927,"line_start":81,"line_end":81,"column_start":16,"column_end":26},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3621},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":626815,"byte_end":626825,"line_start":291,"line_end":291,"column_start":33,"column_end":43},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3621},"to":{"krate":0,"index":5917}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":627058,"byte_end":627076,"line_start":303,"line_end":303,"column_start":10,"column_end":28},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3625},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":627946,"byte_end":627961,"line_start":331,"line_end":331,"column_start":10,"column_end":25},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3631},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":628522,"byte_end":628539,"line_start":352,"line_end":352,"column_start":10,"column_end":27},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3634},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":632559,"byte_end":632577,"line_start":446,"line_end":446,"column_start":10,"column_end":28},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3639},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":635026,"byte_end":635039,"line_start":510,"line_end":510,"column_start":10,"column_end":23},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":635350,"byte_end":635362,"line_start":523,"line_end":523,"column_start":10,"column_end":22},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":636779,"byte_end":636790,"line_start":568,"line_end":568,"column_start":10,"column_end":21},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":7243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":638501,"byte_end":638512,"line_start":622,"line_end":622,"column_start":29,"column_end":40},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":7243},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":638631,"byte_end":638642,"line_start":628,"line_end":628,"column_start":30,"column_end":41},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":7243},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/encoder.rs","byte_start":638743,"byte_end":638756,"line_start":634,"line_end":634,"column_start":10,"column_end":23},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":3648},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":643613,"byte_end":643630,"line_start":136,"line_end":136,"column_start":6,"column_end":23},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":7335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":644142,"byte_end":644152,"line_start":150,"line_end":150,"column_start":6,"column_end":16},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":7272},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":645122,"byte_end":645131,"line_start":175,"line_end":175,"column_start":6,"column_end":15},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":3724},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":649805,"byte_end":649819,"line_start":297,"line_end":297,"column_start":43,"column_end":57},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":3756},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":650498,"byte_end":650507,"line_start":320,"line_end":320,"column_start":29,"column_end":38},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":3724},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":650700,"byte_end":650709,"line_start":329,"line_end":329,"column_start":30,"column_end":39},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3724},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":650903,"byte_end":650912,"line_start":338,"line_end":338,"column_start":29,"column_end":38},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3724},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/pnm/header.rs","byte_start":651107,"byte_end":651116,"line_start":347,"line_end":347,"column_start":32,"column_end":41},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3724},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":652187,"byte_end":652195,"line_start":23,"line_end":23,"column_start":6,"column_end":14},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3849},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":653375,"byte_end":653385,"line_start":70,"line_end":70,"column_start":22,"column_end":32},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":3856},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":665993,"byte_end":666003,"line_start":414,"line_end":414,"column_start":52,"column_end":62},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3856},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/decoder.rs","byte_start":668916,"byte_end":668925,"line_start":497,"line_end":497,"column_start":31,"column_end":40},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3899},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":669570,"byte_end":669582,"line_start":15,"line_end":15,"column_start":23,"column_end":35},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":7355},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":669949,"byte_end":669959,"line_start":26,"line_end":26,"column_start":29,"column_end":39},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670115,"byte_end":670127,"line_start":32,"line_end":32,"column_start":23,"column_end":35},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":7355},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":670216,"byte_end":670226,"line_start":39,"line_end":39,"column_start":16,"column_end":26},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":3948},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/encoder.rs","byte_start":671750,"byte_end":671760,"line_start":88,"line_end":88,"column_start":33,"column_end":43},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":3948},"to":{"krate":0,"index":5917}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/header.rs","byte_start":676614,"byte_end":676623,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":4000},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tga/header.rs","byte_start":678541,"byte_end":678547,"line_start":80,"line_end":80,"column_start":6,"column_end":12},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":7381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":682259,"byte_end":682270,"line_start":34,"line_end":34,"column_start":9,"column_end":20},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":4111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":685032,"byte_end":685042,"line_start":107,"line_end":107,"column_start":6,"column_end":16},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":6161},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":686923,"byte_end":686933,"line_start":151,"line_end":151,"column_start":18,"column_end":28},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":4124},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":687353,"byte_end":687364,"line_start":165,"line_end":165,"column_start":52,"column_end":63},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":4111},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":690870,"byte_end":690881,"line_start":258,"line_end":258,"column_start":23,"column_end":34},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":4141},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/tiff.rs","byte_start":692835,"byte_end":692846,"line_start":310,"line_end":310,"column_start":40,"column_end":51},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":4141},"to":{"krate":0,"index":5917}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":694178,"byte_end":694190,"line_start":27,"line_end":27,"column_start":23,"column_end":35},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":7398},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":694327,"byte_end":694342,"line_start":30,"line_end":30,"column_start":31,"column_end":46},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":4244},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":695250,"byte_end":695260,"line_start":57,"line_end":57,"column_start":29,"column_end":39},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":695417,"byte_end":695429,"line_start":63,"line_end":63,"column_start":23,"column_end":35},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":7398},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":695711,"byte_end":695724,"line_start":82,"line_end":82,"column_start":6,"column_end":19},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":7419},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":697109,"byte_end":697120,"line_start":129,"line_end":129,"column_start":15,"column_end":26},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":4268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":700950,"byte_end":700960,"line_start":256,"line_end":256,"column_start":18,"column_end":28},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":4285},"to":{"krate":1,"index":4402}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":701373,"byte_end":701384,"line_start":270,"line_end":270,"column_start":45,"column_end":56},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":4268},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/decoder.rs","byte_start":703572,"byte_end":703583,"line_start":332,"line_end":332,"column_start":49,"column_end":60},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":4268},"to":{"krate":0,"index":5914}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/huffman.rs","byte_start":712232,"byte_end":712243,"line_start":28,"line_end":28,"column_start":6,"column_end":17},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":7471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":720472,"byte_end":720484,"line_start":81,"line_end":81,"column_start":23,"column_end":35},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":7483},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":721487,"byte_end":721497,"line_start":105,"line_end":105,"column_start":29,"column_end":39},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":721654,"byte_end":721666,"line_start":111,"line_end":111,"column_start":23,"column_end":35},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":7483},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":721969,"byte_end":721984,"line_start":125,"line_end":125,"column_start":15,"column_end":30},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":7504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":739619,"byte_end":739630,"line_start":641,"line_end":641,"column_start":6,"column_end":17},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":7515},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":740050,"byte_end":740060,"line_start":658,"line_end":658,"column_start":6,"column_end":16},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":7527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":740591,"byte_end":740600,"line_start":679,"line_end":679,"column_start":6,"column_end":15},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":7534},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless.rs","byte_start":741671,"byte_end":741684,"line_start":724,"line_end":724,"column_start":6,"column_end":19},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":7542},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless_transform.rs","byte_start":744100,"byte_end":744113,"line_start":23,"line_end":23,"column_start":6,"column_end":19},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":7552},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/lossless_transform.rs","byte_start":758674,"byte_end":758695,"line_start":394,"line_end":394,"column_start":6,"column_end":27},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":7568},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":761639,"byte_end":761651,"line_start":26,"line_end":26,"column_start":23,"column_end":35},"kind":{"Impl":{"id":235}},"from":{"krate":0,"index":7577},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":762361,"byte_end":762371,"line_start":44,"line_end":44,"column_start":29,"column_end":39},"kind":{"Impl":{"id":236}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":762528,"byte_end":762540,"line_start":50,"line_end":50,"column_start":23,"column_end":35},"kind":{"Impl":{"id":237}},"from":{"krate":0,"index":7577},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":763058,"byte_end":763071,"line_start":78,"line_end":78,"column_start":6,"column_end":19},"kind":{"Impl":{"id":238}},"from":{"krate":0,"index":7614},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":763598,"byte_end":763611,"line_start":98,"line_end":98,"column_start":27,"column_end":40},"kind":{"Impl":{"id":239}},"from":{"krate":0,"index":4578},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/extended.rs","byte_start":772061,"byte_end":772071,"line_start":336,"line_end":336,"column_start":6,"column_end":16},"kind":{"Impl":{"id":240}},"from":{"krate":0,"index":7619},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":810905,"byte_end":810917,"line_start":689,"line_end":689,"column_start":23,"column_end":35},"kind":{"Impl":{"id":241}},"from":{"krate":0,"index":7761},"to":{"krate":2,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":812041,"byte_end":812051,"line_start":717,"line_end":717,"column_start":29,"column_end":39},"kind":{"Impl":{"id":242}},"from":{"krate":0,"index":6161},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":812208,"byte_end":812220,"line_start":723,"line_end":723,"column_start":23,"column_end":35},"kind":{"Impl":{"id":243}},"from":{"krate":0,"index":7761},"to":{"krate":1,"index":2338}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":812341,"byte_end":812351,"line_start":734,"line_end":734,"column_start":6,"column_end":16},"kind":{"Impl":{"id":244}},"from":{"krate":0,"index":4746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":816074,"byte_end":816079,"line_start":884,"line_end":884,"column_start":6,"column_end":11},"kind":{"Impl":{"id":245}},"from":{"krate":0,"index":7802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":819221,"byte_end":819231,"line_start":1009,"line_end":1009,"column_start":15,"column_end":25},"kind":{"Impl":{"id":246}},"from":{"krate":0,"index":4767},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":857079,"byte_end":857087,"line_start":2105,"line_end":2105,"column_start":6,"column_end":14},"kind":{"Impl":{"id":247}},"from":{"krate":0,"index":7664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":857704,"byte_end":857712,"line_start":2128,"line_end":2128,"column_start":18,"column_end":26},"kind":{"Impl":{"id":248}},"from":{"krate":0,"index":7664},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":857777,"byte_end":857787,"line_start":2134,"line_end":2134,"column_start":6,"column_end":16},"kind":{"Impl":{"id":249}},"from":{"krate":0,"index":7691},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":858076,"byte_end":858086,"line_start":2146,"line_end":2146,"column_start":18,"column_end":28},"kind":{"Impl":{"id":250}},"from":{"krate":0,"index":7691},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":858153,"byte_end":858162,"line_start":2152,"line_end":2152,"column_start":6,"column_end":15},"kind":{"Impl":{"id":251}},"from":{"krate":0,"index":7715},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/codecs/webp/vp8.rs","byte_start":858699,"byte_end":858708,"line_start":2170,"line_end":2170,"column_start":18,"column_end":27},"kind":{"Impl":{"id":252}},"from":{"krate":0,"index":7715},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":881938,"byte_end":881944,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"kind":{"Impl":{"id":253}},"from":{"krate":0,"index":4885},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":882534,"byte_end":882540,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"kind":{"Impl":{"id":254}},"from":{"krate":0,"index":4885},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":883059,"byte_end":883064,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":7836},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":884137,"byte_end":884142,"line_start":107,"line_end":107,"column_start":6,"column_end":11},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":7843},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/animation.rs","byte_start":890331,"byte_end":890339,"line_start":270,"line_end":270,"column_start":22,"column_end":30},"kind":{"Impl":{"id":257}},"from":{"krate":2,"index":47686},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":893869,"byte_end":893875,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"kind":{"Impl":{"id":258}},"from":{"krate":0,"index":5023},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":894119,"byte_end":894125,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"kind":{"Impl":{"id":259}},"from":{"krate":0,"index":5023},"to":{"krate":2,"index":7702}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":894274,"byte_end":894280,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"kind":{"Impl":{"id":260}},"from":{"krate":0,"index":5023},"to":{"krate":2,"index":7677}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":894489,"byte_end":894495,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"kind":{"Impl":{"id":261}},"from":{"krate":0,"index":5023},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":894642,"byte_end":894648,"line_start":65,"line_end":65,"column_start":31,"column_end":37},"kind":{"Impl":{"id":262}},"from":{"krate":0,"index":5023},"to":{"krate":2,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":895050,"byte_end":895059,"line_start":84,"line_end":84,"column_start":38,"column_end":47},"kind":{"Impl":{"id":263}},"from":{"krate":0,"index":5048},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":895315,"byte_end":895324,"line_start":96,"line_end":96,"column_start":47,"column_end":56},"kind":{"Impl":{"id":264}},"from":{"krate":0,"index":5048},"to":{"krate":2,"index":7702}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":895473,"byte_end":895482,"line_start":105,"line_end":105,"column_start":49,"column_end":58},"kind":{"Impl":{"id":265}},"from":{"krate":0,"index":5048},"to":{"krate":2,"index":7677}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":895730,"byte_end":895739,"line_start":117,"line_end":117,"column_start":31,"column_end":40},"kind":{"Impl":{"id":266}},"from":{"krate":0,"index":5048},"to":{"krate":2,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":896292,"byte_end":896296,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"kind":{"Impl":{"id":267}},"from":{"krate":0,"index":5070},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":897214,"byte_end":897218,"line_start":162,"line_end":162,"column_start":38,"column_end":42},"kind":{"Impl":{"id":268}},"from":{"krate":0,"index":5070},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":897628,"byte_end":897632,"line_start":178,"line_end":178,"column_start":47,"column_end":51},"kind":{"Impl":{"id":269}},"from":{"krate":0,"index":5070},"to":{"krate":2,"index":7702}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":897781,"byte_end":897785,"line_start":187,"line_end":187,"column_start":49,"column_end":53},"kind":{"Impl":{"id":270}},"from":{"krate":0,"index":5070},"to":{"krate":2,"index":7677}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898152,"byte_end":898156,"line_start":201,"line_end":201,"column_start":26,"column_end":30},"kind":{"Impl":{"id":271}},"from":{"krate":0,"index":5070},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898301,"byte_end":898305,"line_start":209,"line_end":209,"column_start":31,"column_end":35},"kind":{"Impl":{"id":272}},"from":{"krate":0,"index":5070},"to":{"krate":2,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":898879,"byte_end":898886,"line_start":232,"line_end":232,"column_start":25,"column_end":32},"kind":{"Impl":{"id":273}},"from":{"krate":0,"index":5097},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":899826,"byte_end":899833,"line_start":254,"line_end":254,"column_start":38,"column_end":45},"kind":{"Impl":{"id":274}},"from":{"krate":0,"index":5097},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":900256,"byte_end":900263,"line_start":270,"line_end":270,"column_start":47,"column_end":54},"kind":{"Impl":{"id":275}},"from":{"krate":0,"index":5097},"to":{"krate":2,"index":7702}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":900412,"byte_end":900419,"line_start":279,"line_end":279,"column_start":49,"column_end":56},"kind":{"Impl":{"id":276}},"from":{"krate":0,"index":5097},"to":{"krate":2,"index":7677}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":900801,"byte_end":900808,"line_start":293,"line_end":293,"column_start":31,"column_end":38},"kind":{"Impl":{"id":277}},"from":{"krate":0,"index":5097},"to":{"krate":2,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":901251,"byte_end":901266,"line_start":315,"line_end":315,"column_start":38,"column_end":53},"kind":{"Impl":{"id":278}},"from":{"krate":0,"index":5121},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":901669,"byte_end":901684,"line_start":333,"line_end":333,"column_start":47,"column_end":62},"kind":{"Impl":{"id":279}},"from":{"krate":0,"index":5121},"to":{"krate":2,"index":7702}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":901810,"byte_end":901825,"line_start":342,"line_end":342,"column_start":26,"column_end":41},"kind":{"Impl":{"id":280}},"from":{"krate":0,"index":5121},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":902001,"byte_end":902016,"line_start":351,"line_end":351,"column_start":31,"column_end":46},"kind":{"Impl":{"id":281}},"from":{"krate":0,"index":5121},"to":{"krate":2,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":902554,"byte_end":902567,"line_start":375,"line_end":375,"column_start":38,"column_end":51},"kind":{"Impl":{"id":282}},"from":{"krate":0,"index":5144},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":903105,"byte_end":903118,"line_start":399,"line_end":399,"column_start":47,"column_end":60},"kind":{"Impl":{"id":283}},"from":{"krate":0,"index":5144},"to":{"krate":2,"index":7702}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":903242,"byte_end":903255,"line_start":408,"line_end":408,"column_start":26,"column_end":39},"kind":{"Impl":{"id":284}},"from":{"krate":0,"index":5144},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":903425,"byte_end":903438,"line_start":417,"line_end":417,"column_start":31,"column_end":44},"kind":{"Impl":{"id":285}},"from":{"krate":0,"index":5144},"to":{"krate":2,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":903963,"byte_end":903981,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"kind":{"Impl":{"id":286}},"from":{"krate":0,"index":5166},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":904392,"byte_end":904410,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"kind":{"Impl":{"id":287}},"from":{"krate":0,"index":5166},"to":{"krate":2,"index":7702}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":904541,"byte_end":904559,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"kind":{"Impl":{"id":288}},"from":{"krate":0,"index":5166},"to":{"krate":2,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":905106,"byte_end":905122,"line_start":492,"line_end":492,"column_start":38,"column_end":54},"kind":{"Impl":{"id":289}},"from":{"krate":0,"index":5186},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":905669,"byte_end":905685,"line_start":516,"line_end":516,"column_start":47,"column_end":63},"kind":{"Impl":{"id":290}},"from":{"krate":0,"index":5186},"to":{"krate":2,"index":7702}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":905814,"byte_end":905830,"line_start":525,"line_end":525,"column_start":31,"column_end":47},"kind":{"Impl":{"id":291}},"from":{"krate":0,"index":5186},"to":{"krate":2,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":908701,"byte_end":908712,"line_start":615,"line_end":615,"column_start":20,"column_end":31},"kind":{"Impl":{"id":292}},"from":{"krate":0,"index":7859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":916480,"byte_end":916491,"line_start":835,"line_end":835,"column_start":20,"column_end":31},"kind":{"Impl":{"id":293}},"from":{"krate":0,"index":7859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":919811,"byte_end":919822,"line_start":932,"line_end":932,"column_start":20,"column_end":31},"kind":{"Impl":{"id":294}},"from":{"krate":0,"index":7859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":920418,"byte_end":920429,"line_start":956,"line_end":956,"column_start":20,"column_end":31},"kind":{"Impl":{"id":295}},"from":{"krate":0,"index":7859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":921211,"byte_end":921222,"line_start":984,"line_end":984,"column_start":20,"column_end":31},"kind":{"Impl":{"id":296}},"from":{"krate":0,"index":7859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":922170,"byte_end":922181,"line_start":1015,"line_end":1015,"column_start":32,"column_end":43},"kind":{"Impl":{"id":297}},"from":{"krate":0,"index":7859},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":922450,"byte_end":922461,"line_start":1030,"line_end":1030,"column_start":30,"column_end":41},"kind":{"Impl":{"id":298}},"from":{"krate":0,"index":7859},"to":{"krate":2,"index":3234}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":922689,"byte_end":922700,"line_start":1042,"line_end":1042,"column_start":33,"column_end":44},"kind":{"Impl":{"id":299}},"from":{"krate":0,"index":7859},"to":{"krate":2,"index":3247}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":922930,"byte_end":922941,"line_start":1052,"line_end":1052,"column_start":42,"column_end":53},"kind":{"Impl":{"id":300}},"from":{"krate":0,"index":7859},"to":{"krate":2,"index":3319}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":923176,"byte_end":923187,"line_start":1064,"line_end":1064,"column_start":45,"column_end":56},"kind":{"Impl":{"id":301}},"from":{"krate":0,"index":7859},"to":{"krate":2,"index":3323}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":923412,"byte_end":923423,"line_start":1074,"line_end":1074,"column_start":30,"column_end":41},"kind":{"Impl":{"id":302}},"from":{"krate":0,"index":7859},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":923782,"byte_end":923793,"line_start":1089,"line_end":1089,"column_start":41,"column_end":52},"kind":{"Impl":{"id":303}},"from":{"krate":0,"index":7859},"to":{"krate":0,"index":5927}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":924482,"byte_end":924493,"line_start":1116,"line_end":1116,"column_start":37,"column_end":48},"kind":{"Impl":{"id":304}},"from":{"krate":0,"index":7859},"to":{"krate":0,"index":5938}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":927156,"byte_end":927167,"line_start":1188,"line_end":1188,"column_start":16,"column_end":27},"kind":{"Impl":{"id":305}},"from":{"krate":0,"index":7859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":929569,"byte_end":929578,"line_start":1263,"line_end":1263,"column_start":6,"column_end":15},"kind":{"Impl":{"id":306}},"from":{"krate":0,"index":5326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/buffer.rs","byte_start":930956,"byte_end":930967,"line_start":1301,"line_end":1301,"column_start":67,"column_end":78},"kind":{"Impl":{"id":307}},"from":{"krate":0,"index":7859},"to":{"krate":0,"index":5311}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":943078,"byte_end":943087,"line_start":35,"line_end":35,"column_start":6,"column_end":15},"kind":{"Impl":{"id":308}},"from":{"krate":0,"index":7890},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":946739,"byte_end":946756,"line_start":151,"line_end":151,"column_start":6,"column_end":23},"kind":{"Impl":{"id":309}},"from":{"krate":0,"index":7925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":948077,"byte_end":948094,"line_start":187,"line_end":187,"column_start":26,"column_end":43},"kind":{"Impl":{"id":310}},"from":{"krate":0,"index":7925},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":953614,"byte_end":953615,"line_start":378,"line_end":378,"column_start":41,"column_end":42},"kind":{"Impl":{"id":311}},"from":{"krate":0,"index":5379},"to":{"krate":0,"index":5375}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":955857,"byte_end":955858,"line_start":454,"line_end":454,"column_start":29,"column_end":30},"kind":{"Impl":{"id":318}},"from":{"krate":0,"index":5403},"to":{"krate":0,"index":5398}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":956881,"byte_end":956885,"line_start":481,"line_end":481,"column_start":57,"column_end":61},"kind":{"Impl":{"id":319}},"from":{"krate":0,"index":8211},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":957159,"byte_end":957163,"line_start":492,"line_end":492,"column_start":58,"column_end":62},"kind":{"Impl":{"id":320}},"from":{"krate":0,"index":8211},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":957399,"byte_end":957403,"line_start":501,"line_end":501,"column_start":70,"column_end":74},"kind":{"Impl":{"id":321}},"from":{"krate":0,"index":8211},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":957697,"byte_end":957701,"line_start":512,"line_end":512,"column_start":71,"column_end":75},"kind":{"Impl":{"id":322}},"from":{"krate":0,"index":8211},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":958028,"byte_end":958033,"line_start":526,"line_end":526,"column_start":58,"column_end":63},"kind":{"Impl":{"id":323}},"from":{"krate":0,"index":8269},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":958366,"byte_end":958371,"line_start":538,"line_end":538,"column_start":70,"column_end":75},"kind":{"Impl":{"id":324}},"from":{"krate":0,"index":8269},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":958711,"byte_end":958716,"line_start":550,"line_end":550,"column_start":71,"column_end":76},"kind":{"Impl":{"id":325}},"from":{"krate":0,"index":8269},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":959051,"byte_end":959056,"line_start":562,"line_end":562,"column_start":57,"column_end":62},"kind":{"Impl":{"id":326}},"from":{"krate":0,"index":8269},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":959375,"byte_end":959379,"line_start":575,"line_end":575,"column_start":57,"column_end":61},"kind":{"Impl":{"id":327}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":959773,"byte_end":959777,"line_start":589,"line_end":589,"column_start":56,"column_end":60},"kind":{"Impl":{"id":328}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":960162,"byte_end":960166,"line_start":603,"line_end":603,"column_start":58,"column_end":62},"kind":{"Impl":{"id":329}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":960560,"byte_end":960564,"line_start":617,"line_end":617,"column_start":57,"column_end":61},"kind":{"Impl":{"id":330}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":960967,"byte_end":960970,"line_start":633,"line_end":633,"column_start":56,"column_end":59},"kind":{"Impl":{"id":331}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":961318,"byte_end":961321,"line_start":646,"line_end":646,"column_start":57,"column_end":60},"kind":{"Impl":{"id":332}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":961667,"byte_end":961670,"line_start":659,"line_end":659,"column_start":58,"column_end":61},"kind":{"Impl":{"id":333}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":962009,"byte_end":962012,"line_start":672,"line_end":672,"column_start":57,"column_end":60},"kind":{"Impl":{"id":334}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":5395}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":962460,"byte_end":962465,"line_start":691,"line_end":691,"column_start":30,"column_end":35},"kind":{"Impl":{"id":335}},"from":{"krate":0,"index":8269},"to":{"krate":0,"index":5474}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":963476,"byte_end":963480,"line_start":724,"line_end":724,"column_start":30,"column_end":34},"kind":{"Impl":{"id":336}},"from":{"krate":0,"index":8211},"to":{"krate":0,"index":5474}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":963590,"byte_end":963594,"line_start":730,"line_end":730,"column_start":30,"column_end":34},"kind":{"Impl":{"id":337}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":5474}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":965806,"byte_end":965809,"line_start":786,"line_end":786,"column_start":30,"column_end":33},"kind":{"Impl":{"id":338}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":5474}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":966027,"byte_end":966032,"line_start":798,"line_end":798,"column_start":31,"column_end":36},"kind":{"Impl":{"id":339}},"from":{"krate":0,"index":8269},"to":{"krate":0,"index":5488}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":966211,"byte_end":966215,"line_start":807,"line_end":807,"column_start":31,"column_end":35},"kind":{"Impl":{"id":340}},"from":{"krate":0,"index":8211},"to":{"krate":0,"index":5488}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":966409,"byte_end":966413,"line_start":818,"line_end":818,"column_start":31,"column_end":35},"kind":{"Impl":{"id":341}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":5488}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/color.rs","byte_start":966631,"byte_end":966634,"line_start":828,"line_end":828,"column_start":31,"column_end":34},"kind":{"Impl":{"id":342}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":5488}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":975247,"byte_end":975259,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"kind":{"Impl":{"id":343}},"from":{"krate":0,"index":8298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002052,"byte_end":1002064,"line_start":867,"line_end":867,"column_start":26,"column_end":38},"kind":{"Impl":{"id":344}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002186,"byte_end":1002198,"line_start":873,"line_end":873,"column_start":31,"column_end":43},"kind":{"Impl":{"id":345}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002320,"byte_end":1002332,"line_start":879,"line_end":879,"column_start":25,"column_end":37},"kind":{"Impl":{"id":346}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002447,"byte_end":1002459,"line_start":885,"line_end":885,"column_start":26,"column_end":38},"kind":{"Impl":{"id":347}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002578,"byte_end":1002590,"line_start":891,"line_end":891,"column_start":28,"column_end":40},"kind":{"Impl":{"id":348}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002717,"byte_end":1002729,"line_start":897,"line_end":897,"column_start":33,"column_end":45},"kind":{"Impl":{"id":349}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002856,"byte_end":1002868,"line_start":903,"line_end":903,"column_start":27,"column_end":39},"kind":{"Impl":{"id":350}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1002988,"byte_end":1003000,"line_start":909,"line_end":909,"column_start":28,"column_end":40},"kind":{"Impl":{"id":351}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1003122,"byte_end":1003134,"line_start":915,"line_end":915,"column_start":28,"column_end":40},"kind":{"Impl":{"id":352}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1003257,"byte_end":1003269,"line_start":921,"line_end":921,"column_start":29,"column_end":41},"kind":{"Impl":{"id":353}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1003414,"byte_end":1003426,"line_start":927,"line_end":927,"column_start":49,"column_end":61},"kind":{"Impl":{"id":354}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1003601,"byte_end":1003613,"line_start":933,"line_end":933,"column_start":50,"column_end":62},"kind":{"Impl":{"id":355}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1003788,"byte_end":1003800,"line_start":940,"line_end":940,"column_start":27,"column_end":39},"kind":{"Impl":{"id":356}},"from":{"krate":0,"index":8298},"to":{"krate":0,"index":5927}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1004298,"byte_end":1004310,"line_start":957,"line_end":957,"column_start":23,"column_end":35},"kind":{"Impl":{"id":357}},"from":{"krate":0,"index":8298},"to":{"krate":0,"index":5938}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/dynimage.rs","byte_start":1006723,"byte_end":1006735,"line_start":1002,"line_end":1002,"column_start":18,"column_end":30},"kind":{"Impl":{"id":358}},"from":{"krate":0,"index":8298},"to":{"krate":2,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1018292,"byte_end":1018303,"line_start":72,"line_end":72,"column_start":6,"column_end":17},"kind":{"Impl":{"id":359}},"from":{"krate":0,"index":8352},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1026342,"byte_end":1026359,"line_start":311,"line_end":311,"column_start":28,"column_end":45},"kind":{"Impl":{"id":360}},"from":{"krate":0,"index":8395},"to":{"krate":2,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1027962,"byte_end":1027977,"line_start":355,"line_end":355,"column_start":6,"column_end":21},"kind":{"Impl":{"id":361}},"from":{"krate":0,"index":5867},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037210,"byte_end":1037218,"line_start":600,"line_end":600,"column_start":6,"column_end":14},"kind":{"Impl":{"id":362}},"from":{"krate":0,"index":8432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1037922,"byte_end":1037927,"line_start":625,"line_end":625,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":5894}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042709,"byte_end":1042721,"line_start":745,"line_end":745,"column_start":33,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":5894},"to":{"krate":0,"index":5908}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1042728,"byte_end":1042733,"line_start":745,"line_end":745,"column_start":52,"column_end":57},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":5908}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045151,"byte_end":1045157,"line_start":818,"line_end":818,"column_start":44,"column_end":50},"kind":{"Impl":{"id":363}},"from":{"krate":0,"index":8447},"to":{"krate":2,"index":7822}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1045625,"byte_end":1045631,"line_start":840,"line_end":840,"column_start":27,"column_end":33},"kind":{"Impl":{"id":364}},"from":{"krate":0,"index":8447},"to":{"krate":2,"index":2640}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1048253,"byte_end":1048269,"line_start":933,"line_end":933,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":5927},"to":{"krate":0,"index":5938}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1055907,"byte_end":1055915,"line_start":1124,"line_end":1124,"column_start":9,"column_end":17},"kind":{"Impl":{"id":365}},"from":{"krate":0,"index":8459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1057264,"byte_end":1057272,"line_start":1168,"line_end":1168,"column_start":9,"column_end":17},"kind":{"Impl":{"id":366}},"from":{"krate":0,"index":8459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1058679,"byte_end":1058687,"line_start":1206,"line_end":1206,"column_start":9,"column_end":17},"kind":{"Impl":{"id":367}},"from":{"krate":0,"index":8459},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1059503,"byte_end":1059511,"line_start":1234,"line_end":1234,"column_start":19,"column_end":27},"kind":{"Impl":{"id":368}},"from":{"krate":0,"index":8459},"to":{"krate":2,"index":3234}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1059662,"byte_end":1059670,"line_start":1244,"line_end":1244,"column_start":22,"column_end":30},"kind":{"Impl":{"id":369}},"from":{"krate":0,"index":8459},"to":{"krate":2,"index":3247}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1059833,"byte_end":1059846,"line_start":1254,"line_end":1254,"column_start":30,"column_end":43},"kind":{"Impl":{"id":370}},"from":{"krate":0,"index":8467},"to":{"krate":0,"index":5927}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/image.rs","byte_start":1060319,"byte_end":1060332,"line_start":1275,"line_end":1275,"column_start":26,"column_end":39},"kind":{"Impl":{"id":371}},"from":{"krate":0,"index":8467},"to":{"krate":0,"index":5938}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1077789,"byte_end":1077804,"line_start":12,"line_end":12,"column_start":35,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":6140},"to":{"krate":0,"index":6016}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078392,"byte_end":1078396,"line_start":37,"line_end":37,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":6024}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078399,"byte_end":1078406,"line_start":37,"line_end":37,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":58,"index":362},"to":{"krate":0,"index":6024}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078409,"byte_end":1078412,"line_start":37,"line_end":37,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":58,"index":968},"to":{"krate":0,"index":6024}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078415,"byte_end":1078425,"line_start":37,"line_end":37,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":2717},"to":{"krate":0,"index":6024}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078434,"byte_end":1078439,"line_start":37,"line_end":37,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":2640},"to":{"krate":0,"index":6024}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1078442,"byte_end":1078449,"line_start":37,"line_end":37,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":58,"index":237},"to":{"krate":0,"index":6024}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1079814,"byte_end":1079819,"line_start":72,"line_end":72,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":3024},"to":{"krate":0,"index":6028}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1079822,"byte_end":1079829,"line_start":72,"line_end":72,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":58,"index":237},"to":{"krate":0,"index":6028}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1079832,"byte_end":1079839,"line_start":72,"line_end":72,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":58,"index":362},"to":{"krate":0,"index":6028}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1081142,"byte_end":1081149,"line_start":130,"line_end":130,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":58,"index":237},"to":{"krate":0,"index":6056}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1081152,"byte_end":1081159,"line_start":130,"line_end":130,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":58,"index":362},"to":{"krate":0,"index":6056}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082092,"byte_end":1082097,"line_start":171,"line_end":171,"column_start":31,"column_end":36},"kind":"SuperTrait","from":{"krate":0,"index":6103},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082115,"byte_end":1082139,"line_start":171,"line_end":171,"column_start":54,"column_end":78},"kind":"SuperTrait","from":{"krate":0,"index":6092},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082430,"byte_end":1082433,"line_start":179,"line_end":179,"column_start":29,"column_end":32},"kind":{"Impl":{"id":400}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082521,"byte_end":1082524,"line_start":182,"line_end":182,"column_start":29,"column_end":32},"kind":{"Impl":{"id":401}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082614,"byte_end":1082617,"line_start":185,"line_end":185,"column_start":29,"column_end":32},"kind":{"Impl":{"id":402}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082709,"byte_end":1082713,"line_start":189,"line_end":189,"column_start":29,"column_end":33},"kind":{"Impl":{"id":403}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082802,"byte_end":1082806,"line_start":192,"line_end":192,"column_start":29,"column_end":33},"kind":{"Impl":{"id":404}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082897,"byte_end":1082901,"line_start":195,"line_end":195,"column_start":29,"column_end":33},"kind":{"Impl":{"id":405}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1082994,"byte_end":1082998,"line_start":199,"line_end":199,"column_start":29,"column_end":33},"kind":{"Impl":{"id":406}},"from":{"krate":0,"index":8211},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083084,"byte_end":1083088,"line_start":202,"line_end":202,"column_start":29,"column_end":33},"kind":{"Impl":{"id":407}},"from":{"krate":0,"index":8211},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083176,"byte_end":1083181,"line_start":205,"line_end":205,"column_start":29,"column_end":34},"kind":{"Impl":{"id":408}},"from":{"krate":0,"index":8269},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083268,"byte_end":1083273,"line_start":208,"line_end":208,"column_start":29,"column_end":34},"kind":{"Impl":{"id":409}},"from":{"krate":0,"index":8269},"to":{"krate":0,"index":6068}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083526,"byte_end":1083529,"line_start":217,"line_end":217,"column_start":39,"column_end":42},"kind":{"Impl":{"id":410}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":6092}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083575,"byte_end":1083578,"line_start":218,"line_end":218,"column_start":39,"column_end":42},"kind":{"Impl":{"id":411}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":6092}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083625,"byte_end":1083628,"line_start":219,"line_end":219,"column_start":39,"column_end":42},"kind":{"Impl":{"id":412}},"from":{"krate":0,"index":8182},"to":{"krate":0,"index":6092}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083676,"byte_end":1083680,"line_start":221,"line_end":221,"column_start":39,"column_end":43},"kind":{"Impl":{"id":413}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":6092}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083726,"byte_end":1083730,"line_start":222,"line_end":222,"column_start":39,"column_end":43},"kind":{"Impl":{"id":414}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":6092}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083777,"byte_end":1083781,"line_start":223,"line_end":223,"column_start":39,"column_end":43},"kind":{"Impl":{"id":415}},"from":{"krate":0,"index":8240},"to":{"krate":0,"index":6092}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083829,"byte_end":1083833,"line_start":225,"line_end":225,"column_start":39,"column_end":43},"kind":{"Impl":{"id":416}},"from":{"krate":0,"index":8211},"to":{"krate":0,"index":6092}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083879,"byte_end":1083884,"line_start":226,"line_end":226,"column_start":39,"column_end":44},"kind":{"Impl":{"id":417}},"from":{"krate":0,"index":8269},"to":{"krate":0,"index":6092}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083931,"byte_end":1083935,"line_start":228,"line_end":228,"column_start":39,"column_end":43},"kind":{"Impl":{"id":418}},"from":{"krate":0,"index":8211},"to":{"krate":0,"index":6092}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1083982,"byte_end":1083987,"line_start":229,"line_end":229,"column_start":39,"column_end":44},"kind":{"Impl":{"id":419}},"from":{"krate":0,"index":8269},"to":{"krate":0,"index":6092}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084131,"byte_end":1084135,"line_start":235,"line_end":235,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":3029},"to":{"krate":0,"index":6103}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.24.2/./src/traits.rs","byte_start":1084138,"byte_end":1084143,"line_start":235,"line_end":235,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2640},"to":{"krate":0,"index":6103}}]}