{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3","program":"/home/lichi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","spin","/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"barrier\"","--cfg","feature=\"default\"","--cfg","feature=\"lazy\"","--cfg","feature=\"lock_api\"","--cfg","feature=\"lock_api_crate\"","--cfg","feature=\"mutex\"","--cfg","feature=\"once\"","--cfg","feature=\"rwlock\"","--cfg","feature=\"spin_mutex\"","-C","metadata=9b852d1ca8a13f0f","-C","extra-filename=-9b852d1ca8a13f0f","--out-dir","/home/lichi/projects/combiner/target/rls/debug/deps","-L","dependency=/home/lichi/projects/combiner/target/rls/debug/deps","--extern","lock_api_crate=/home/lichi/projects/combiner/target/rls/debug/deps/liblock_api-d15243c4a8009918.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/lichi/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/lichi/projects/combiner/target/rls/debug/deps/libspin-9b852d1ca8a13f0f.rmeta"},"prelude":{"crate_id":{"name":"spin","disambiguator":[11917244109509819835,0]},"crate_root":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src","external_crates":[{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[5443730852259234579,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4162025702538114948,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17612152343462746361,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","num":4,"id":{"name":"lock_api","disambiguator":[11994815419998842249,0]}},{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","num":5,"id":{"name":"scopeguard","disambiguator":[6845241270465700697,0]}}],"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":0,"byte_end":8757,"line_start":1,"line_end":186,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":123},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19793,"byte_end":19802,"line_start":21,"line_end":21,"column_start":22,"column_end":31},"alias_span":null,"name":"SpinMutex","value":"","parent":{"krate":0,"index":90}},{"kind":"Use","ref_id":{"krate":0,"index":129},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19804,"byte_end":19818,"line_start":21,"line_end":21,"column_start":33,"column_end":47},"alias_span":null,"name":"SpinMutexGuard","value":"","parent":{"krate":0,"index":90}},{"kind":"Use","ref_id":{"krate":0,"index":243},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2864,"byte_end":2874,"line_start":82,"line_end":82,"column_start":16,"column_end":26},"alias_span":null,"name":"MutexGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":463},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2969,"byte_end":2984,"line_start":85,"line_end":85,"column_start":17,"column_end":32},"alias_span":null,"name":"RwLockReadGuard","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":643},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":3002,"byte_end":3006,"line_start":86,"line_end":86,"column_start":17,"column_end":21},"alias_span":null,"name":"Spin","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":644},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":3002,"byte_end":3006,"line_start":86,"line_end":86,"column_start":17,"column_end":21},"alias_span":null,"name":"Spin","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":641},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":3008,"byte_end":3021,"line_start":86,"line_end":86,"column_start":23,"column_end":36},"alias_span":null,"name":"RelaxStrategy","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":0,"byte_end":8757,"line_start":1,"line_end":186,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":33},{"krate":0,"index":90},{"krate":0,"index":305},{"krate":0,"index":419},{"krate":0,"index":640},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":672},{"krate":0,"index":674},{"krate":0,"index":677},{"krate":0,"index":680}],"decl_id":null,"docs":" This crate provides [spin-based](https://en.wikipedia.org/wiki/Spinlock) versions of the\n primitives in `std::sync` and `std::lazy`. Because synchronization is done through spinning,\n the primitives are suitable for use in `no_std` environments.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":50,"byte_end":56,"line_start":1,"line_end":1,"column_start":51,"column_end":57}},{"value":"deny(missing_docs)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":98,"byte_end":120,"line_start":3,"line_end":3,"column_start":1,"column_end":23}},{"value":"/ This crate provides [spin-based](https://en.wikipedia.org/wiki/Spinlock) versions of the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":122,"byte_end":214,"line_start":5,"line_end":5,"column_start":1,"column_end":93}},{"value":"/ primitives in `std::sync` and `std::lazy`. Because synchronization is done through spinning,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":215,"byte_end":311,"line_start":6,"line_end":6,"column_start":1,"column_end":97}},{"value":"/ the primitives are suitable for use in `no_std` environments.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":312,"byte_end":377,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":378,"byte_end":381,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Features","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":382,"byte_end":396,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":397,"byte_end":400,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ - `Mutex`, `RwLock`, `Once`/`SyncOnceCell`, and `SyncLazy` equivalents","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":401,"byte_end":475,"line_start":11,"line_end":11,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":476,"byte_end":479,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ - Support for `no_std` environments","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":480,"byte_end":519,"line_start":13,"line_end":13,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":520,"byte_end":523,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ - [`lock_api`](https://crates.io/crates/lock_api) compatibility","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":524,"byte_end":591,"line_start":15,"line_end":15,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":592,"byte_end":595,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ - Upgradeable `RwLock` guards","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":596,"byte_end":629,"line_start":17,"line_end":17,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":630,"byte_end":633,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ - Guards can be sent and shared between threads","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":634,"byte_end":685,"line_start":19,"line_end":19,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":686,"byte_end":689,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ - Guard leaking","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":690,"byte_end":709,"line_start":21,"line_end":21,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":710,"byte_end":713,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - Ticket locks","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":714,"byte_end":732,"line_start":23,"line_end":23,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":733,"byte_end":736,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - Different strategies for dealing with contention","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":737,"byte_end":791,"line_start":25,"line_end":25,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":792,"byte_end":795,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ # Relationship with `std::sync`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":796,"byte_end":831,"line_start":27,"line_end":27,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":832,"byte_end":835,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ While `spin` is not a drop-in replacement for `std::sync` (and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":836,"byte_end":902,"line_start":29,"line_end":29,"column_start":1,"column_end":67}},{"value":"/ [should not be considered as such](https://matklad.github.io/2020/01/02/spinlocks-considered-harmful.html))","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":903,"byte_end":1014,"line_start":30,"line_end":30,"column_start":1,"column_end":112}},{"value":"/ an effort is made to keep this crate reasonably consistent with `std::sync`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1015,"byte_end":1095,"line_start":31,"line_end":31,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1096,"byte_end":1099,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Many of the types defined in this crate have 'additional capabilities' when compared to `std::sync`:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1100,"byte_end":1204,"line_start":33,"line_end":33,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1205,"byte_end":1208,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ - Because spinning does not depend on the thread-driven model of `std::sync`, guards ([`MutexGuard`],","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1209,"byte_end":1314,"line_start":35,"line_end":35,"column_start":1,"column_end":106}},{"value":"/   [`RwLockReadGuard`], [`RwLockWriteGuard`], etc.) may be sent and shared between threads.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1315,"byte_end":1409,"line_start":36,"line_end":36,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1410,"byte_end":1413,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ - [`RwLockUpgradableGuard`] supports being upgraded into a [`RwLockWriteGuard`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1414,"byte_end":1498,"line_start":38,"line_end":38,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1499,"byte_end":1502,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ - Guards support [leaking](https://doc.rust-lang.org/nomicon/leaking.html).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1503,"byte_end":1582,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1583,"byte_end":1586,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ - [`Once`] owns the value returned by its `call_once` initializer.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1587,"byte_end":1657,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1658,"byte_end":1661,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ - [`RwLock`] supports counting readers and writers.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1662,"byte_end":1717,"line_start":44,"line_end":44,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1718,"byte_end":1721,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Conversely, the types in this crate do not have some of the features `std::sync` has:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1722,"byte_end":1811,"line_start":46,"line_end":46,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1812,"byte_end":1815,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ - Locks do not track [panic poisoning](https://doc.rust-lang.org/nomicon/poisoning.html).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1816,"byte_end":1909,"line_start":48,"line_end":48,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1910,"byte_end":1913,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ ## Feature flags","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1914,"byte_end":1934,"line_start":50,"line_end":50,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1935,"byte_end":1938,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ The crate comes with a few feature flags that you may wish to use.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":1939,"byte_end":2009,"line_start":52,"line_end":52,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2010,"byte_end":2013,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ - `lock_api` enables support for [`lock_api`](https://crates.io/crates/lock_api)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2014,"byte_end":2098,"line_start":54,"line_end":54,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2099,"byte_end":2102,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ - `ticket_mutex` uses a ticket lock for the implementation of `Mutex`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2103,"byte_end":2176,"line_start":56,"line_end":56,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2177,"byte_end":2180,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ - `std` enables support for thread yielding instead of spinning","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2181,"byte_end":2248,"line_start":58,"line_end":58,"column_start":1,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"barrier","qualname":"::barrier","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":15},{"krate":0,"index":19},{"krate":0,"index":22},{"krate":0,"index":25},{"krate":0,"index":28},{"krate":0,"index":31}],"decl_id":null,"docs":" Synchronization primitive allowing multiple threads to synchronize the\n beginning of some computation.","sig":null,"attributes":[{"value":"cfg(feature = \"barrier\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2305,"byte_end":2332,"line_start":63,"line_end":63,"column_start":1,"column_end":28}},{"value":"/ Synchronization primitive allowing multiple threads to synchronize the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":8759,"byte_end":8833,"line_start":1,"line_end":1,"column_start":1,"column_end":75}},{"value":"/ beginning of some computation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":8834,"byte_end":8868,"line_start":2,"line_end":2,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":8869,"byte_end":8872,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Implementation adapted from the 'Barrier' type of the standard library. See:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":8873,"byte_end":8953,"line_start":4,"line_end":4,"column_start":1,"column_end":81}},{"value":"/ <https://doc.rust-lang.org/std/sync/struct.Barrier.html>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":8954,"byte_end":9014,"line_start":5,"line_end":5,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9015,"byte_end":9018,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Copyright 2014 The Rust Project Developers. See the COPYRIGHT","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9019,"byte_end":9084,"line_start":7,"line_end":7,"column_start":1,"column_end":66}},{"value":"/ file at the top-level directory of this distribution and at","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9085,"byte_end":9148,"line_start":8,"line_end":8,"column_start":1,"column_end":64}},{"value":"/ <http://rust-lang.org/COPYRIGHT>.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9149,"byte_end":9186,"line_start":9,"line_end":9,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9187,"byte_end":9190,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9191,"byte_end":9260,"line_start":11,"line_end":11,"column_start":1,"column_end":70}},{"value":"/ <http://www.apache.org/licenses/LICENSE-2.0>> or the MIT license","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9261,"byte_end":9329,"line_start":12,"line_end":12,"column_start":1,"column_end":69}},{"value":"/ <LICENSE-MIT or <http://opensource.org/licenses/MIT>>, at your","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9330,"byte_end":9396,"line_start":13,"line_end":13,"column_start":1,"column_end":67}},{"value":"/ option. This file may not be copied, modified, or distributed","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9397,"byte_end":9462,"line_start":14,"line_end":14,"column_start":1,"column_end":66}},{"value":"/ except according to those terms.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9463,"byte_end":9499,"line_start":15,"line_end":15,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":15},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10249,"byte_end":10256,"line_start":45,"line_end":45,"column_start":12,"column_end":19},"name":"Barrier","qualname":"::barrier::Barrier","value":"Barrier {  }","parent":null,"children":[{"krate":0,"index":17},{"krate":0,"index":18}],"decl_id":null,"docs":" A primitive that synchronizes the execution of multiple threads.","sig":null,"attributes":[{"value":"/ A primitive that synchronizes the execution of multiple threads.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9550,"byte_end":9618,"line_start":19,"line_end":19,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9619,"byte_end":9622,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9623,"byte_end":9636,"line_start":21,"line_end":21,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9637,"byte_end":9640,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9641,"byte_end":9648,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9649,"byte_end":9662,"line_start":24,"line_end":24,"column_start":1,"column_end":14}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9663,"byte_end":9686,"line_start":25,"line_end":25,"column_start":1,"column_end":24}},{"value":"/ use std::thread;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9687,"byte_end":9707,"line_start":26,"line_end":26,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9708,"byte_end":9711,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ let mut handles = Vec::with_capacity(10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9712,"byte_end":9757,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"/ let barrier = Arc::new(spin::Barrier::new(10));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9758,"byte_end":9809,"line_start":29,"line_end":29,"column_start":1,"column_end":52}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9810,"byte_end":9830,"line_start":30,"line_end":30,"column_start":1,"column_end":21}},{"value":"/     let c = barrier.clone();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9831,"byte_end":9863,"line_start":31,"line_end":31,"column_start":1,"column_end":33}},{"value":"/     // The same messages will be printed together.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9864,"byte_end":9918,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/     // You will NOT see any interleaving.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9919,"byte_end":9964,"line_start":33,"line_end":33,"column_start":1,"column_end":46}},{"value":"/     handles.push(thread::spawn(move|| {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":9965,"byte_end":10008,"line_start":34,"line_end":34,"column_start":1,"column_end":44}},{"value":"/         println!(\"before wait\");","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10009,"byte_end":10045,"line_start":35,"line_end":35,"column_start":1,"column_end":37}},{"value":"/         c.wait();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10046,"byte_end":10067,"line_start":36,"line_end":36,"column_start":1,"column_end":22}},{"value":"/         println!(\"after wait\");","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10068,"byte_end":10103,"line_start":37,"line_end":37,"column_start":1,"column_end":36}},{"value":"/     }));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10104,"byte_end":10116,"line_start":38,"line_end":38,"column_start":1,"column_end":13}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10117,"byte_end":10122,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/ // Wait for other threads to finish.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10123,"byte_end":10163,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/ for handle in handles {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10164,"byte_end":10191,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/     handle.join().unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10192,"byte_end":10223,"line_start":42,"line_end":42,"column_start":1,"column_end":32}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10224,"byte_end":10229,"line_start":43,"line_end":43,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10230,"byte_end":10237,"line_start":44,"line_end":44,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":22},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10789,"byte_end":10806,"line_start":70,"line_end":70,"column_start":12,"column_end":29},"name":"BarrierWaitResult","qualname":"::barrier::BarrierWaitResult","value":"","parent":null,"children":[],"decl_id":null,"docs":" A `BarrierWaitResult` is returned by [`wait`] when all threads in the [`Barrier`]\n have rendezvoused.","sig":null,"attributes":[{"value":"/ A `BarrierWaitResult` is returned by [`wait`] when all threads in the [`Barrier`]","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10438,"byte_end":10523,"line_start":56,"line_end":56,"column_start":1,"column_end":86}},{"value":"/ have rendezvoused.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10524,"byte_end":10546,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10547,"byte_end":10550,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`wait`]: struct.Barrier.html#method.wait","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10551,"byte_end":10596,"line_start":59,"line_end":59,"column_start":1,"column_end":46}},{"value":"/ [`Barrier`]: struct.Barrier.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10597,"byte_end":10633,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10634,"byte_end":10637,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10638,"byte_end":10652,"line_start":62,"line_end":62,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10653,"byte_end":10656,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10657,"byte_end":10664,"line_start":64,"line_end":64,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10665,"byte_end":10678,"line_start":65,"line_end":65,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10679,"byte_end":10682,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let barrier = spin::Barrier::new(1);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10683,"byte_end":10723,"line_start":67,"line_end":67,"column_start":1,"column_end":41}},{"value":"/ let barrier_wait_result = barrier.wait();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10724,"byte_end":10769,"line_start":68,"line_end":68,"column_start":1,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10770,"byte_end":10777,"line_start":69,"line_end":69,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":27},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":12184,"byte_end":12188,"line_start":110,"line_end":110,"column_start":12,"column_end":16},"name":"wait","qualname":"<Barrier<R>>::wait","value":"pub fn wait(&Self) -> BarrierWaitResult","parent":null,"children":[],"decl_id":null,"docs":" Blocks the current thread until all threads have rendezvoused here.","sig":null,"attributes":[{"value":"/ Blocks the current thread until all threads have rendezvoused here.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10855,"byte_end":10926,"line_start":73,"line_end":73,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10931,"byte_end":10934,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ Barriers are re-usable after all threads have rendezvoused once, and can","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10939,"byte_end":11015,"line_start":75,"line_end":75,"column_start":5,"column_end":81}},{"value":"/ be used continuously.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11020,"byte_end":11045,"line_start":76,"line_end":76,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11050,"byte_end":11053,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ A single (arbitrary) thread will receive a [`BarrierWaitResult`] that","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11058,"byte_end":11131,"line_start":78,"line_end":78,"column_start":5,"column_end":78}},{"value":"/ returns `true` from [`is_leader`] when returning from this function, and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11136,"byte_end":11212,"line_start":79,"line_end":79,"column_start":5,"column_end":81}},{"value":"/ all other threads will receive a result that will return `false` from","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11217,"byte_end":11290,"line_start":80,"line_end":80,"column_start":5,"column_end":78}},{"value":"/ [`is_leader`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11295,"byte_end":11313,"line_start":81,"line_end":81,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11318,"byte_end":11321,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ [`BarrierWaitResult`]: struct.BarrierWaitResult.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11326,"byte_end":11382,"line_start":83,"line_end":83,"column_start":5,"column_end":61}},{"value":"/ [`is_leader`]: struct.BarrierWaitResult.html#method.is_leader","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11387,"byte_end":11452,"line_start":84,"line_end":84,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11457,"byte_end":11460,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11465,"byte_end":11479,"line_start":86,"line_end":86,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11484,"byte_end":11487,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11492,"byte_end":11499,"line_start":88,"line_end":88,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11504,"byte_end":11517,"line_start":89,"line_end":89,"column_start":5,"column_end":18}},{"value":"/ use std::sync::Arc;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11522,"byte_end":11545,"line_start":90,"line_end":90,"column_start":5,"column_end":28}},{"value":"/ use std::thread;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11550,"byte_end":11570,"line_start":91,"line_end":91,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11575,"byte_end":11578,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ let mut handles = Vec::with_capacity(10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11583,"byte_end":11628,"line_start":93,"line_end":93,"column_start":5,"column_end":50}},{"value":"/ let barrier = Arc::new(spin::Barrier::new(10));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11633,"byte_end":11684,"line_start":94,"line_end":94,"column_start":5,"column_end":56}},{"value":"/ for _ in 0..10 {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11689,"byte_end":11709,"line_start":95,"line_end":95,"column_start":5,"column_end":25}},{"value":"/     let c = barrier.clone();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11714,"byte_end":11746,"line_start":96,"line_end":96,"column_start":5,"column_end":37}},{"value":"/     // The same messages will be printed together.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11751,"byte_end":11805,"line_start":97,"line_end":97,"column_start":5,"column_end":59}},{"value":"/     // You will NOT see any interleaving.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11810,"byte_end":11855,"line_start":98,"line_end":98,"column_start":5,"column_end":50}},{"value":"/     handles.push(thread::spawn(move|| {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11860,"byte_end":11903,"line_start":99,"line_end":99,"column_start":5,"column_end":48}},{"value":"/         println!(\"before wait\");","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11908,"byte_end":11944,"line_start":100,"line_end":100,"column_start":5,"column_end":41}},{"value":"/         c.wait();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11949,"byte_end":11970,"line_start":101,"line_end":101,"column_start":5,"column_end":26}},{"value":"/         println!(\"after wait\");","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":11975,"byte_end":12010,"line_start":102,"line_end":102,"column_start":5,"column_end":40}},{"value":"/     }));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":12015,"byte_end":12027,"line_start":103,"line_end":103,"column_start":5,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":12032,"byte_end":12037,"line_start":104,"line_end":104,"column_start":5,"column_end":10}},{"value":"/ // Wait for other threads to finish.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":12042,"byte_end":12082,"line_start":105,"line_end":105,"column_start":5,"column_end":45}},{"value":"/ for handle in handles {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":12087,"byte_end":12114,"line_start":106,"line_end":106,"column_start":5,"column_end":32}},{"value":"/     handle.join().unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":12119,"byte_end":12150,"line_start":107,"line_end":107,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":12155,"byte_end":12160,"line_start":108,"line_end":108,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":12165,"byte_end":12172,"line_start":109,"line_end":109,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13458,"byte_end":13461,"line_start":151,"line_end":151,"column_start":18,"column_end":21},"name":"new","qualname":"<Barrier<R>>::new","value":"pub const fn new(usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new barrier that can block a given number of threads.","sig":null,"attributes":[{"value":"/ Creates a new barrier that can block a given number of threads.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":12961,"byte_end":13028,"line_start":136,"line_end":136,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13033,"byte_end":13036,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ A barrier will block `n`-1 threads which call [`wait`] and then wake up","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13041,"byte_end":13116,"line_start":138,"line_end":138,"column_start":5,"column_end":80}},{"value":"/ all threads at once when the `n`th thread calls [`wait`]. A Barrier created","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13121,"byte_end":13200,"line_start":139,"line_end":139,"column_start":5,"column_end":84}},{"value":"/ with n = 0 will behave identically to one created with n = 1.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13205,"byte_end":13270,"line_start":140,"line_end":140,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13275,"byte_end":13278,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ [`wait`]: #method.wait","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13283,"byte_end":13309,"line_start":142,"line_end":142,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13314,"byte_end":13317,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13322,"byte_end":13336,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13341,"byte_end":13344,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13349,"byte_end":13356,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13361,"byte_end":13374,"line_start":147,"line_end":147,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13379,"byte_end":13382,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let barrier = spin::Barrier::new(10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13387,"byte_end":13428,"line_start":149,"line_end":149,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13433,"byte_end":13440,"line_start":150,"line_end":150,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":14202,"byte_end":14211,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"is_leader","qualname":"<BarrierWaitResult>::is_leader","value":"pub fn is_leader(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether this thread from [`wait`] is the \"leader thread\".","sig":null,"attributes":[{"value":"/ Returns whether this thread from [`wait`] is the \"leader thread\".","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13693,"byte_end":13762,"line_start":163,"line_end":163,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13767,"byte_end":13770,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Only one thread will have `true` returned from their result, all other","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13775,"byte_end":13849,"line_start":165,"line_end":165,"column_start":5,"column_end":79}},{"value":"/ threads will have `false` returned.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13854,"byte_end":13893,"line_start":166,"line_end":166,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13898,"byte_end":13901,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ [`wait`]: struct.Barrier.html#method.wait","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13906,"byte_end":13951,"line_start":168,"line_end":168,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13956,"byte_end":13959,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13964,"byte_end":13978,"line_start":170,"line_end":170,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13983,"byte_end":13986,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13991,"byte_end":13998,"line_start":172,"line_end":172,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":14003,"byte_end":14016,"line_start":173,"line_end":173,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":14021,"byte_end":14024,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ let barrier = spin::Barrier::new(1);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":14029,"byte_end":14069,"line_start":175,"line_end":175,"column_start":5,"column_end":45}},{"value":"/ let barrier_wait_result = barrier.wait();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":14074,"byte_end":14119,"line_start":176,"line_end":176,"column_start":5,"column_end":50}},{"value":"/ println!(\"{:?}\", barrier_wait_result.is_leader());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":14124,"byte_end":14178,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":14183,"byte_end":14190,"line_start":178,"line_end":178,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":33},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"lazy","qualname":"::lazy","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":60},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":74},{"krate":0,"index":80},{"krate":0,"index":86}],"decl_id":null,"docs":" Synchronization primitives for lazy evaluation.","sig":null,"attributes":[{"value":"cfg(feature = \"lazy\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2401,"byte_end":2425,"line_start":66,"line_end":66,"column_start":1,"column_end":25}},{"value":"/ Synchronization primitives for lazy evaluation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":15561,"byte_end":15612,"line_start":1,"line_end":1,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":15613,"byte_end":15616,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Implementation adapted from the `SyncLazy` type of the standard library. See:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":15617,"byte_end":15698,"line_start":3,"line_end":3,"column_start":1,"column_end":82}},{"value":"/ <https://doc.rust-lang.org/std/lazy/struct.SyncLazy.html>","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":15699,"byte_end":15760,"line_start":4,"line_end":4,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":54},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16651,"byte_end":16655,"line_start":41,"line_end":41,"column_start":12,"column_end":16},"name":"Lazy","qualname":"::lazy::Lazy","value":"Lazy {  }","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59}],"decl_id":null,"docs":" A value which is initialized on the first access.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":15850,"byte_end":15903,"line_start":9,"line_end":9,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":15904,"byte_end":15907,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This type is a thread-safe `Lazy`, and can be used in statics.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":15908,"byte_end":15974,"line_start":11,"line_end":11,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":15975,"byte_end":15978,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":15979,"byte_end":15993,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":15994,"byte_end":15997,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":15998,"byte_end":16005,"line_start":15,"line_end":15,"column_start":1,"column_end":8}},{"value":"/ use std::collections::HashMap;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16006,"byte_end":16040,"line_start":16,"line_end":16,"column_start":1,"column_end":35}},{"value":"/ use spin::Lazy;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16041,"byte_end":16060,"line_start":17,"line_end":17,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16061,"byte_end":16064,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ static HASHMAP: Lazy<HashMap<i32, String>> = Lazy::new(|| {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16065,"byte_end":16128,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/     println!(\"initializing\");","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16129,"byte_end":16162,"line_start":20,"line_end":20,"column_start":1,"column_end":34}},{"value":"/     let mut m = HashMap::new();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16163,"byte_end":16198,"line_start":21,"line_end":21,"column_start":1,"column_end":36}},{"value":"/     m.insert(13, \"Spica\".to_string());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16199,"byte_end":16241,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/     m.insert(74, \"Hoyten\".to_string());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16242,"byte_end":16285,"line_start":23,"line_end":23,"column_start":1,"column_end":44}},{"value":"/     m","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16286,"byte_end":16295,"line_start":24,"line_end":24,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16296,"byte_end":16303,"line_start":25,"line_end":25,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16304,"byte_end":16307,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16308,"byte_end":16323,"line_start":27,"line_end":27,"column_start":1,"column_end":16}},{"value":"/     println!(\"ready\");","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16324,"byte_end":16350,"line_start":28,"line_end":28,"column_start":1,"column_end":27}},{"value":"/     std::thread::spawn(|| {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16351,"byte_end":16382,"line_start":29,"line_end":29,"column_start":1,"column_end":32}},{"value":"/         println!(\"{:?}\", HASHMAP.get(&13));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16383,"byte_end":16430,"line_start":30,"line_end":30,"column_start":1,"column_end":48}},{"value":"/     }).join().unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16431,"byte_end":16458,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"/     println!(\"{:?}\", HASHMAP.get(&74));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16459,"byte_end":16502,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16503,"byte_end":16506,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     // Prints:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16507,"byte_end":16525,"line_start":34,"line_end":34,"column_start":1,"column_end":19}},{"value":"/     //   ready","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16526,"byte_end":16544,"line_start":35,"line_end":35,"column_start":1,"column_end":19}},{"value":"/     //   initializing","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16545,"byte_end":16570,"line_start":36,"line_end":36,"column_start":1,"column_end":26}},{"value":"/     //   Some(\"Spica\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16571,"byte_end":16597,"line_start":37,"line_end":37,"column_start":1,"column_end":27}},{"value":"/     //   Some(\"Hoyten\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16598,"byte_end":16625,"line_start":38,"line_end":38,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16626,"byte_end":16631,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16632,"byte_end":16639,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17431,"byte_end":17434,"line_start":63,"line_end":63,"column_start":18,"column_end":21},"name":"new","qualname":"<Lazy<T, F, R>>::new","value":"pub const fn new(F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new lazy value with the given initializing\n function.\n","sig":null,"attributes":[{"value":"/ Creates a new lazy value with the given initializing","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17339,"byte_end":17395,"line_start":61,"line_end":61,"column_start":5,"column_end":61}},{"value":"/ function.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17400,"byte_end":17413,"line_start":62,"line_end":62,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17852,"byte_end":17862,"line_start":71,"line_end":71,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<Lazy<T, F, R>>::as_mut_ptr","value":"pub fn as_mut_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a mutable pointer to the inner data.","sig":null,"attributes":[{"value":"/ Retrieves a mutable pointer to the inner data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17522,"byte_end":17572,"line_start":66,"line_end":66,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17577,"byte_end":17580,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This is especially useful when interfacing with low level code or FFI where the caller","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17585,"byte_end":17675,"line_start":68,"line_end":68,"column_start":5,"column_end":95}},{"value":"/ explicitly knows that it has exclusive access to the inner data. Note that reading from","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17680,"byte_end":17771,"line_start":69,"line_end":69,"column_start":5,"column_end":96}},{"value":"/ this pointer is UB until initialized or directly written to.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17776,"byte_end":17840,"line_start":70,"line_end":70,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18364,"byte_end":18369,"line_start":91,"line_end":91,"column_start":12,"column_end":17},"name":"force","qualname":"<Lazy<T, F, R>>::force","value":"pub fn force(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Forces the evaluation of this lazy value and\n returns a reference to result. This is equivalent\n to the `Deref` impl, but is explicit.","sig":null,"attributes":[{"value":"/ Forces the evaluation of this lazy value and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17986,"byte_end":18034,"line_start":77,"line_end":77,"column_start":5,"column_end":53}},{"value":"/ returns a reference to result. This is equivalent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18039,"byte_end":18092,"line_start":78,"line_end":78,"column_start":5,"column_end":58}},{"value":"/ to the `Deref` impl, but is explicit.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18097,"byte_end":18138,"line_start":79,"line_end":79,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18143,"byte_end":18146,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18151,"byte_end":18165,"line_start":81,"line_end":81,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18170,"byte_end":18173,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18178,"byte_end":18185,"line_start":83,"line_end":83,"column_start":5,"column_end":12}},{"value":"/ use spin::Lazy;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18190,"byte_end":18209,"line_start":84,"line_end":84,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18214,"byte_end":18217,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ let lazy = Lazy::new(|| 92);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18222,"byte_end":18254,"line_start":86,"line_end":86,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18259,"byte_end":18262,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Lazy::force(&lazy), &92);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18267,"byte_end":18307,"line_start":88,"line_end":88,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(&*lazy, &92);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18312,"byte_end":18340,"line_start":89,"line_end":89,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18345,"byte_end":18352,"line_start":90,"line_end":90,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":90},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mutex","qualname":"::mutex","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":206},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":217},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":224},{"krate":0,"index":225},{"krate":0,"index":227},{"krate":0,"index":230},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":240},{"krate":0,"index":243},{"krate":0,"index":247},{"krate":0,"index":252},{"krate":0,"index":256},{"krate":0,"index":264},{"krate":0,"index":268},{"krate":0,"index":272},{"krate":0,"index":276},{"krate":0,"index":280},{"krate":0,"index":284},{"krate":0,"index":288},{"krate":0,"index":293},{"krate":0,"index":297}],"decl_id":null,"docs":" Locks that have the same behaviour as a mutex.","sig":null,"attributes":[{"value":"cfg(feature = \"mutex\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2488,"byte_end":2513,"line_start":69,"line_end":69,"column_start":1,"column_end":26}},{"value":"/ Locks that have the same behaviour as a mutex.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":18925,"byte_end":18975,"line_start":1,"line_end":1,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":18976,"byte_end":18979,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The [`Mutex`] in the root of the crate, can be configured using the `ticket_mutex` feature.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":18980,"byte_end":19075,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ If it's enabled, [`TicketMutex`] and [`TicketMutexGuard`] will be re-exported as [`Mutex`]","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19076,"byte_end":19170,"line_start":4,"line_end":4,"column_start":1,"column_end":95}},{"value":"/ and [`MutexGuard`], otherwise the [`SpinMutex`] and guard will be re-exported.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19171,"byte_end":19253,"line_start":5,"line_end":5,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19254,"byte_end":19257,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ `ticket_mutex` is disabled by default.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19258,"byte_end":19300,"line_start":7,"line_end":7,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19301,"byte_end":19304,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ [`Mutex`]: ../struct.Mutex.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19305,"byte_end":19340,"line_start":9,"line_end":9,"column_start":1,"column_end":36}},{"value":"/ [`MutexGuard`]: ../struct.MutexGuard.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19341,"byte_end":19386,"line_start":10,"line_end":10,"column_start":1,"column_end":46}},{"value":"/ [`TicketMutex`]: ./struct.TicketMutex.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19387,"byte_end":19433,"line_start":11,"line_end":11,"column_start":1,"column_end":47}},{"value":"/ [`TicketMutexGuard`]: ./struct.TicketMutexGuard.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19434,"byte_end":19490,"line_start":12,"line_end":12,"column_start":1,"column_end":57}},{"value":"/ [`SpinMutex`]: ./struct.SpinMutex.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19491,"byte_end":19533,"line_start":13,"line_end":13,"column_start":1,"column_end":43}},{"value":"/ [`SpinMutexGuard`]: ./struct.SpinMutexGuard.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19534,"byte_end":19586,"line_start":14,"line_end":14,"column_start":1,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":91},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spin","qualname":"::mutex::spin","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":110},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":123},{"krate":0,"index":129},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":144},{"krate":0,"index":148},{"krate":0,"index":155},{"krate":0,"index":161},{"krate":0,"index":165},{"krate":0,"index":169},{"krate":0,"index":173},{"krate":0,"index":177},{"krate":0,"index":181},{"krate":0,"index":186},{"krate":0,"index":190},{"krate":0,"index":194}],"decl_id":null,"docs":" A naïve spinning mutex.","sig":null,"attributes":[{"value":"cfg(feature = \"spin_mutex\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19588,"byte_end":19618,"line_start":16,"line_end":16,"column_start":1,"column_end":31}},{"value":"/ A naïve spinning mutex.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28356,"byte_end":28384,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28385,"byte_end":28388,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Waiting threads hammer an atomic variable until it becomes available. Best-case latency is low, but worst-case","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28389,"byte_end":28503,"line_start":3,"line_end":3,"column_start":1,"column_end":115}},{"value":"/ latency is theoretically infinite.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28504,"byte_end":28542,"line_start":4,"line_end":4,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":123},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29880,"byte_end":29889,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"SpinMutex","qualname":"::mutex::spin::SpinMutex","value":"SpinMutex {  }","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128}],"decl_id":null,"docs":" A [spin lock](https://en.m.wikipedia.org/wiki/Spinlock) providing mutually exclusive access to data.","sig":null,"attributes":[{"value":"/ A [spin lock](https://en.m.wikipedia.org/wiki/Spinlock) providing mutually exclusive access to data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28720,"byte_end":28824,"line_start":15,"line_end":15,"column_start":1,"column_end":105}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28825,"byte_end":28828,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28829,"byte_end":28842,"line_start":17,"line_end":17,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28843,"byte_end":28846,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28847,"byte_end":28854,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28855,"byte_end":28868,"line_start":20,"line_end":20,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28869,"byte_end":28872,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::mutex::SpinMutex::<_>::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28873,"byte_end":28924,"line_start":22,"line_end":22,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28925,"byte_end":28928,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ // Modify the data","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28929,"byte_end":28951,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"/ *lock.lock() = 2;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28952,"byte_end":28973,"line_start":25,"line_end":25,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28974,"byte_end":28977,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // Read the data","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28978,"byte_end":28998,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"/ let answer = *lock.lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":28999,"byte_end":29029,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(answer, 2);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29030,"byte_end":29056,"line_start":29,"line_end":29,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29057,"byte_end":29064,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29065,"byte_end":29068,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ # Thread safety example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29069,"byte_end":29096,"line_start":32,"line_end":32,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29097,"byte_end":29100,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29101,"byte_end":29108,"line_start":34,"line_end":34,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29109,"byte_end":29122,"line_start":35,"line_end":35,"column_start":1,"column_end":14}},{"value":"/ use std::sync::{Arc, Barrier};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29123,"byte_end":29157,"line_start":36,"line_end":36,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29158,"byte_end":29161,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let thread_count = 1000;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29162,"byte_end":29190,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ let spin_mutex = Arc::new(spin::mutex::SpinMutex::<_>::new(0));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29191,"byte_end":29258,"line_start":39,"line_end":39,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29259,"byte_end":29262,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ // We use a barrier to ensure the readout happens after all writing","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29263,"byte_end":29334,"line_start":41,"line_end":41,"column_start":1,"column_end":72}},{"value":"/ let barrier = Arc::new(Barrier::new(thread_count + 1));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29335,"byte_end":29394,"line_start":42,"line_end":42,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29395,"byte_end":29398,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ for _ in (0..thread_count) {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29399,"byte_end":29431,"line_start":44,"line_end":44,"column_start":1,"column_end":33}},{"value":"/     let my_barrier = barrier.clone();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29432,"byte_end":29473,"line_start":45,"line_end":45,"column_start":1,"column_end":42}},{"value":"/     let my_lock = spin_mutex.clone();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29474,"byte_end":29515,"line_start":46,"line_end":46,"column_start":1,"column_end":42}},{"value":"/     std::thread::spawn(move || {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29516,"byte_end":29552,"line_start":47,"line_end":47,"column_start":1,"column_end":37}},{"value":"/         let mut guard = my_lock.lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29553,"byte_end":29596,"line_start":48,"line_end":48,"column_start":1,"column_end":44}},{"value":"/         *guard += 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29597,"byte_end":29621,"line_start":49,"line_end":49,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29622,"byte_end":29625,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/         // Release the lock to prevent a deadlock","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29626,"byte_end":29679,"line_start":51,"line_end":51,"column_start":1,"column_end":54}},{"value":"/         drop(guard);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29680,"byte_end":29704,"line_start":52,"line_end":52,"column_start":1,"column_end":25}},{"value":"/         my_barrier.wait();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29705,"byte_end":29735,"line_start":53,"line_end":53,"column_start":1,"column_end":31}},{"value":"/     });","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29736,"byte_end":29747,"line_start":54,"line_end":54,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29748,"byte_end":29753,"line_start":55,"line_end":55,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29754,"byte_end":29757,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ barrier.wait();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29758,"byte_end":29777,"line_start":57,"line_end":57,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29778,"byte_end":29781,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let answer = { *spin_mutex.lock() };","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29782,"byte_end":29822,"line_start":59,"line_end":59,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(answer, thread_count);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29823,"byte_end":29860,"line_start":60,"line_end":60,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":29861,"byte_end":29868,"line_start":61,"line_end":61,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":129},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30129,"byte_end":30143,"line_start":71,"line_end":71,"column_start":12,"column_end":26},"name":"SpinMutexGuard","qualname":"::mutex::spin::SpinMutexGuard","value":"SpinMutexGuard {  }","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":133}],"decl_id":null,"docs":" A guard that provides mutable data access.","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30003,"byte_end":30049,"line_start":68,"line_end":68,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30050,"byte_end":30053,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30054,"byte_end":30117,"line_start":70,"line_end":70,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30804,"byte_end":30807,"line_start":97,"line_end":97,"column_start":18,"column_end":21},"name":"new","qualname":"<SpinMutex<T, R>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`SpinMutex`] wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new [`SpinMutex`] wrapping the supplied data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30403,"byte_end":30462,"line_start":81,"line_end":81,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30467,"byte_end":30470,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30475,"byte_end":30488,"line_start":83,"line_end":83,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30493,"byte_end":30496,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30501,"byte_end":30508,"line_start":85,"line_end":85,"column_start":5,"column_end":12}},{"value":"/ use spin::mutex::SpinMutex;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30513,"byte_end":30544,"line_start":86,"line_end":86,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30549,"byte_end":30552,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ static MUTEX: SpinMutex<()> = SpinMutex::<_>::new(());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30557,"byte_end":30615,"line_start":88,"line_end":88,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30620,"byte_end":30623,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30628,"byte_end":30643,"line_start":90,"line_end":90,"column_start":5,"column_end":20}},{"value":"/     let lock = MUTEX.lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30648,"byte_end":30680,"line_start":91,"line_end":91,"column_start":5,"column_end":37}},{"value":"/     // do something with lock","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30685,"byte_end":30718,"line_start":92,"line_end":92,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30723,"byte_end":30742,"line_start":93,"line_end":93,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30747,"byte_end":30752,"line_start":94,"line_end":94,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30757,"byte_end":30764,"line_start":95,"line_end":95,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30769,"byte_end":30786,"line_start":96,"line_end":96,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31241,"byte_end":31251,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<SpinMutex<T, R>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this [`SpinMutex`] and unwraps the underlying data.","sig":null,"attributes":[{"value":"/ Consumes this [`SpinMutex`] and unwraps the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30985,"byte_end":31049,"line_start":105,"line_end":105,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31054,"byte_end":31057,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31062,"byte_end":31075,"line_start":107,"line_end":107,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31080,"byte_end":31083,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31088,"byte_end":31095,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::<_>::new(42);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31100,"byte_end":31152,"line_start":110,"line_end":110,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(42, lock.into_inner());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31157,"byte_end":31195,"line_start":111,"line_end":111,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31200,"byte_end":31207,"line_start":112,"line_end":112,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31212,"byte_end":31229,"line_start":113,"line_end":113,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32130,"byte_end":32140,"line_start":143,"line_end":143,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<SpinMutex<T, R>>::as_mut_ptr","value":"pub fn as_mut_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31465,"byte_end":31518,"line_start":121,"line_end":121,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31523,"byte_end":31526,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ This is mostly meant to be used for applications which require manual unlocking, but where","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31531,"byte_end":31625,"line_start":123,"line_end":123,"column_start":5,"column_end":99}},{"value":"/ storing both the lock and the pointer to the inner data gets inefficient.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31630,"byte_end":31707,"line_start":124,"line_end":124,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31712,"byte_end":31715,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31720,"byte_end":31733,"line_start":126,"line_end":126,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31738,"byte_end":31745,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::<_>::new(42);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31750,"byte_end":31802,"line_start":128,"line_end":128,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31807,"byte_end":31810,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31815,"byte_end":31827,"line_start":130,"line_end":130,"column_start":5,"column_end":17}},{"value":"/     core::mem::forget(lock.lock());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31832,"byte_end":31871,"line_start":131,"line_end":131,"column_start":5,"column_end":44}},{"value":"/     ","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31876,"byte_end":31884,"line_start":132,"line_end":132,"column_start":5,"column_end":13}},{"value":"/     assert_eq!(lock.as_mut_ptr().read(), 42);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31889,"byte_end":31938,"line_start":133,"line_end":133,"column_start":5,"column_end":54}},{"value":"/     lock.as_mut_ptr().write(58);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31943,"byte_end":31979,"line_start":134,"line_end":134,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31984,"byte_end":31987,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/     lock.force_unlock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":31992,"byte_end":32020,"line_start":136,"line_end":136,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32025,"byte_end":32030,"line_start":137,"line_end":137,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32035,"byte_end":32038,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*lock.lock(), 58);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32043,"byte_end":32076,"line_start":139,"line_end":139,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32081,"byte_end":32084,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32089,"byte_end":32096,"line_start":141,"line_end":141,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32101,"byte_end":32118,"line_start":142,"line_end":142,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32821,"byte_end":32825,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"lock","qualname":"<SpinMutex<T, R>>::lock","value":"pub fn lock(&Self) -> SpinMutexGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks the [`SpinMutex`] and returns a guard that permits access to the inner data.","sig":null,"attributes":[{"value":"/ Locks the [`SpinMutex`] and returns a guard that permits access to the inner data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32249,"byte_end":32335,"line_start":149,"line_end":149,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32340,"byte_end":32343,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ The returned value may be dereferenced for data access","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32348,"byte_end":32406,"line_start":151,"line_end":151,"column_start":5,"column_end":63}},{"value":"/ and the lock will be dropped when the guard falls out of scope.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32411,"byte_end":32478,"line_start":152,"line_end":152,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32483,"byte_end":32486,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32491,"byte_end":32498,"line_start":154,"line_end":154,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::<_>::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32503,"byte_end":32554,"line_start":155,"line_end":155,"column_start":5,"column_end":56}},{"value":"/ {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32559,"byte_end":32564,"line_start":156,"line_end":156,"column_start":5,"column_end":10}},{"value":"/     let mut data = lock.lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32569,"byte_end":32604,"line_start":157,"line_end":157,"column_start":5,"column_end":40}},{"value":"/     // The lock is now locked and the data can be accessed","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32609,"byte_end":32671,"line_start":158,"line_end":158,"column_start":5,"column_end":67}},{"value":"/     *data += 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32676,"byte_end":32695,"line_start":159,"line_end":159,"column_start":5,"column_end":24}},{"value":"/     // The lock is implicitly dropped at the end of the scope","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32700,"byte_end":32765,"line_start":160,"line_end":160,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32770,"byte_end":32775,"line_start":161,"line_end":161,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32780,"byte_end":32787,"line_start":162,"line_end":162,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32792,"byte_end":32809,"line_start":163,"line_end":163,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33773,"byte_end":33782,"line_start":189,"line_end":189,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<SpinMutex<T, R>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the lock is currently held.","sig":null,"attributes":[{"value":"/ Returns `true` if the lock is currently held.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33423,"byte_end":33472,"line_start":182,"line_end":182,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33477,"byte_end":33480,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33485,"byte_end":33497,"line_start":184,"line_end":184,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33502,"byte_end":33505,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33510,"byte_end":33619,"line_start":186,"line_end":186,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33624,"byte_end":33739,"line_start":187,"line_end":187,"column_start":5,"column_end":120}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33744,"byte_end":33761,"line_start":188,"line_end":188,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34177,"byte_end":34189,"line_start":201,"line_end":201,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<SpinMutex<T, R>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock this [`SpinMutex`].","sig":null,"attributes":[{"value":"/ Force unlock this [`SpinMutex`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33853,"byte_end":33889,"line_start":193,"line_end":193,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33894,"byte_end":33897,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33902,"byte_end":33914,"line_start":195,"line_end":195,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33919,"byte_end":33922,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if the lock is not held by the current","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33927,"byte_end":33996,"line_start":197,"line_end":197,"column_start":5,"column_end":74}},{"value":"/ thread. However, this can be useful in some instances for exposing the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34001,"byte_end":34075,"line_start":198,"line_end":198,"column_start":5,"column_end":79}},{"value":"/ lock to FFI that doesn't know how to deal with RAII.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34080,"byte_end":34136,"line_start":199,"line_end":199,"column_start":5,"column_end":61}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34141,"byte_end":34158,"line_start":200,"line_end":200,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34732,"byte_end":34740,"line_start":220,"line_end":220,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<SpinMutex<T, R>>::try_lock","value":"pub fn try_lock(&Self) -> Option<SpinMutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to lock this [`SpinMutex`], returning a lock guard if successful.","sig":null,"attributes":[{"value":"/ Try to lock this [`SpinMutex`], returning a lock guard if successful.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34261,"byte_end":34334,"line_start":205,"line_end":205,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34339,"byte_end":34342,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34347,"byte_end":34360,"line_start":207,"line_end":207,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34365,"byte_end":34368,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34373,"byte_end":34380,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::mutex::SpinMutex::<_>::new(42);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34385,"byte_end":34437,"line_start":210,"line_end":210,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34442,"byte_end":34445,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ let maybe_guard = lock.try_lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34450,"byte_end":34488,"line_start":212,"line_end":212,"column_start":5,"column_end":43}},{"value":"/ assert!(maybe_guard.is_some());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34493,"byte_end":34528,"line_start":213,"line_end":213,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34533,"byte_end":34536,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ // `maybe_guard` is still held, so the second call fails","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34541,"byte_end":34601,"line_start":215,"line_end":215,"column_start":5,"column_end":65}},{"value":"/ let maybe_guard2 = lock.try_lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34606,"byte_end":34645,"line_start":216,"line_end":216,"column_start":5,"column_end":44}},{"value":"/ assert!(maybe_guard2.is_none());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34650,"byte_end":34686,"line_start":217,"line_end":217,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34691,"byte_end":34698,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":34703,"byte_end":34720,"line_start":219,"line_end":219,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35792,"byte_end":35799,"line_start":247,"line_end":247,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<SpinMutex<T, R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35231,"byte_end":35286,"line_start":233,"line_end":233,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35291,"byte_end":35294,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the [`SpinMutex`] mutably, and a mutable reference is guaranteed to be exclusive in","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35299,"byte_end":35410,"line_start":235,"line_end":235,"column_start":5,"column_end":116}},{"value":"/ Rust, no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist. As","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35415,"byte_end":35525,"line_start":236,"line_end":236,"column_start":5,"column_end":115}},{"value":"/ such, this is a 'zero-cost' operation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35530,"byte_end":35572,"line_start":237,"line_end":237,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35577,"byte_end":35580,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35585,"byte_end":35598,"line_start":239,"line_end":239,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35603,"byte_end":35606,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35611,"byte_end":35618,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"/ let mut lock = spin::mutex::SpinMutex::<_>::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35623,"byte_end":35678,"line_start":242,"line_end":242,"column_start":5,"column_end":60}},{"value":"/ *lock.get_mut() = 10;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35683,"byte_end":35708,"line_start":243,"line_end":243,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*lock.lock(), 10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35713,"byte_end":35746,"line_start":244,"line_end":244,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35751,"byte_end":35758,"line_start":245,"line_end":245,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":35763,"byte_end":35780,"line_start":246,"line_end":246,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37109,"byte_end":37113,"line_start":291,"line_end":291,"column_start":12,"column_end":16},"name":"leak","qualname":"<SpinMutexGuard>::leak","value":"pub fn leak(Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a mutable reference to the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36674,"byte_end":36751,"line_start":278,"line_end":278,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36756,"byte_end":36759,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original [`SpinMutex`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36764,"byte_end":36841,"line_start":280,"line_end":280,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36846,"byte_end":36849,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36854,"byte_end":36861,"line_start":282,"line_end":282,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::mutex::SpinMutex::<_>::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36866,"byte_end":36919,"line_start":283,"line_end":283,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36924,"byte_end":36927,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ let data: &mut i32 = spin::mutex::SpinMutexGuard::leak(mylock.lock());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36932,"byte_end":37006,"line_start":285,"line_end":285,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37011,"byte_end":37014,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ *data = 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37019,"byte_end":37033,"line_start":287,"line_end":287,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(*data, 1);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37038,"byte_end":37063,"line_start":288,"line_end":288,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37068,"byte_end":37075,"line_start":289,"line_end":289,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37080,"byte_end":37097,"line_start":290,"line_end":290,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":233},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22116,"byte_end":22121,"line_start":99,"line_end":99,"column_start":12,"column_end":17},"name":"Mutex","qualname":"::mutex::Mutex","value":"Mutex {  }","parent":null,"children":[{"krate":0,"index":236}],"decl_id":null,"docs":" A spin-based lock providing mutually exclusive access to data.","sig":null,"attributes":[{"value":"/ A spin-based lock providing mutually exclusive access to data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":20863,"byte_end":20929,"line_start":49,"line_end":49,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":20930,"byte_end":20933,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The implementation uses either a ticket mutex or a regular spin mutex depending on whether the `spin_mutex` or","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":20934,"byte_end":21048,"line_start":51,"line_end":51,"column_start":1,"column_end":115}},{"value":"/ `ticket_mutex` feature flag is enabled.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21049,"byte_end":21092,"line_start":52,"line_end":52,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21093,"byte_end":21096,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21097,"byte_end":21110,"line_start":54,"line_end":54,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21111,"byte_end":21114,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21115,"byte_end":21122,"line_start":56,"line_end":56,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21123,"byte_end":21136,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21137,"byte_end":21140,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::Mutex::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21141,"byte_end":21176,"line_start":59,"line_end":59,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21177,"byte_end":21180,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ // Modify the data","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21181,"byte_end":21203,"line_start":61,"line_end":61,"column_start":1,"column_end":23}},{"value":"/ *lock.lock() = 2;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21204,"byte_end":21225,"line_start":62,"line_end":62,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21226,"byte_end":21229,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ // Read the data","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21230,"byte_end":21250,"line_start":64,"line_end":64,"column_start":1,"column_end":21}},{"value":"/ let answer = *lock.lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21251,"byte_end":21281,"line_start":65,"line_end":65,"column_start":1,"column_end":31}},{"value":"/ assert_eq!(answer, 2);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21282,"byte_end":21308,"line_start":66,"line_end":66,"column_start":1,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21309,"byte_end":21316,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21317,"byte_end":21320,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ # Thread safety example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21321,"byte_end":21348,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21349,"byte_end":21352,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21353,"byte_end":21360,"line_start":71,"line_end":71,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21361,"byte_end":21374,"line_start":72,"line_end":72,"column_start":1,"column_end":14}},{"value":"/ use std::sync::{Arc, Barrier};","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21375,"byte_end":21409,"line_start":73,"line_end":73,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21410,"byte_end":21413,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ let thread_count = 1000;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21414,"byte_end":21442,"line_start":75,"line_end":75,"column_start":1,"column_end":29}},{"value":"/ let spin_mutex = Arc::new(spin::Mutex::new(0));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21443,"byte_end":21494,"line_start":76,"line_end":76,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21495,"byte_end":21498,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ // We use a barrier to ensure the readout happens after all writing","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21499,"byte_end":21570,"line_start":78,"line_end":78,"column_start":1,"column_end":72}},{"value":"/ let barrier = Arc::new(Barrier::new(thread_count + 1));","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21571,"byte_end":21630,"line_start":79,"line_end":79,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21631,"byte_end":21634,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ for _ in (0..thread_count) {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21635,"byte_end":21667,"line_start":81,"line_end":81,"column_start":1,"column_end":33}},{"value":"/     let my_barrier = barrier.clone();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21668,"byte_end":21709,"line_start":82,"line_end":82,"column_start":1,"column_end":42}},{"value":"/     let my_lock = spin_mutex.clone();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21710,"byte_end":21751,"line_start":83,"line_end":83,"column_start":1,"column_end":42}},{"value":"/     std::thread::spawn(move || {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21752,"byte_end":21788,"line_start":84,"line_end":84,"column_start":1,"column_end":37}},{"value":"/         let mut guard = my_lock.lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21789,"byte_end":21832,"line_start":85,"line_end":85,"column_start":1,"column_end":44}},{"value":"/         *guard += 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21833,"byte_end":21857,"line_start":86,"line_end":86,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21858,"byte_end":21861,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/         // Release the lock to prevent a deadlock","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21862,"byte_end":21915,"line_start":88,"line_end":88,"column_start":1,"column_end":54}},{"value":"/         drop(guard);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21916,"byte_end":21940,"line_start":89,"line_end":89,"column_start":1,"column_end":25}},{"value":"/         my_barrier.wait();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21941,"byte_end":21971,"line_start":90,"line_end":90,"column_start":1,"column_end":31}},{"value":"/     });","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21972,"byte_end":21983,"line_start":91,"line_end":91,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21984,"byte_end":21989,"line_start":92,"line_end":92,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21990,"byte_end":21993,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ barrier.wait();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":21994,"byte_end":22013,"line_start":94,"line_end":94,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22014,"byte_end":22017,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ let answer = { *spin_mutex.lock() };","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22018,"byte_end":22058,"line_start":96,"line_end":96,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(answer, thread_count);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22059,"byte_end":22096,"line_start":97,"line_end":97,"column_start":1,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22097,"byte_end":22104,"line_start":98,"line_end":98,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":243},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22600,"byte_end":22610,"line_start":113,"line_end":113,"column_start":12,"column_end":22},"name":"MutexGuard","qualname":"::mutex::MutexGuard","value":"MutexGuard {  }","parent":null,"children":[{"krate":0,"index":246}],"decl_id":null,"docs":" A generic guard that will protect some data access and\n uses either a ticket lock or a normal spin mutex.","sig":null,"attributes":[{"value":"/ A generic guard that will protect some data access and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22292,"byte_end":22350,"line_start":106,"line_end":106,"column_start":1,"column_end":59}},{"value":"/ uses either a ticket lock or a normal spin mutex.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22351,"byte_end":22404,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22405,"byte_end":22408,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ For more info see [`TicketMutexGuard`] or [`SpinMutexGuard`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22409,"byte_end":22474,"line_start":109,"line_end":109,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22475,"byte_end":22478,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`TicketMutexGuard`]: ./struct.TicketMutexGuard.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22479,"byte_end":22535,"line_start":111,"line_end":111,"column_start":1,"column_end":57}},{"value":"/ [`SpinMutexGuard`]: ./struct.SpinMutexGuard.html","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22536,"byte_end":22588,"line_start":112,"line_end":112,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23073,"byte_end":23076,"line_start":134,"line_end":134,"column_start":18,"column_end":21},"name":"new","qualname":"<Mutex<T, R>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Mutex`] wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new [`Mutex`] wrapping the supplied data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22700,"byte_end":22755,"line_start":118,"line_end":118,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22760,"byte_end":22763,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22768,"byte_end":22781,"line_start":120,"line_end":120,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22786,"byte_end":22789,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22794,"byte_end":22801,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use spin::Mutex;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22806,"byte_end":22826,"line_start":123,"line_end":123,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22831,"byte_end":22834,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ static MUTEX: Mutex<()> = Mutex::new(());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22839,"byte_end":22884,"line_start":125,"line_end":125,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22889,"byte_end":22892,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22897,"byte_end":22912,"line_start":127,"line_end":127,"column_start":5,"column_end":20}},{"value":"/     let lock = MUTEX.lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22917,"byte_end":22949,"line_start":128,"line_end":128,"column_start":5,"column_end":37}},{"value":"/     // do something with lock","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22954,"byte_end":22987,"line_start":129,"line_end":129,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22992,"byte_end":23011,"line_start":130,"line_end":130,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23016,"byte_end":23021,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23026,"byte_end":23033,"line_start":132,"line_end":132,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23038,"byte_end":23055,"line_start":133,"line_end":133,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":251},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23391,"byte_end":23401,"line_start":147,"line_end":147,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Mutex<T, R>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this [`Mutex`] and unwraps the underlying data.","sig":null,"attributes":[{"value":"/ Consumes this [`Mutex`] and unwraps the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23155,"byte_end":23215,"line_start":138,"line_end":138,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23220,"byte_end":23223,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23228,"byte_end":23241,"line_start":140,"line_end":140,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23246,"byte_end":23249,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23254,"byte_end":23261,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::Mutex::new(42);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23266,"byte_end":23302,"line_start":143,"line_end":143,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(42, lock.into_inner());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23307,"byte_end":23345,"line_start":144,"line_end":144,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23350,"byte_end":23357,"line_start":145,"line_end":145,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23362,"byte_end":23379,"line_start":146,"line_end":146,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":255},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24060,"byte_end":24064,"line_start":168,"line_end":168,"column_start":12,"column_end":16},"name":"lock","qualname":"<Mutex<T, R>>::lock","value":"pub fn lock(&Self) -> MutexGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks the [`Mutex`] and returns a guard that permits access to the inner data.","sig":null,"attributes":[{"value":"/ Locks the [`Mutex`] and returns a guard that permits access to the inner data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23508,"byte_end":23590,"line_start":153,"line_end":153,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23595,"byte_end":23598,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ The returned value may be dereferenced for data access","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23603,"byte_end":23661,"line_start":155,"line_end":155,"column_start":5,"column_end":63}},{"value":"/ and the lock will be dropped when the guard falls out of scope.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23666,"byte_end":23733,"line_start":156,"line_end":156,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23738,"byte_end":23741,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23746,"byte_end":23753,"line_start":158,"line_end":158,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::Mutex::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23758,"byte_end":23793,"line_start":159,"line_end":159,"column_start":5,"column_end":40}},{"value":"/ {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23798,"byte_end":23803,"line_start":160,"line_end":160,"column_start":5,"column_end":10}},{"value":"/     let mut data = lock.lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23808,"byte_end":23843,"line_start":161,"line_end":161,"column_start":5,"column_end":40}},{"value":"/     // The lock is now locked and the data can be accessed","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23848,"byte_end":23910,"line_start":162,"line_end":162,"column_start":5,"column_end":67}},{"value":"/     *data += 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23915,"byte_end":23934,"line_start":163,"line_end":163,"column_start":5,"column_end":24}},{"value":"/     // The lock is implicitly dropped at the end of the scope","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23939,"byte_end":24004,"line_start":164,"line_end":164,"column_start":5,"column_end":70}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24009,"byte_end":24014,"line_start":165,"line_end":165,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24019,"byte_end":24026,"line_start":166,"line_end":166,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24031,"byte_end":24048,"line_start":167,"line_end":167,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":259},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24556,"byte_end":24565,"line_start":183,"line_end":183,"column_start":12,"column_end":21},"name":"is_locked","qualname":"<Mutex<T, R>>::is_locked","value":"pub fn is_locked(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the lock is currently held.","sig":null,"attributes":[{"value":"/ Returns `true` if the lock is currently held.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24206,"byte_end":24255,"line_start":176,"line_end":176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24260,"byte_end":24263,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24268,"byte_end":24280,"line_start":178,"line_end":178,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24285,"byte_end":24288,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24293,"byte_end":24402,"line_start":180,"line_end":180,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24407,"byte_end":24522,"line_start":181,"line_end":181,"column_start":5,"column_end":120}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24527,"byte_end":24544,"line_start":182,"line_end":182,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24945,"byte_end":24957,"line_start":195,"line_end":195,"column_start":19,"column_end":31},"name":"force_unlock","qualname":"<Mutex<T, R>>::force_unlock","value":"pub unsafe fn force_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock this [`Mutex`].","sig":null,"attributes":[{"value":"/ Force unlock this [`Mutex`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24625,"byte_end":24657,"line_start":187,"line_end":187,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24662,"byte_end":24665,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24670,"byte_end":24682,"line_start":189,"line_end":189,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24687,"byte_end":24690,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if the lock is not held by the current","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24695,"byte_end":24764,"line_start":191,"line_end":191,"column_start":5,"column_end":74}},{"value":"/ thread. However, this can be useful in some instances for exposing the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24769,"byte_end":24843,"line_start":192,"line_end":192,"column_start":5,"column_end":79}},{"value":"/ lock to FFI that doesn't know how to deal with RAII.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24848,"byte_end":24904,"line_start":193,"line_end":193,"column_start":5,"column_end":61}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24909,"byte_end":24926,"line_start":194,"line_end":194,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":261},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25463,"byte_end":25471,"line_start":214,"line_end":214,"column_start":12,"column_end":20},"name":"try_lock","qualname":"<Mutex<T, R>>::try_lock","value":"pub fn try_lock(&Self) -> Option<MutexGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Try to lock this [`Mutex`], returning a lock guard if successful.","sig":null,"attributes":[{"value":"/ Try to lock this [`Mutex`], returning a lock guard if successful.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25012,"byte_end":25081,"line_start":199,"line_end":199,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25086,"byte_end":25089,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25094,"byte_end":25107,"line_start":201,"line_end":201,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25112,"byte_end":25115,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25120,"byte_end":25127,"line_start":203,"line_end":203,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::Mutex::new(42);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25132,"byte_end":25168,"line_start":204,"line_end":204,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25173,"byte_end":25176,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ let maybe_guard = lock.try_lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25181,"byte_end":25219,"line_start":206,"line_end":206,"column_start":5,"column_end":43}},{"value":"/ assert!(maybe_guard.is_some());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25224,"byte_end":25259,"line_start":207,"line_end":207,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25264,"byte_end":25267,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ // `maybe_guard` is still held, so the second call fails","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25272,"byte_end":25332,"line_start":209,"line_end":209,"column_start":5,"column_end":65}},{"value":"/ let maybe_guard2 = lock.try_lock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25337,"byte_end":25376,"line_start":210,"line_end":210,"column_start":5,"column_end":44}},{"value":"/ assert!(maybe_guard2.is_none());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25381,"byte_end":25417,"line_start":211,"line_end":211,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25422,"byte_end":25429,"line_start":212,"line_end":212,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25434,"byte_end":25451,"line_start":213,"line_end":213,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26155,"byte_end":26162,"line_start":234,"line_end":234,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Mutex<T, R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25614,"byte_end":25669,"line_start":220,"line_end":220,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25674,"byte_end":25677,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ Since this call borrows the [`Mutex`] mutably, and a mutable reference is guaranteed to be exclusive in Rust,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25682,"byte_end":25795,"line_start":222,"line_end":222,"column_start":5,"column_end":118}},{"value":"/ no actual locking needs to take place -- the mutable borrow statically guarantees no locks exist. As such,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25800,"byte_end":25910,"line_start":223,"line_end":223,"column_start":5,"column_end":115}},{"value":"/ this is a 'zero-cost' operation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25915,"byte_end":25951,"line_start":224,"line_end":224,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25956,"byte_end":25959,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25964,"byte_end":25977,"line_start":226,"line_end":226,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25982,"byte_end":25985,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":25990,"byte_end":25997,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"/ let mut lock = spin::Mutex::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26002,"byte_end":26041,"line_start":229,"line_end":229,"column_start":5,"column_end":44}},{"value":"/ *lock.get_mut() = 10;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26046,"byte_end":26071,"line_start":230,"line_end":230,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(*lock.lock(), 10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26076,"byte_end":26109,"line_start":231,"line_end":231,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26114,"byte_end":26121,"line_start":232,"line_end":232,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26126,"byte_end":26143,"line_start":233,"line_end":233,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27071,"byte_end":27075,"line_start":271,"line_end":271,"column_start":12,"column_end":16},"name":"leak","qualname":"<MutexGuard>::leak","value":"pub fn leak(Self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a mutable reference to the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26667,"byte_end":26744,"line_start":258,"line_end":258,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26749,"byte_end":26752,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original [`Mutex`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26757,"byte_end":26830,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26835,"byte_end":26838,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26843,"byte_end":26850,"line_start":262,"line_end":262,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::Mutex::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26855,"byte_end":26892,"line_start":263,"line_end":263,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26897,"byte_end":26900,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ let data: &mut i32 = spin::MutexGuard::leak(mylock.lock());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26905,"byte_end":26968,"line_start":265,"line_end":265,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26973,"byte_end":26976,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ *data = 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26981,"byte_end":26995,"line_start":267,"line_end":267,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(*data, 1);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27000,"byte_end":27025,"line_start":268,"line_end":268,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27030,"byte_end":27037,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27042,"byte_end":27059,"line_start":270,"line_end":270,"column_start":5,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":305},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"once","qualname":"::once","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","parent":null,"children":[{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":310},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":317},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":339},{"krate":0,"index":343},{"krate":0,"index":349},{"krate":0,"index":352},{"krate":0,"index":355},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":372},{"krate":0,"index":375},{"krate":0,"index":378},{"krate":0,"index":390},{"krate":0,"index":405},{"krate":0,"index":409},{"krate":0,"index":413},{"krate":0,"index":416}],"decl_id":null,"docs":" Synchronization primitives for one-time evaluation.\n","sig":null,"attributes":[{"value":"cfg(feature = \"once\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2578,"byte_end":2602,"line_start":72,"line_end":72,"column_start":1,"column_end":25}},{"value":"/ Synchronization primitives for one-time evaluation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":42864,"byte_end":42919,"line_start":1,"line_end":1,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":333},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43635,"byte_end":43639,"line_start":31,"line_end":31,"column_start":12,"column_end":16},"name":"Once","qualname":"::once::Once","value":"Once {  }","parent":null,"children":[{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":338}],"decl_id":null,"docs":" A primitive that provides lazy one-time initialization.","sig":null,"attributes":[{"value":"/ A primitive that provides lazy one-time initialization.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43089,"byte_end":43148,"line_start":12,"line_end":12,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43149,"byte_end":43152,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Unlike its `std::sync` equivalent, this is generalized such that the closure returns a","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43153,"byte_end":43243,"line_start":14,"line_end":14,"column_start":1,"column_end":91}},{"value":"/ value to be stored by the [`Once`] (`std::sync::Once` can be trivially emulated with","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43244,"byte_end":43332,"line_start":15,"line_end":15,"column_start":1,"column_end":89}},{"value":"/ `Once`).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43333,"byte_end":43345,"line_start":16,"line_end":16,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43346,"byte_end":43349,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Because [`Once::new`] is `const`, this primitive may be used to safely initialize statics.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43350,"byte_end":43444,"line_start":18,"line_end":18,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43445,"byte_end":43448,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43449,"byte_end":43463,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43464,"byte_end":43467,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43468,"byte_end":43475,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43476,"byte_end":43489,"line_start":23,"line_end":23,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43490,"byte_end":43493,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ static START: spin::Once = spin::Once::new();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43494,"byte_end":43543,"line_start":25,"line_end":25,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43544,"byte_end":43547,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ START.call_once(|| {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43548,"byte_end":43572,"line_start":27,"line_end":27,"column_start":1,"column_end":25}},{"value":"/     // run initialization here","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43573,"byte_end":43607,"line_start":28,"line_end":28,"column_start":1,"column_end":35}},{"value":"/ });","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43608,"byte_end":43615,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43616,"byte_end":43623,"line_start":30,"line_end":30,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48475,"byte_end":48484,"line_start":163,"line_end":163,"column_start":12,"column_end":21},"name":"call_once","qualname":"<Once<T, R>>::call_once","value":"pub fn call_once<F: FnOnce() -> T>(&Self, F) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Performs an initialization routine once and only once. The given closure\n will be executed if this is the first time `call_once` has been called,\n and otherwise the routine will *not* be invoked.","sig":null,"attributes":[{"value":"/ Performs an initialization routine once and only once. The given closure","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47310,"byte_end":47386,"line_start":129,"line_end":129,"column_start":5,"column_end":81}},{"value":"/ will be executed if this is the first time `call_once` has been called,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47391,"byte_end":47466,"line_start":130,"line_end":130,"column_start":5,"column_end":80}},{"value":"/ and otherwise the routine will *not* be invoked.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47471,"byte_end":47523,"line_start":131,"line_end":131,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47528,"byte_end":47531,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47536,"byte_end":47607,"line_start":133,"line_end":133,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47612,"byte_end":47645,"line_start":134,"line_end":134,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47650,"byte_end":47653,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ When this function returns, it is guaranteed that some initialization","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47658,"byte_end":47731,"line_start":136,"line_end":136,"column_start":5,"column_end":78}},{"value":"/ has run and completed (it may not be the closure specified). The","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47736,"byte_end":47804,"line_start":137,"line_end":137,"column_start":5,"column_end":73}},{"value":"/ returned pointer will point to the result from the closure that was","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47809,"byte_end":47880,"line_start":138,"line_end":138,"column_start":5,"column_end":76}},{"value":"/ run.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47885,"byte_end":47893,"line_start":139,"line_end":139,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47898,"byte_end":47901,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47906,"byte_end":47918,"line_start":141,"line_end":141,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47923,"byte_end":47926,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the [`Once`] previously panicked while attempting","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47931,"byte_end":48012,"line_start":143,"line_end":143,"column_start":5,"column_end":86}},{"value":"/ to initialize. This is similar to the poisoning behaviour of `std::sync`'s","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48017,"byte_end":48095,"line_start":144,"line_end":144,"column_start":5,"column_end":83}},{"value":"/ primitives.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48100,"byte_end":48115,"line_start":145,"line_end":145,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48120,"byte_end":48123,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48128,"byte_end":48142,"line_start":147,"line_end":147,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48147,"byte_end":48150,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48155,"byte_end":48162,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48167,"byte_end":48180,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48185,"byte_end":48188,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ static INIT: spin::Once<usize> = spin::Once::new();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48193,"byte_end":48248,"line_start":152,"line_end":152,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48253,"byte_end":48256,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ fn get_cached_val() -> usize {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48261,"byte_end":48295,"line_start":154,"line_end":154,"column_start":5,"column_end":39}},{"value":"/     *INIT.call_once(expensive_computation)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48300,"byte_end":48346,"line_start":155,"line_end":155,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48351,"byte_end":48356,"line_start":156,"line_end":156,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48361,"byte_end":48364,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ fn expensive_computation() -> usize {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48369,"byte_end":48410,"line_start":158,"line_end":158,"column_start":5,"column_end":46}},{"value":"/     // ...","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48415,"byte_end":48429,"line_start":159,"line_end":159,"column_start":5,"column_end":19}},{"value":"/ # 2","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48434,"byte_end":48441,"line_start":160,"line_end":160,"column_start":5,"column_end":12}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48446,"byte_end":48451,"line_start":161,"line_end":161,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48456,"byte_end":48463,"line_start":162,"line_end":162,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49870,"byte_end":49883,"line_start":203,"line_end":203,"column_start":12,"column_end":25},"name":"try_call_once","qualname":"<Once<T, R>>::try_call_once","value":"pub fn try_call_once<F: FnOnce() -> Result<T, E>, E>(&Self, F)\n-> Result<&T, E>","parent":null,"children":[],"decl_id":null,"docs":" This method is similar to `call_once`, but allows the given closure to\n fail, and lets the `Once` in a uninitialized state if it does.","sig":null,"attributes":[{"value":"/ This method is similar to `call_once`, but allows the given closure to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48688,"byte_end":48762,"line_start":170,"line_end":170,"column_start":5,"column_end":79}},{"value":"/ fail, and lets the `Once` in a uninitialized state if it does.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48767,"byte_end":48833,"line_start":171,"line_end":171,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48838,"byte_end":48841,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ This method will block the calling thread if another initialization","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48846,"byte_end":48917,"line_start":173,"line_end":173,"column_start":5,"column_end":76}},{"value":"/ routine is currently running.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48922,"byte_end":48955,"line_start":174,"line_end":174,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48960,"byte_end":48963,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ When this function returns without error, it is guaranteed that some","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":48968,"byte_end":49040,"line_start":176,"line_end":176,"column_start":5,"column_end":77}},{"value":"/ initialization has run and completed (it may not be the closure","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49045,"byte_end":49112,"line_start":177,"line_end":177,"column_start":5,"column_end":72}},{"value":"/ specified). The returned reference will point to the result from the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49117,"byte_end":49189,"line_start":178,"line_end":178,"column_start":5,"column_end":77}},{"value":"/ closure that was run.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49194,"byte_end":49219,"line_start":179,"line_end":179,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49224,"byte_end":49227,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49232,"byte_end":49244,"line_start":181,"line_end":181,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49249,"byte_end":49252,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the [`Once`] previously panicked while attempting","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49257,"byte_end":49338,"line_start":183,"line_end":183,"column_start":5,"column_end":86}},{"value":"/ to initialize. This is similar to the poisoning behaviour of `std::sync`'s","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49343,"byte_end":49421,"line_start":184,"line_end":184,"column_start":5,"column_end":83}},{"value":"/ primitives.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49426,"byte_end":49441,"line_start":185,"line_end":185,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49446,"byte_end":49449,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49454,"byte_end":49468,"line_start":187,"line_end":187,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49473,"byte_end":49476,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49481,"byte_end":49488,"line_start":189,"line_end":189,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49493,"byte_end":49506,"line_start":190,"line_end":190,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49511,"byte_end":49514,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ static INIT: spin::Once<usize> = spin::Once::new();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49519,"byte_end":49574,"line_start":192,"line_end":192,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49579,"byte_end":49582,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ fn get_cached_val() -> Result<usize, String> {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49587,"byte_end":49637,"line_start":194,"line_end":194,"column_start":5,"column_end":55}},{"value":"/     INIT.try_call_once(expensive_fallible_computation).map(|x| *x)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49642,"byte_end":49712,"line_start":195,"line_end":195,"column_start":5,"column_end":75}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49717,"byte_end":49722,"line_start":196,"line_end":196,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49727,"byte_end":49730,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ fn expensive_fallible_computation() -> Result<usize, String> {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49735,"byte_end":49801,"line_start":198,"line_end":198,"column_start":5,"column_end":71}},{"value":"/     // ...","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49806,"byte_end":49820,"line_start":199,"line_end":199,"column_start":5,"column_end":19}},{"value":"/ # Ok(2)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49825,"byte_end":49836,"line_start":200,"line_end":200,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49841,"byte_end":49846,"line_start":201,"line_end":201,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":49851,"byte_end":49858,"line_start":202,"line_end":202,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56682,"byte_end":56686,"line_start":320,"line_end":320,"column_start":12,"column_end":16},"name":"wait","qualname":"<Once<T, R>>::wait","value":"pub fn wait(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Spins until the [`Once`] contains a value.","sig":null,"attributes":[{"value":"/ Spins until the [`Once`] contains a value.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56297,"byte_end":56343,"line_start":311,"line_end":311,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56348,"byte_end":56351,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ Note that in releases prior to `0.7`, this function had the behaviour of [`Once::poll`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56356,"byte_end":56448,"line_start":313,"line_end":313,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56453,"byte_end":56456,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56461,"byte_end":56473,"line_start":315,"line_end":315,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56478,"byte_end":56481,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the [`Once`] previously panicked while attempting","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56486,"byte_end":56567,"line_start":317,"line_end":317,"column_start":5,"column_end":86}},{"value":"/ to initialize. This is similar to the poisoning behaviour of `std::sync`'s","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56572,"byte_end":56650,"line_start":318,"line_end":318,"column_start":5,"column_end":83}},{"value":"/ primitives.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56655,"byte_end":56670,"line_start":319,"line_end":319,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":389},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":57340,"byte_end":57344,"line_start":339,"line_end":339,"column_start":12,"column_end":16},"name":"poll","qualname":"<Once<T, R>>::poll","value":"pub fn poll(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Like [`Once::get`], but will spin if the [`Once`] is in the process of being\n initialized. If initialization has not even begun, `None` will be returned.","sig":null,"attributes":[{"value":"/ Like [`Once::get`], but will spin if the [`Once`] is in the process of being","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56856,"byte_end":56936,"line_start":329,"line_end":329,"column_start":5,"column_end":85}},{"value":"/ initialized. If initialization has not even begun, `None` will be returned.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":56941,"byte_end":57020,"line_start":330,"line_end":330,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":57025,"byte_end":57028,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Note that in releases prior to `0.7`, this function was named `wait`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":57033,"byte_end":57106,"line_start":332,"line_end":332,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":57111,"byte_end":57114,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":57119,"byte_end":57131,"line_start":334,"line_end":334,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":57136,"byte_end":57139,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the [`Once`] previously panicked while attempting","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":57144,"byte_end":57225,"line_start":336,"line_end":336,"column_start":5,"column_end":86}},{"value":"/ to initialize. This is similar to the poisoning behaviour of `std::sync`'s","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":57230,"byte_end":57308,"line_start":337,"line_end":337,"column_start":5,"column_end":83}},{"value":"/ primitives.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":57313,"byte_end":57328,"line_start":338,"line_end":338,"column_start":5,"column_end":20}}]},{"kind":"Const","id":{"krate":0,"index":393},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58152,"byte_end":58156,"line_start":357,"line_end":357,"column_start":15,"column_end":19},"name":"INIT","qualname":"::once::Once::<T, R>::INIT","value":"Self","parent":{"krate":0,"index":390},"children":[],"decl_id":null,"docs":" Initialization constant of [`Once`].\n","sig":null,"attributes":[{"value":"/ Initialization constant of [`Once`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58044,"byte_end":58084,"line_start":355,"line_end":355,"column_start":5,"column_end":45}},{"value":"allow(clippy :: declare_interior_mutable_const)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58089,"byte_end":58137,"line_start":356,"line_end":356,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58368,"byte_end":58371,"line_start":364,"line_end":364,"column_start":18,"column_end":21},"name":"new","qualname":"<Once<T, R>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new [`Once`].\n","sig":null,"attributes":[{"value":"/ Creates a new [`Once`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58323,"byte_end":58350,"line_start":363,"line_end":363,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58470,"byte_end":58481,"line_start":369,"line_end":369,"column_start":18,"column_end":29},"name":"initialized","qualname":"<Once<T, R>>::initialized","value":"pub const fn initialized(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new initialized [`Once`].\n","sig":null,"attributes":[{"value":"/ Creates a new initialized [`Once`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58413,"byte_end":58452,"line_start":368,"line_end":368,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58963,"byte_end":58973,"line_start":382,"line_end":382,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<Once<T, R>>::as_mut_ptr","value":"pub fn as_mut_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a pointer to the inner data.","sig":null,"attributes":[{"value":"/ Retrieve a pointer to the inner data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58687,"byte_end":58728,"line_start":377,"line_end":377,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58733,"byte_end":58736,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ While this method itself is safe, accessing the pointer before the [`Once`] has been","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58741,"byte_end":58829,"line_start":379,"line_end":379,"column_start":5,"column_end":93}},{"value":"/ initialized is UB, unless this method has already been written to from a pointer coming","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58834,"byte_end":58925,"line_start":380,"line_end":380,"column_start":5,"column_end":96}},{"value":"/ from this method.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58930,"byte_end":58951,"line_start":381,"line_end":381,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":60197,"byte_end":60200,"line_start":413,"line_end":413,"column_start":12,"column_end":15},"name":"get","qualname":"<Once<T, R>>::get","value":"pub fn get(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the inner value if the [`Once`] has been initialized.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the inner value if the [`Once`] has been initialized.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":60105,"byte_end":60185,"line_start":412,"line_end":412,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":61190,"byte_end":61203,"line_start":430,"line_end":430,"column_start":19,"column_end":32},"name":"get_unchecked","qualname":"<Once<T, R>>::get_unchecked","value":"pub unsafe fn get_unchecked(&Self) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the inner value on the unchecked assumption that the  [`Once`] has been initialized.","sig":null,"attributes":[{"value":"/ Returns a reference to the inner value on the unchecked assumption that the  [`Once`] has been initialized.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":60582,"byte_end":60693,"line_start":422,"line_end":422,"column_start":5,"column_end":116}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":60698,"byte_end":60701,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":60706,"byte_end":60718,"line_start":424,"line_end":424,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":60723,"byte_end":60726,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if the `Once` has not already been initialized because a reference to uninitialized","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":60731,"byte_end":60845,"line_start":426,"line_end":426,"column_start":5,"column_end":119}},{"value":"/ memory will be returned, immediately triggering undefined behaviour (even if the reference goes unused).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":60850,"byte_end":60958,"line_start":427,"line_end":427,"column_start":5,"column_end":113}},{"value":"/ However, this can be useful in some instances for exposing the `Once` to FFI or when the overhead of atomically","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":60963,"byte_end":61078,"line_start":428,"line_end":428,"column_start":5,"column_end":120}},{"value":"/ checking initialization is unacceptable and the `Once` has already been initialized.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":61083,"byte_end":61171,"line_start":429,"line_end":429,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":61829,"byte_end":61836,"line_start":443,"line_end":443,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Once<T, R>>::get_mut","value":"pub fn get_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the inner value if the [`Once`] has been initialized.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the inner value if the [`Once`] has been initialized.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":61544,"byte_end":61632,"line_start":439,"line_end":439,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":61637,"byte_end":61640,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ Because this method requires a mutable reference to the [`Once`], no synchronization","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":61645,"byte_end":61733,"line_start":441,"line_end":441,"column_start":5,"column_end":93}},{"value":"/ overhead is required to access the inner value. In effect, it is zero-cost.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":61738,"byte_end":61817,"line_start":442,"line_end":442,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62276,"byte_end":62290,"line_start":454,"line_end":454,"column_start":12,"column_end":26},"name":"try_into_inner","qualname":"<Once<T, R>>::try_into_inner","value":"pub fn try_into_inner(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a the inner value if the [`Once`] has been initialized.","sig":null,"attributes":[{"value":"/ Returns a the inner value if the [`Once`] has been initialized.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62022,"byte_end":62089,"line_start":450,"line_end":450,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62094,"byte_end":62097,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Because this method requires ownership of the [`Once`], no synchronization overhead","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62102,"byte_end":62189,"line_start":452,"line_end":452,"column_start":5,"column_end":92}},{"value":"/ is required to access the inner value. In effect, it is zero-cost.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62194,"byte_end":62264,"line_start":453,"line_end":453,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62766,"byte_end":62778,"line_start":466,"line_end":466,"column_start":12,"column_end":24},"name":"is_completed","qualname":"<Once<T, R>>::is_completed","value":"pub fn is_completed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the value has been initialized.","sig":null,"attributes":[{"value":"/ Checks whether the value has been initialized.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62473,"byte_end":62523,"line_start":461,"line_end":461,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62528,"byte_end":62531,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ This is done using [`Acquire`](core::sync::atomic::Ordering::Acquire) ordering, and","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62536,"byte_end":62623,"line_start":463,"line_end":463,"column_start":5,"column_end":92}},{"value":"/ therefore it is safe to access the value directly via","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62628,"byte_end":62685,"line_start":464,"line_end":464,"column_start":5,"column_end":62}},{"value":"/ [`get_unchecked`](Self::get_unchecked) if this returns true.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62690,"byte_end":62754,"line_start":465,"line_end":465,"column_start":5,"column_end":69}}]},{"kind":"Mod","id":{"krate":0,"index":419},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"rwlock","qualname":"::rwlock","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":428},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":435},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":454},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":468},{"krate":0,"index":475},{"krate":0,"index":482},{"krate":0,"index":485},{"krate":0,"index":488},{"krate":0,"index":494},{"krate":0,"index":500},{"krate":0,"index":512},{"krate":0,"index":518},{"krate":0,"index":522},{"krate":0,"index":526},{"krate":0,"index":530},{"krate":0,"index":534},{"krate":0,"index":538},{"krate":0,"index":543},{"krate":0,"index":551},{"krate":0,"index":556},{"krate":0,"index":561},{"krate":0,"index":568},{"krate":0,"index":573},{"krate":0,"index":578},{"krate":0,"index":583},{"krate":0,"index":589},{"krate":0,"index":595},{"krate":0,"index":600},{"krate":0,"index":604},{"krate":0,"index":609},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":628},{"krate":0,"index":637}],"decl_id":null,"docs":" A lock that provides data access to either one writer or many readers.\n","sig":null,"attributes":[{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2665,"byte_end":2691,"line_start":75,"line_end":75,"column_start":1,"column_end":27}},{"value":"/ A lock that provides data access to either one writer or many readers.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":68706,"byte_end":68780,"line_start":1,"line_end":1,"column_start":1,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":454},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71405,"byte_end":71411,"line_start":66,"line_end":66,"column_start":12,"column_end":18},"name":"RwLock","qualname":"::rwlock::RwLock","value":"RwLock {  }","parent":null,"children":[{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459}],"decl_id":null,"docs":" A lock that provides data access to either one writer or many readers.","sig":null,"attributes":[{"value":"/ A lock that provides data access to either one writer or many readers.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":68968,"byte_end":69042,"line_start":13,"line_end":13,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69043,"byte_end":69046,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This lock behaves in a similar manner to its namesake `std::sync::RwLock` but uses","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69047,"byte_end":69133,"line_start":15,"line_end":15,"column_start":1,"column_end":87}},{"value":"/ spinning for synchronisation instead. Unlike its namespace, this lock does not","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69134,"byte_end":69216,"line_start":16,"line_end":16,"column_start":1,"column_end":83}},{"value":"/ track lock poisoning.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69217,"byte_end":69242,"line_start":17,"line_end":17,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69243,"byte_end":69246,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ This type of lock allows a number of readers or at most one writer at any","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69247,"byte_end":69324,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ point in time. The write portion of this lock typically allows modification","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69325,"byte_end":69404,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ of the underlying data (exclusive access) and the read portion of this lock","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69405,"byte_end":69484,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ typically allows for read-only access (shared access).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69485,"byte_end":69543,"line_start":22,"line_end":22,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69544,"byte_end":69547,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The type parameter `T` represents the data that this lock protects. It is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69548,"byte_end":69625,"line_start":24,"line_end":24,"column_start":1,"column_end":78}},{"value":"/ required that `T` satisfies `Send` to be shared across tasks and `Sync` to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69626,"byte_end":69704,"line_start":25,"line_end":25,"column_start":1,"column_end":79}},{"value":"/ allow concurrent access through readers. The RAII guards returned from the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69705,"byte_end":69783,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ locking methods implement `Deref` (and `DerefMut` for the `write` methods)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69784,"byte_end":69862,"line_start":27,"line_end":27,"column_start":1,"column_end":79}},{"value":"/ to allow access to the contained of the lock.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69863,"byte_end":69912,"line_start":28,"line_end":28,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69913,"byte_end":69916,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ An [`RwLockUpgradableGuard`](RwLockUpgradableGuard) can be upgraded to a","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69917,"byte_end":69993,"line_start":30,"line_end":30,"column_start":1,"column_end":77}},{"value":"/ writable guard through the [`RwLockUpgradableGuard::upgrade`](RwLockUpgradableGuard::upgrade)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":69994,"byte_end":70091,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/ [`RwLockUpgradableGuard::try_upgrade`](RwLockUpgradableGuard::try_upgrade) functions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70092,"byte_end":70181,"line_start":32,"line_end":32,"column_start":1,"column_end":90}},{"value":"/ Writable or upgradeable guards can be downgraded through their respective `downgrade`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70182,"byte_end":70271,"line_start":33,"line_end":33,"column_start":1,"column_end":90}},{"value":"/ functions.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70272,"byte_end":70286,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70287,"byte_end":70290,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Based on Facebook's","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70291,"byte_end":70314,"line_start":36,"line_end":36,"column_start":1,"column_end":24}},{"value":"/ [`folly/RWSpinLock.h`](https://github.com/facebook/folly/blob/a0394d84f2d5c3e50ebfd0566f9d3acb52cfab5a/folly/synchronization/RWSpinLock.h).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70315,"byte_end":70458,"line_start":37,"line_end":37,"column_start":1,"column_end":144}},{"value":"/ This implementation is unfair to writers - if the lock always has readers, then no writers will","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70459,"byte_end":70558,"line_start":38,"line_end":38,"column_start":1,"column_end":100}},{"value":"/ ever get a chance. Using an upgradeable lock guard can *somewhat* alleviate this issue as no","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70559,"byte_end":70655,"line_start":39,"line_end":39,"column_start":1,"column_end":97}},{"value":"/ new readers are allowed when an upgradeable guard is held, but upgradeable guards can be taken","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70656,"byte_end":70754,"line_start":40,"line_end":40,"column_start":1,"column_end":99}},{"value":"/ when there are existing readers. However if the lock is that highly contended and writes are","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70755,"byte_end":70851,"line_start":41,"line_end":41,"column_start":1,"column_end":97}},{"value":"/ crucial then this implementation may be a poor choice.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70852,"byte_end":70910,"line_start":42,"line_end":42,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70911,"byte_end":70914,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70915,"byte_end":70929,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70930,"byte_end":70933,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70934,"byte_end":70941,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70942,"byte_end":70955,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70956,"byte_end":70959,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ let lock = spin::RwLock::new(5);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70960,"byte_end":70996,"line_start":49,"line_end":49,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":70997,"byte_end":71000,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // many reader locks can be held at once","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71001,"byte_end":71045,"line_start":51,"line_end":51,"column_start":1,"column_end":45}},{"value":"/ {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71046,"byte_end":71051,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/     let r1 = lock.read();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71052,"byte_end":71081,"line_start":53,"line_end":53,"column_start":1,"column_end":30}},{"value":"/     let r2 = lock.read();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71082,"byte_end":71111,"line_start":54,"line_end":54,"column_start":1,"column_end":30}},{"value":"/     assert_eq!(*r1, 5);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71112,"byte_end":71139,"line_start":55,"line_end":55,"column_start":1,"column_end":28}},{"value":"/     assert_eq!(*r2, 5);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71140,"byte_end":71167,"line_start":56,"line_end":56,"column_start":1,"column_end":28}},{"value":"/ } // read locks are dropped at this point","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71168,"byte_end":71213,"line_start":57,"line_end":57,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71214,"byte_end":71217,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ // only one write lock may be held, however","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71218,"byte_end":71265,"line_start":59,"line_end":59,"column_start":1,"column_end":48}},{"value":"/ {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71266,"byte_end":71271,"line_start":60,"line_end":60,"column_start":1,"column_end":6}},{"value":"/     let mut w = lock.write();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71272,"byte_end":71305,"line_start":61,"line_end":61,"column_start":1,"column_end":34}},{"value":"/     *w += 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71306,"byte_end":71322,"line_start":62,"line_end":62,"column_start":1,"column_end":17}},{"value":"/     assert_eq!(*w, 6);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71323,"byte_end":71349,"line_start":63,"line_end":63,"column_start":1,"column_end":27}},{"value":"/ } // write lock is dropped here","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71350,"byte_end":71385,"line_start":64,"line_end":64,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71386,"byte_end":71393,"line_start":65,"line_end":65,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":463},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71775,"byte_end":71790,"line_start":80,"line_end":80,"column_start":12,"column_end":27},"name":"RwLockReadGuard","qualname":"::rwlock::RwLockReadGuard","value":"RwLockReadGuard {  }","parent":null,"children":[{"krate":0,"index":466},{"krate":0,"index":467}],"decl_id":null,"docs":" A guard that provides immutable data access.","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71603,"byte_end":71651,"line_start":76,"line_end":76,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71652,"byte_end":71655,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will decrement the read count,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71656,"byte_end":71727,"line_start":78,"line_end":78,"column_start":1,"column_end":72}},{"value":"/ potentially releasing the lock.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71728,"byte_end":71763,"line_start":79,"line_end":79,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71986,"byte_end":72002,"line_start":88,"line_end":88,"column_start":12,"column_end":28},"name":"RwLockWriteGuard","qualname":"::rwlock::RwLockWriteGuard","value":"RwLockWriteGuard {  }","parent":null,"children":[{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474}],"decl_id":null,"docs":" A guard that provides mutable data access.","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71860,"byte_end":71906,"line_start":85,"line_end":85,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71907,"byte_end":71910,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":71911,"byte_end":71974,"line_start":87,"line_end":87,"column_start":1,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":475},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72505,"byte_end":72526,"line_start":101,"line_end":101,"column_start":12,"column_end":33},"name":"RwLockUpgradableGuard","qualname":"::rwlock::RwLockUpgradableGuard","value":"RwLockUpgradableGuard {  }","parent":null,"children":[{"krate":0,"index":479},{"krate":0,"index":480},{"krate":0,"index":481}],"decl_id":null,"docs":" A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`].","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72117,"byte_end":72209,"line_start":94,"line_end":94,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72210,"byte_end":72213,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ No writers or other upgradeable guards can exist while this is in scope. New reader","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72214,"byte_end":72301,"line_start":96,"line_end":96,"column_start":1,"column_end":88}},{"value":"/ creation is prevented (to alleviate writer starvation) but there may be existing readers","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72302,"byte_end":72394,"line_start":97,"line_end":97,"column_start":1,"column_end":93}},{"value":"/ when the lock is acquired.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72395,"byte_end":72425,"line_start":98,"line_end":98,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72426,"byte_end":72429,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ When the guard falls out of scope it will release the lock.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72430,"byte_end":72493,"line_start":100,"line_end":100,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":491},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73224,"byte_end":73227,"line_start":128,"line_end":128,"column_start":18,"column_end":21},"name":"new","qualname":"<RwLock<T, R>>::new","value":"pub const fn new(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new spinlock wrapping the supplied data.","sig":null,"attributes":[{"value":"/ Creates a new spinlock wrapping the supplied data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72835,"byte_end":72889,"line_start":112,"line_end":112,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72894,"byte_end":72897,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ May be used statically:","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72902,"byte_end":72929,"line_start":114,"line_end":114,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72934,"byte_end":72937,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72942,"byte_end":72949,"line_start":116,"line_end":116,"column_start":5,"column_end":12}},{"value":"/ use spin;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72954,"byte_end":72967,"line_start":117,"line_end":117,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72972,"byte_end":72975,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ static RW_LOCK: spin::RwLock<()> = spin::RwLock::new(());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72980,"byte_end":73041,"line_start":119,"line_end":119,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73046,"byte_end":73049,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ fn demo() {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73054,"byte_end":73069,"line_start":121,"line_end":121,"column_start":5,"column_end":20}},{"value":"/     let lock = RW_LOCK.read();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73074,"byte_end":73108,"line_start":122,"line_end":122,"column_start":5,"column_end":39}},{"value":"/     // do something with lock","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73113,"byte_end":73146,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/     drop(lock);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73151,"byte_end":73170,"line_start":124,"line_end":124,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73175,"byte_end":73180,"line_start":125,"line_end":125,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73185,"byte_end":73192,"line_start":126,"line_end":126,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73197,"byte_end":73206,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73483,"byte_end":73493,"line_start":138,"line_end":138,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<RwLock<T, R>>::into_inner","value":"pub fn into_inner(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Consumes this `RwLock`, returning the underlying data.\n","sig":null,"attributes":[{"value":"/ Consumes this `RwLock`, returning the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73399,"byte_end":73457,"line_start":136,"line_end":136,"column_start":5,"column_end":63}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73462,"byte_end":73471,"line_start":137,"line_end":137,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74548,"byte_end":74558,"line_start":169,"line_end":169,"column_start":12,"column_end":22},"name":"as_mut_ptr","qualname":"<RwLock<T, R>>::as_mut_ptr","value":"pub fn as_mut_ptr(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the underying data.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the underying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73703,"byte_end":73755,"line_start":144,"line_end":144,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73760,"byte_end":73763,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ This is mostly meant to be used for applications which require manual unlocking, but where","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73768,"byte_end":73862,"line_start":146,"line_end":146,"column_start":5,"column_end":99}},{"value":"/ storing both the lock and the pointer to the inner data gets inefficient.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73867,"byte_end":73944,"line_start":147,"line_end":147,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73949,"byte_end":73952,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ While this is safe, writing to the data is undefined behavior unless the current thread has","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":73957,"byte_end":74052,"line_start":149,"line_end":149,"column_start":5,"column_end":100}},{"value":"/ acquired a write lock, and reading requires either a read or write lock.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74057,"byte_end":74133,"line_start":150,"line_end":150,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74138,"byte_end":74141,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74146,"byte_end":74159,"line_start":152,"line_end":152,"column_start":5,"column_end":18}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74164,"byte_end":74171,"line_start":153,"line_end":153,"column_start":5,"column_end":12}},{"value":"/ let lock = spin::RwLock::new(42);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74176,"byte_end":74213,"line_start":154,"line_end":154,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74218,"byte_end":74221,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74226,"byte_end":74238,"line_start":156,"line_end":156,"column_start":5,"column_end":17}},{"value":"/     core::mem::forget(lock.write());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74243,"byte_end":74283,"line_start":157,"line_end":157,"column_start":5,"column_end":45}},{"value":"/     ","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74288,"byte_end":74296,"line_start":158,"line_end":158,"column_start":5,"column_end":13}},{"value":"/     assert_eq!(lock.as_mut_ptr().read(), 42);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74301,"byte_end":74350,"line_start":159,"line_end":159,"column_start":5,"column_end":54}},{"value":"/     lock.as_mut_ptr().write(58);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74355,"byte_end":74391,"line_start":160,"line_end":160,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74396,"byte_end":74399,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/     lock.force_write_unlock();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74404,"byte_end":74438,"line_start":162,"line_end":162,"column_start":5,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74443,"byte_end":74448,"line_start":163,"line_end":163,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74453,"byte_end":74456,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*lock.read(), 58);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74461,"byte_end":74494,"line_start":165,"line_end":165,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74499,"byte_end":74502,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74507,"byte_end":74514,"line_start":167,"line_end":167,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74519,"byte_end":74536,"line_start":168,"line_end":168,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":497},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75540,"byte_end":75544,"line_start":197,"line_end":197,"column_start":12,"column_end":16},"name":"read","qualname":"<RwLock<T, R>>::read","value":"pub fn read(&Self) -> RwLockReadGuard<, T>","parent":null,"children":[],"decl_id":null,"docs":" Locks this rwlock with shared read access, blocking the current thread\n until it can be acquired.","sig":null,"attributes":[{"value":"/ Locks this rwlock with shared read access, blocking the current thread","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74664,"byte_end":74738,"line_start":175,"line_end":175,"column_start":5,"column_end":79}},{"value":"/ until it can be acquired.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74743,"byte_end":74772,"line_start":176,"line_end":176,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74777,"byte_end":74780,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ The calling thread will be blocked until there are no more writers which","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74785,"byte_end":74861,"line_start":178,"line_end":178,"column_start":5,"column_end":81}},{"value":"/ hold the lock. There may be other readers currently inside the lock when","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74866,"byte_end":74942,"line_start":179,"line_end":179,"column_start":5,"column_end":81}},{"value":"/ this method returns. This method does not provide any guarantees with","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74947,"byte_end":75020,"line_start":180,"line_end":180,"column_start":5,"column_end":78}},{"value":"/ respect to the ordering of whether contentious readers or writers will","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75025,"byte_end":75099,"line_start":181,"line_end":181,"column_start":5,"column_end":79}},{"value":"/ acquire the lock first.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75104,"byte_end":75131,"line_start":182,"line_end":182,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75136,"byte_end":75139,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will release this thread's shared access","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75144,"byte_end":75216,"line_start":184,"line_end":184,"column_start":5,"column_end":77}},{"value":"/ once it is dropped.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75221,"byte_end":75244,"line_start":185,"line_end":185,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75249,"byte_end":75252,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75257,"byte_end":75264,"line_start":187,"line_end":187,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75269,"byte_end":75307,"line_start":188,"line_end":188,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75312,"byte_end":75317,"line_start":189,"line_end":189,"column_start":5,"column_end":10}},{"value":"/     let mut data = mylock.read();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75322,"byte_end":75359,"line_start":190,"line_end":190,"column_start":5,"column_end":42}},{"value":"/     // The lock is now locked and the data can be read","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75364,"byte_end":75422,"line_start":191,"line_end":191,"column_start":5,"column_end":63}},{"value":"/     println!(\"{}\", *data);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75427,"byte_end":75457,"line_start":192,"line_end":192,"column_start":5,"column_end":35}},{"value":"/     // The lock is dropped","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75462,"byte_end":75492,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75497,"byte_end":75502,"line_start":194,"line_end":194,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75507,"byte_end":75514,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75519,"byte_end":75528,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76377,"byte_end":76382,"line_start":225,"line_end":225,"column_start":12,"column_end":17},"name":"write","qualname":"<RwLock<T, R>>::write","value":"pub fn write(&Self) -> RwLockWriteGuard<, T, R>","parent":null,"children":[],"decl_id":null,"docs":" Lock this rwlock with exclusive write access, blocking the current\n thread until it can be acquired.","sig":null,"attributes":[{"value":"/ Lock this rwlock with exclusive write access, blocking the current","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75743,"byte_end":75813,"line_start":206,"line_end":206,"column_start":5,"column_end":75}},{"value":"/ thread until it can be acquired.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75818,"byte_end":75854,"line_start":207,"line_end":207,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75859,"byte_end":75862,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ This function will not return while other writers or other readers","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75867,"byte_end":75937,"line_start":209,"line_end":209,"column_start":5,"column_end":75}},{"value":"/ currently have access to the lock.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75942,"byte_end":75980,"line_start":210,"line_end":210,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75985,"byte_end":75988,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ Returns an RAII guard which will drop the write access of this rwlock","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":75993,"byte_end":76066,"line_start":212,"line_end":212,"column_start":5,"column_end":78}},{"value":"/ when dropped.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76071,"byte_end":76088,"line_start":213,"line_end":213,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76093,"byte_end":76096,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76101,"byte_end":76108,"line_start":215,"line_end":215,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76113,"byte_end":76151,"line_start":216,"line_end":216,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76156,"byte_end":76161,"line_start":217,"line_end":217,"column_start":5,"column_end":10}},{"value":"/     let mut data = mylock.write();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76166,"byte_end":76204,"line_start":218,"line_end":218,"column_start":5,"column_end":43}},{"value":"/     // The lock is now locked and the data can be written","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76209,"byte_end":76270,"line_start":219,"line_end":219,"column_start":5,"column_end":66}},{"value":"/     *data += 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76275,"byte_end":76294,"line_start":220,"line_end":220,"column_start":5,"column_end":24}},{"value":"/     // The lock is dropped","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76299,"byte_end":76329,"line_start":221,"line_end":221,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76334,"byte_end":76339,"line_start":222,"line_end":222,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76344,"byte_end":76351,"line_start":223,"line_end":223,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76356,"byte_end":76365,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76827,"byte_end":76843,"line_start":237,"line_end":237,"column_start":12,"column_end":28},"name":"upgradeable_read","qualname":"<RwLock<T, R>>::upgradeable_read","value":"pub fn upgradeable_read(&Self) -> RwLockUpgradableGuard<, T, R>","parent":null,"children":[],"decl_id":null,"docs":" Obtain a readable lock guard that can later be upgraded to a writable lock guard.\n Upgrades can be done through the [`RwLockUpgradableGuard::upgrade`](RwLockUpgradableGuard::upgrade) method.\n","sig":null,"attributes":[{"value":"/ Obtain a readable lock guard that can later be upgraded to a writable lock guard.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76600,"byte_end":76685,"line_start":234,"line_end":234,"column_start":5,"column_end":90}},{"value":"/ Upgrades can be done through the [`RwLockUpgradableGuard::upgrade`](RwLockUpgradableGuard::upgrade) method.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76690,"byte_end":76801,"line_start":235,"line_end":235,"column_start":5,"column_end":116}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":76806,"byte_end":76815,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":78016,"byte_end":78024,"line_start":271,"line_end":271,"column_start":12,"column_end":20},"name":"try_read","qualname":"<RwLock<T, R>>::try_read","value":"pub fn try_read(&Self) -> Option<RwLockReadGuard<, T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to acquire this lock with shared read access.","sig":null,"attributes":[{"value":"/ Attempt to acquire this lock with shared read access.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77099,"byte_end":77156,"line_start":248,"line_end":248,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77161,"byte_end":77164,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ This function will never block and will return immediately if `read`","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77169,"byte_end":77241,"line_start":250,"line_end":250,"column_start":5,"column_end":77}},{"value":"/ would otherwise succeed. Returns `Some` of an RAII guard which will","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77246,"byte_end":77317,"line_start":251,"line_end":251,"column_start":5,"column_end":76}},{"value":"/ release the shared access of this thread when dropped, or `None` if the","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77322,"byte_end":77397,"line_start":252,"line_end":252,"column_start":5,"column_end":80}},{"value":"/ access could not be granted. This method does not provide any","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77402,"byte_end":77467,"line_start":253,"line_end":253,"column_start":5,"column_end":70}},{"value":"/ guarantees with respect to the ordering of whether contentious readers","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77472,"byte_end":77546,"line_start":254,"line_end":254,"column_start":5,"column_end":79}},{"value":"/ or writers will acquire the lock first.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77551,"byte_end":77594,"line_start":255,"line_end":255,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77599,"byte_end":77602,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77607,"byte_end":77614,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77619,"byte_end":77657,"line_start":258,"line_end":258,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77662,"byte_end":77667,"line_start":259,"line_end":259,"column_start":5,"column_end":10}},{"value":"/     match mylock.try_read() {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77672,"byte_end":77705,"line_start":260,"line_end":260,"column_start":5,"column_end":38}},{"value":"/         Some(data) => {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77710,"byte_end":77737,"line_start":261,"line_end":261,"column_start":5,"column_end":32}},{"value":"/             // The lock is now locked and the data can be read","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77742,"byte_end":77808,"line_start":262,"line_end":262,"column_start":5,"column_end":71}},{"value":"/             println!(\"{}\", *data);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77813,"byte_end":77851,"line_start":263,"line_end":263,"column_start":5,"column_end":43}},{"value":"/             // The lock is dropped","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77856,"byte_end":77894,"line_start":264,"line_end":264,"column_start":5,"column_end":43}},{"value":"/         },","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77899,"byte_end":77913,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/         None => (), // no cigar","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77918,"byte_end":77953,"line_start":266,"line_end":266,"column_start":5,"column_end":40}},{"value":"/     };","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77958,"byte_end":77968,"line_start":267,"line_end":267,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77973,"byte_end":77978,"line_start":268,"line_end":268,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77983,"byte_end":77990,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77995,"byte_end":78004,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":78993,"byte_end":79005,"line_start":294,"line_end":294,"column_start":12,"column_end":24},"name":"reader_count","qualname":"<RwLock<T, R>>::reader_count","value":"pub fn reader_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of readers that currently hold the lock (including upgradable readers).","sig":null,"attributes":[{"value":"/ Return the number of readers that currently hold the lock (including upgradable readers).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":78621,"byte_end":78714,"line_start":288,"line_end":288,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":78719,"byte_end":78722,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":78727,"byte_end":78739,"line_start":290,"line_end":290,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":78744,"byte_end":78747,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":78752,"byte_end":78861,"line_start":292,"line_end":292,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":78866,"byte_end":78981,"line_start":293,"line_end":293,"column_start":5,"column_end":120}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79607,"byte_end":79619,"line_start":307,"line_end":307,"column_start":12,"column_end":24},"name":"writer_count","qualname":"<RwLock<T, R>>::writer_count","value":"pub fn writer_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of writers that currently hold the lock.","sig":null,"attributes":[{"value":"/ Return the number of writers that currently hold the lock.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79145,"byte_end":79207,"line_start":299,"line_end":299,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79212,"byte_end":79215,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ Because [`RwLock`] guarantees exclusive mutable access, this function may only return either `0` or `1`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79220,"byte_end":79328,"line_start":301,"line_end":301,"column_start":5,"column_end":113}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79333,"byte_end":79336,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79341,"byte_end":79353,"line_start":303,"line_end":303,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79358,"byte_end":79361,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ This function provides no synchronization guarantees and so its result should be considered 'out of date'","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79366,"byte_end":79475,"line_start":305,"line_end":305,"column_start":5,"column_end":114}},{"value":"/ the instant it is called. Do not use it for synchronization purposes. However, it may be useful as a heuristic.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79480,"byte_end":79595,"line_start":306,"line_end":306,"column_start":5,"column_end":120}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80121,"byte_end":80141,"line_start":320,"line_end":320,"column_start":19,"column_end":39},"name":"force_read_decrement","qualname":"<RwLock<T, R>>::force_read_decrement","value":"pub unsafe fn force_read_decrement(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force decrement the reader count.","sig":null,"attributes":[{"value":"/ Force decrement the reader count.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79711,"byte_end":79748,"line_start":311,"line_end":311,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79753,"byte_end":79756,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79761,"byte_end":79773,"line_start":313,"line_end":313,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79778,"byte_end":79781,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if there are outstanding `RwLockReadGuard`s","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79786,"byte_end":79860,"line_start":315,"line_end":315,"column_start":5,"column_end":79}},{"value":"/ live, or if called more times than `read` has been called, but can be","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79865,"byte_end":79938,"line_start":316,"line_end":316,"column_start":5,"column_end":78}},{"value":"/ useful in FFI contexts where the caller doesn't know how to deal with","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":79943,"byte_end":80016,"line_start":317,"line_end":317,"column_start":5,"column_end":78}},{"value":"/ RAII. The underlying atomic operation uses `Ordering::Release`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80021,"byte_end":80088,"line_start":318,"line_end":318,"column_start":5,"column_end":72}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80093,"byte_end":80102,"line_start":319,"line_end":319,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80696,"byte_end":80714,"line_start":334,"line_end":334,"column_start":19,"column_end":37},"name":"force_write_unlock","qualname":"<RwLock<T, R>>::force_write_unlock","value":"pub unsafe fn force_write_unlock(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Force unlock exclusive write access.","sig":null,"attributes":[{"value":"/ Force unlock exclusive write access.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80290,"byte_end":80330,"line_start":325,"line_end":325,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80335,"byte_end":80338,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80343,"byte_end":80355,"line_start":327,"line_end":327,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80360,"byte_end":80363,"line_start":328,"line_end":328,"column_start":5,"column_end":8}},{"value":"/ This is *extremely* unsafe if there are outstanding `RwLockWriteGuard`s","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80368,"byte_end":80443,"line_start":329,"line_end":329,"column_start":5,"column_end":80}},{"value":"/ live, or if called when there are current readers, but can be useful in","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80448,"byte_end":80523,"line_start":330,"line_end":330,"column_start":5,"column_end":80}},{"value":"/ FFI contexts where the caller doesn't know how to deal with RAII. The","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80528,"byte_end":80601,"line_start":331,"line_end":331,"column_start":5,"column_end":78}},{"value":"/ underlying atomic operation uses `Ordering::Release`.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80606,"byte_end":80663,"line_start":332,"line_end":332,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":80668,"byte_end":80677,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":509},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82098,"byte_end":82107,"line_start":381,"line_end":381,"column_start":12,"column_end":21},"name":"try_write","qualname":"<RwLock<T, R>>::try_write","value":"pub fn try_write(&Self) -> Option<RwLockWriteGuard<, T, R>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to lock this rwlock with exclusive write access.","sig":null,"attributes":[{"value":"/ Attempt to lock this rwlock with exclusive write access.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81429,"byte_end":81489,"line_start":361,"line_end":361,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81494,"byte_end":81497,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ This function does not ever block, and it will return `None` if a call","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81502,"byte_end":81576,"line_start":363,"line_end":363,"column_start":5,"column_end":79}},{"value":"/ to `write` would otherwise block. If successful, an RAII guard is","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81581,"byte_end":81650,"line_start":364,"line_end":364,"column_start":5,"column_end":74}},{"value":"/ returned.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81655,"byte_end":81668,"line_start":365,"line_end":365,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81673,"byte_end":81676,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81681,"byte_end":81688,"line_start":367,"line_end":367,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81693,"byte_end":81731,"line_start":368,"line_end":368,"column_start":5,"column_end":43}},{"value":"/ {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81736,"byte_end":81741,"line_start":369,"line_end":369,"column_start":5,"column_end":10}},{"value":"/     match mylock.try_write() {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81746,"byte_end":81780,"line_start":370,"line_end":370,"column_start":5,"column_end":39}},{"value":"/         Some(mut data) => {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81785,"byte_end":81816,"line_start":371,"line_end":371,"column_start":5,"column_end":36}},{"value":"/             // The lock is now locked and the data can be written","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81821,"byte_end":81890,"line_start":372,"line_end":372,"column_start":5,"column_end":74}},{"value":"/             *data += 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81895,"byte_end":81922,"line_start":373,"line_end":373,"column_start":5,"column_end":32}},{"value":"/             // The lock is implicitly dropped","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81927,"byte_end":81976,"line_start":374,"line_end":374,"column_start":5,"column_end":54}},{"value":"/         },","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":81981,"byte_end":81995,"line_start":375,"line_end":375,"column_start":5,"column_end":19}},{"value":"/         None => (), // no cigar","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82000,"byte_end":82035,"line_start":376,"line_end":376,"column_start":5,"column_end":40}},{"value":"/     };","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82040,"byte_end":82050,"line_start":377,"line_end":377,"column_start":5,"column_end":15}},{"value":"/ }","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82055,"byte_end":82060,"line_start":378,"line_end":378,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82065,"byte_end":82072,"line_start":379,"line_end":379,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82077,"byte_end":82086,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82272,"byte_end":82292,"line_start":387,"line_end":387,"column_start":12,"column_end":32},"name":"try_upgradeable_read","qualname":"<RwLock<T, R>>::try_upgradeable_read","value":"pub fn try_upgradeable_read(&Self) -> Option<RwLockUpgradableGuard<, T, R>>","parent":null,"children":[],"decl_id":null,"docs":" Tries to obtain an upgradeable lock guard.\n","sig":null,"attributes":[{"value":"/ Tries to obtain an upgradeable lock guard.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82200,"byte_end":82246,"line_start":385,"line_end":385,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82251,"byte_end":82260,"line_start":386,"line_end":386,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":511},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83221,"byte_end":83228,"line_start":413,"line_end":413,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RwLock<T, R>>::get_mut","value":"pub fn get_mut(&mut Self) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82825,"byte_end":82880,"line_start":401,"line_end":401,"column_start":4,"column_end":59}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82884,"byte_end":82887,"line_start":402,"line_end":402,"column_start":4,"column_end":7}},{"value":"/ Since this call borrows the `RwLock` mutably, no actual locking needs to","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82891,"byte_end":82967,"line_start":403,"line_end":403,"column_start":4,"column_end":80}},{"value":"/ take place -- the mutable borrow statically guarantees no locks exist.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":82971,"byte_end":83045,"line_start":404,"line_end":404,"column_start":4,"column_end":78}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83049,"byte_end":83052,"line_start":405,"line_end":405,"column_start":4,"column_end":7}},{"value":"/ # Examples","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83056,"byte_end":83070,"line_start":406,"line_end":406,"column_start":4,"column_end":18}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83074,"byte_end":83077,"line_start":407,"line_end":407,"column_start":4,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83081,"byte_end":83088,"line_start":408,"line_end":408,"column_start":4,"column_end":11}},{"value":"/ let mut lock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83092,"byte_end":83132,"line_start":409,"line_end":409,"column_start":4,"column_end":44}},{"value":"/ *lock.get_mut() = 10;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83136,"byte_end":83161,"line_start":410,"line_end":410,"column_start":4,"column_end":29}},{"value":"/ assert_eq!(*lock.read(), 10);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83165,"byte_end":83198,"line_start":411,"line_end":411,"column_start":4,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83202,"byte_end":83209,"line_start":412,"line_end":412,"column_start":4,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":529},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84498,"byte_end":84502,"line_start":456,"line_end":456,"column_start":12,"column_end":16},"name":"leak","qualname":"<RwLockReadGuard>::leak","value":"pub fn leak(Self) -> &'rwlock T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a reference to the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84106,"byte_end":84175,"line_start":444,"line_end":444,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84180,"byte_end":84183,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original lock for all but reading locks.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84188,"byte_end":84282,"line_start":446,"line_end":446,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84287,"byte_end":84290,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84295,"byte_end":84302,"line_start":448,"line_end":448,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84307,"byte_end":84345,"line_start":449,"line_end":449,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84350,"byte_end":84353,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ let data: &i32 = spin::RwLockReadGuard::leak(mylock.read());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84358,"byte_end":84422,"line_start":451,"line_end":451,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84427,"byte_end":84430,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*data, 0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84435,"byte_end":84460,"line_start":453,"line_end":453,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84465,"byte_end":84472,"line_start":454,"line_end":454,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84477,"byte_end":84486,"line_start":455,"line_end":455,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85363,"byte_end":85370,"line_start":484,"line_end":484,"column_start":12,"column_end":19},"name":"upgrade","qualname":"<RwLockUpgradableGuard>::upgrade","value":"pub fn upgrade(Self) -> RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" Upgrades an upgradeable lock guard to a writable lock guard.","sig":null,"attributes":[{"value":"/ Upgrades an upgradeable lock guard to a writable lock guard.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85057,"byte_end":85121,"line_start":475,"line_end":475,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85126,"byte_end":85129,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85134,"byte_end":85141,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85146,"byte_end":85184,"line_start":478,"line_end":478,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85189,"byte_end":85192,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ let upgradeable = mylock.upgradeable_read(); // Readable, but not yet writable","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85197,"byte_end":85279,"line_start":480,"line_end":480,"column_start":5,"column_end":87}},{"value":"/ let writable = upgradeable.upgrade();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85284,"byte_end":85325,"line_start":481,"line_end":481,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85330,"byte_end":85337,"line_start":482,"line_end":482,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85342,"byte_end":85351,"line_start":483,"line_end":483,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86932,"byte_end":86943,"line_start":537,"line_end":537,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<RwLockUpgradableGuard>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<RwLockWriteGuard, Self>","parent":null,"children":[],"decl_id":null,"docs":" Tries to upgrade an upgradeable lock guard to a writable lock guard.","sig":null,"attributes":[{"value":"/ Tries to upgrade an upgradeable lock guard to a writable lock guard.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86465,"byte_end":86537,"line_start":525,"line_end":525,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86542,"byte_end":86545,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86550,"byte_end":86557,"line_start":527,"line_end":527,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86562,"byte_end":86600,"line_start":528,"line_end":528,"column_start":5,"column_end":43}},{"value":"/ let upgradeable = mylock.upgradeable_read(); // Readable, but not yet writable","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86605,"byte_end":86687,"line_start":529,"line_end":529,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86692,"byte_end":86695,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ match upgradeable.try_upgrade() {","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86700,"byte_end":86737,"line_start":531,"line_end":531,"column_start":5,"column_end":42}},{"value":"/     Ok(writable) => /* upgrade successful - use writable lock guard */ (),","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86742,"byte_end":86820,"line_start":532,"line_end":532,"column_start":5,"column_end":83}},{"value":"/     Err(upgradeable) => /* upgrade unsuccessful */ (),","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86825,"byte_end":86883,"line_start":533,"line_end":533,"column_start":5,"column_end":63}},{"value":"/ };","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86888,"byte_end":86894,"line_start":534,"line_end":534,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86899,"byte_end":86906,"line_start":535,"line_end":535,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":86911,"byte_end":86920,"line_start":536,"line_end":536,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87585,"byte_end":87594,"line_start":555,"line_end":555,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockUpgradableGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the upgradeable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87052,"byte_end":87061,"line_start":541,"line_end":541,"column_start":5,"column_end":14}},{"value":"/ Downgrades the upgradeable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87066,"byte_end":87184,"line_start":542,"line_end":542,"column_start":5,"column_end":123}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87189,"byte_end":87192,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87197,"byte_end":87204,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(1);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87209,"byte_end":87247,"line_start":545,"line_end":545,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87252,"byte_end":87255,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ let upgradeable = mylock.upgradeable_read();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87260,"byte_end":87308,"line_start":547,"line_end":547,"column_start":5,"column_end":53}},{"value":"/ assert!(mylock.try_read().is_none());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87313,"byte_end":87354,"line_start":548,"line_end":548,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(*upgradeable, 1);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87359,"byte_end":87391,"line_start":549,"line_end":549,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87396,"byte_end":87399,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ let readable = upgradeable.downgrade(); // This is guaranteed not to spin","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87404,"byte_end":87481,"line_start":551,"line_end":551,"column_start":5,"column_end":82}},{"value":"/ assert!(mylock.try_read().is_some());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87486,"byte_end":87527,"line_start":552,"line_end":552,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(*readable, 1);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87532,"byte_end":87561,"line_start":553,"line_end":553,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87566,"byte_end":87573,"line_start":554,"line_end":554,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88365,"byte_end":88369,"line_start":582,"line_end":582,"column_start":12,"column_end":16},"name":"leak","qualname":"<RwLockUpgradableGuard>::leak","value":"pub fn leak(Self) -> &'rwlock T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a reference to the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":87981,"byte_end":88050,"line_start":570,"line_end":570,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88055,"byte_end":88058,"line_start":571,"line_end":571,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original lock.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88063,"byte_end":88131,"line_start":572,"line_end":572,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88136,"byte_end":88139,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88144,"byte_end":88151,"line_start":574,"line_end":574,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88156,"byte_end":88194,"line_start":575,"line_end":575,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88199,"byte_end":88202,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ let data: &i32 = spin::RwLockUpgradableGuard::leak(mylock.upgradeable_read());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88207,"byte_end":88289,"line_start":577,"line_end":577,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88294,"byte_end":88297,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(*data, 0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88302,"byte_end":88327,"line_start":579,"line_end":579,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88332,"byte_end":88339,"line_start":580,"line_end":580,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88344,"byte_end":88353,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":565},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89394,"byte_end":89403,"line_start":614,"line_end":614,"column_start":12,"column_end":21},"name":"downgrade","qualname":"<RwLockWriteGuard>::downgrade","value":"pub fn downgrade(Self) -> RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the writable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","sig":null,"attributes":[{"value":"/ Downgrades the writable lock guard to a readable, shared lock guard. Cannot fail and is guaranteed not to spin.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88928,"byte_end":89043,"line_start":601,"line_end":601,"column_start":5,"column_end":120}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89048,"byte_end":89051,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89056,"byte_end":89063,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89068,"byte_end":89106,"line_start":604,"line_end":604,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89111,"byte_end":89114,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ let mut writable = mylock.write();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89119,"byte_end":89157,"line_start":606,"line_end":606,"column_start":5,"column_end":43}},{"value":"/ *writable = 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89162,"byte_end":89180,"line_start":607,"line_end":607,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89185,"byte_end":89188,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let readable = writable.downgrade(); // This is guaranteed not to spin","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89193,"byte_end":89267,"line_start":609,"line_end":609,"column_start":5,"column_end":79}},{"value":"/ # let readable_2 = mylock.try_read().unwrap();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89272,"byte_end":89322,"line_start":610,"line_end":610,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(*readable, 1);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89327,"byte_end":89356,"line_start":611,"line_end":611,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89361,"byte_end":89368,"line_start":612,"line_end":612,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89373,"byte_end":89382,"line_start":613,"line_end":613,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90219,"byte_end":90243,"line_start":641,"line_end":641,"column_start":12,"column_end":36},"name":"downgrade_to_upgradeable","qualname":"<RwLockWriteGuard>::downgrade_to_upgradeable","value":"pub fn downgrade_to_upgradeable(Self) -> RwLockUpgradableGuard","parent":null,"children":[],"decl_id":null,"docs":" Downgrades the writable lock guard to an upgradable, shared lock guard. Cannot fail and is guaranteed not to spin.","sig":null,"attributes":[{"value":"/ Downgrades the writable lock guard to an upgradable, shared lock guard. Cannot fail and is guaranteed not to spin.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89790,"byte_end":89908,"line_start":629,"line_end":629,"column_start":5,"column_end":123}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89913,"byte_end":89916,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89921,"byte_end":89928,"line_start":631,"line_end":631,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89933,"byte_end":89971,"line_start":632,"line_end":632,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89976,"byte_end":89979,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ let mut writable = mylock.write();","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":89984,"byte_end":90022,"line_start":634,"line_end":634,"column_start":5,"column_end":43}},{"value":"/ *writable = 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90027,"byte_end":90045,"line_start":635,"line_end":635,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90050,"byte_end":90053,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ let readable = writable.downgrade_to_upgradeable(); // This is guaranteed not to spin","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90058,"byte_end":90147,"line_start":637,"line_end":637,"column_start":5,"column_end":94}},{"value":"/ assert_eq!(*readable, 1);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90152,"byte_end":90181,"line_start":638,"line_end":638,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90186,"byte_end":90193,"line_start":639,"line_end":639,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90198,"byte_end":90207,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":567},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91164,"byte_end":91168,"line_start":672,"line_end":672,"column_start":12,"column_end":16},"name":"leak","qualname":"<RwLockWriteGuard>::leak","value":"pub fn leak(Self) -> &'rwlock mut T","parent":null,"children":[],"decl_id":null,"docs":" Leak the lock guard, yielding a mutable reference to the underlying data.","sig":null,"attributes":[{"value":"/ Leak the lock guard, yielding a mutable reference to the underlying data.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90765,"byte_end":90842,"line_start":659,"line_end":659,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90847,"byte_end":90850,"line_start":660,"line_end":660,"column_start":5,"column_end":8}},{"value":"/ Note that this function will permanently lock the original lock.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90855,"byte_end":90923,"line_start":661,"line_end":661,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90928,"byte_end":90931,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90936,"byte_end":90943,"line_start":663,"line_end":663,"column_start":5,"column_end":12}},{"value":"/ let mylock = spin::RwLock::new(0);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90948,"byte_end":90986,"line_start":664,"line_end":664,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90991,"byte_end":90994,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ let data: &mut i32 = spin::RwLockWriteGuard::leak(mylock.write());","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":90999,"byte_end":91069,"line_start":666,"line_end":666,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91074,"byte_end":91077,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ *data = 1;","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91082,"byte_end":91096,"line_start":668,"line_end":668,"column_start":5,"column_end":19}},{"value":"/ assert_eq!(*data, 1);","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91101,"byte_end":91126,"line_start":669,"line_end":669,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91131,"byte_end":91138,"line_start":670,"line_end":670,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91143,"byte_end":91152,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":640},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"relax","qualname":"::relax","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":643},{"krate":0,"index":645},{"krate":0,"index":647},{"krate":0,"index":649}],"decl_id":null,"docs":" Strategies that determine the behaviour of locks when encountering contention.\n","sig":null,"attributes":[{"value":"/ Strategies that determine the behaviour of locks when encountering contention.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103199,"byte_end":103281,"line_start":1,"line_end":1,"column_start":1,"column_end":83}}]},{"kind":"Trait","id":{"krate":0,"index":641},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103347,"byte_end":103360,"line_start":4,"line_end":4,"column_start":11,"column_end":24},"name":"RelaxStrategy","qualname":"::relax::RelaxStrategy","value":"RelaxStrategy","parent":null,"children":[{"krate":0,"index":642}],"decl_id":null,"docs":" A trait implemented by spinning relax strategies.\n","sig":null,"attributes":[{"value":"/ A trait implemented by spinning relax strategies.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103283,"byte_end":103336,"line_start":3,"line_end":3,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103440,"byte_end":103445,"line_start":6,"line_end":6,"column_start":8,"column_end":13},"name":"relax","qualname":"::relax::RelaxStrategy::relax","value":"pub fn relax()","parent":{"krate":0,"index":641},"children":[],"decl_id":null,"docs":" Perform the relaxing operation during a period of contention.\n","sig":null,"attributes":[{"value":"/ Perform the relaxing operation during a period of contention.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103367,"byte_end":103432,"line_start":5,"line_end":5,"column_start":5,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":643},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":104420,"byte_end":104424,"line_start":21,"line_end":21,"column_start":12,"column_end":16},"name":"Spin","qualname":"::relax::Spin","value":"","parent":null,"children":[],"decl_id":null,"docs":" A strategy that rapidly spins while informing the CPU that it should power down non-essential components via\n [`core::hint::spin_loop`].","sig":null,"attributes":[{"value":"/ A strategy that rapidly spins while informing the CPU that it should power down non-essential components via","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103452,"byte_end":103564,"line_start":9,"line_end":9,"column_start":1,"column_end":113}},{"value":"/ [`core::hint::spin_loop`].","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103565,"byte_end":103595,"line_start":10,"line_end":10,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103596,"byte_end":103599,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Note that spinning is a 'dumb' strategy and most schedulers cannot correctly differentiate it from useful work,","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103600,"byte_end":103715,"line_start":12,"line_end":12,"column_start":1,"column_end":116}},{"value":"/ thereby misallocating even more CPU time to the spinning process. This is known as","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103716,"byte_end":103802,"line_start":13,"line_end":13,"column_start":1,"column_end":87}},{"value":"/ ['priority inversion'](https://matklad.github.io/2020/01/02/spinlocks-considered-harmful.html).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103803,"byte_end":103902,"line_start":14,"line_end":14,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103903,"byte_end":103906,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ If you see signs that priority inversion is occurring, consider switching to [`Yield`] or, even better, not using a","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":103907,"byte_end":104026,"line_start":16,"line_end":16,"column_start":1,"column_end":120}},{"value":"/ spinlock at all and opting for a proper scheduler-aware lock. Remember also that different targets, operating","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":104027,"byte_end":104140,"line_start":17,"line_end":17,"column_start":1,"column_end":114}},{"value":"/ systems, schedulers, and even the same scheduler with different workloads will exhibit different behaviour. Just","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":104141,"byte_end":104257,"line_start":18,"line_end":18,"column_start":1,"column_end":117}},{"value":"/ because priority inversion isn't occurring in your tests does not mean that it will not occur. Use a scheduler-","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":104258,"byte_end":104373,"line_start":19,"line_end":19,"column_start":1,"column_end":116}},{"value":"/ aware lock if at all possible.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":104374,"byte_end":104408,"line_start":20,"line_end":20,"column_start":1,"column_end":35}}]},{"kind":"Struct","id":{"krate":0,"index":647},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":105633,"byte_end":105637,"line_start":53,"line_end":53,"column_start":12,"column_end":16},"name":"Loop","qualname":"::relax::Loop","value":"","parent":null,"children":[],"decl_id":null,"docs":" A strategy that rapidly spins, without telling the CPU to do any powering down.","sig":null,"attributes":[{"value":"/ A strategy that rapidly spins, without telling the CPU to do any powering down.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":105237,"byte_end":105320,"line_start":48,"line_end":48,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":105321,"byte_end":105324,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ You almost certainly do not want to use this. Use [`Spin`] instead. It exists for completeness and for targets","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":105325,"byte_end":105439,"line_start":50,"line_end":50,"column_start":1,"column_end":115}},{"value":"/ that, for some reason, miscompile or do not support spin hint intrinsics despite attempting to generate code for","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":105440,"byte_end":105556,"line_start":51,"line_end":51,"column_start":1,"column_end":117}},{"value":"/ them (i.e: this is a workaround for possible compiler bugs).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":105557,"byte_end":105621,"line_start":52,"line_end":52,"column_start":1,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":664},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":3884,"byte_end":3891,"line_start":101,"line_end":101,"column_start":10,"column_end":17},"name":"Barrier","qualname":"::Barrier","value":"crate::barrier::Barrier","parent":null,"children":[],"decl_id":null,"docs":" A primitive that synchronizes the execution of multiple threads. See [`barrier::Barrier`] for documentation.","sig":null,"attributes":[{"value":"/ A primitive that synchronizes the execution of multiple threads. See [`barrier::Barrier`] for documentation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":3466,"byte_end":3578,"line_start":95,"line_end":95,"column_start":1,"column_end":113}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":3579,"byte_end":3582,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":3583,"byte_end":3694,"line_start":97,"line_end":97,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":3695,"byte_end":3795,"line_start":98,"line_end":98,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"barrier\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":3796,"byte_end":3823,"line_start":99,"line_end":99,"column_start":1,"column_end":28}}]},{"kind":"Type","id":{"krate":0,"index":665},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4311,"byte_end":4315,"line_start":109,"line_end":109,"column_start":10,"column_end":14},"name":"Lazy","qualname":"::Lazy","value":"crate::lazy::Lazy<T, F>","parent":null,"children":[],"decl_id":null,"docs":" A value which is initialized on the first access. See [`lazy::Lazy`] for documentation.","sig":null,"attributes":[{"value":"/ A value which is initialized on the first access. See [`lazy::Lazy`] for documentation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":3920,"byte_end":4011,"line_start":103,"line_end":103,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4012,"byte_end":4015,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4016,"byte_end":4127,"line_start":105,"line_end":105,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4128,"byte_end":4228,"line_start":106,"line_end":106,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"lazy\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4229,"byte_end":4253,"line_start":107,"line_end":107,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":668},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4772,"byte_end":4777,"line_start":117,"line_end":117,"column_start":10,"column_end":15},"name":"Mutex","qualname":"::Mutex","value":"crate::mutex::Mutex<T>","parent":null,"children":[],"decl_id":null,"docs":" A primitive that synchronizes the execution of multiple threads. See [`mutex::Mutex`] for documentation.","sig":null,"attributes":[{"value":"/ A primitive that synchronizes the execution of multiple threads. See [`mutex::Mutex`] for documentation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4362,"byte_end":4470,"line_start":111,"line_end":111,"column_start":1,"column_end":109}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4471,"byte_end":4474,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4475,"byte_end":4586,"line_start":113,"line_end":113,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4587,"byte_end":4687,"line_start":114,"line_end":114,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"mutex\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4688,"byte_end":4713,"line_start":115,"line_end":115,"column_start":1,"column_end":26}}]},{"kind":"Type","id":{"krate":0,"index":670},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5205,"byte_end":5209,"line_start":125,"line_end":125,"column_start":10,"column_end":14},"name":"Once","qualname":"::Once","value":"crate::once::Once<T>","parent":null,"children":[],"decl_id":null,"docs":" A primitive that provides lazy one-time initialization. See [`once::Once`] for documentation.","sig":null,"attributes":[{"value":"/ A primitive that provides lazy one-time initialization. See [`once::Once`] for documentation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4808,"byte_end":4905,"line_start":119,"line_end":119,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4906,"byte_end":4909,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":4910,"byte_end":5021,"line_start":121,"line_end":121,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5022,"byte_end":5122,"line_start":122,"line_end":122,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"once\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5123,"byte_end":5147,"line_start":123,"line_end":123,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":672},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5663,"byte_end":5669,"line_start":133,"line_end":133,"column_start":10,"column_end":16},"name":"RwLock","qualname":"::RwLock","value":"crate::rwlock::RwLock<T>","parent":null,"children":[],"decl_id":null,"docs":" A lock that provides data access to either one writer or many readers. See [`rwlock::RwLock`] for documentation.","sig":null,"attributes":[{"value":"/ A lock that provides data access to either one writer or many readers. See [`rwlock::RwLock`] for documentation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5243,"byte_end":5359,"line_start":127,"line_end":127,"column_start":1,"column_end":117}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5360,"byte_end":5363,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5364,"byte_end":5475,"line_start":129,"line_end":129,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5476,"byte_end":5576,"line_start":130,"line_end":130,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5577,"byte_end":5603,"line_start":131,"line_end":131,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":674},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6159,"byte_end":6180,"line_start":142,"line_end":142,"column_start":10,"column_end":31},"name":"RwLockUpgradableGuard","qualname":"::RwLockUpgradableGuard","value":"crate::rwlock::RwLockUpgradableGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`]. See\n [`rwlock::RwLockUpgradableGuard`] for documentation.","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`]. See","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5702,"byte_end":5798,"line_start":135,"line_end":135,"column_start":1,"column_end":97}},{"value":"/ [`rwlock::RwLockUpgradableGuard`] for documentation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5799,"byte_end":5855,"line_start":136,"line_end":136,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5856,"byte_end":5859,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5860,"byte_end":5971,"line_start":138,"line_end":138,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":5972,"byte_end":6072,"line_start":139,"line_end":139,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6073,"byte_end":6099,"line_start":140,"line_end":140,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":677},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6638,"byte_end":6654,"line_start":150,"line_end":150,"column_start":10,"column_end":26},"name":"RwLockWriteGuard","qualname":"::RwLockWriteGuard","value":"crate::rwlock::RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides mutable data access. See [`rwlock::RwLockWriteGuard`] for documentation.","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access. See [`rwlock::RwLockWriteGuard`] for documentation.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6236,"byte_end":6334,"line_start":144,"line_end":144,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6335,"byte_end":6338,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ A note for advanced users: this alias exists to avoid subtle type inference errors due to the default relax","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6339,"byte_end":6450,"line_start":146,"line_end":146,"column_start":1,"column_end":112}},{"value":"/ strategy type parameter. If you need a non-default relax strategy, use the fully-qualified path.","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6451,"byte_end":6551,"line_start":147,"line_end":147,"column_start":1,"column_end":101}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6552,"byte_end":6578,"line_start":148,"line_end":148,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":680},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6900,"byte_end":6908,"line_start":155,"line_end":155,"column_start":9,"column_end":17},"name":"lock_api","qualname":"::lock_api","value":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":683},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":691},{"krate":0,"index":694}],"decl_id":null,"docs":" Spin synchronisation primitives, but compatible with [`lock_api`](https://crates.io/crates/lock_api).\n","sig":null,"attributes":[{"value":"/ Spin synchronisation primitives, but compatible with [`lock_api`](https://crates.io/crates/lock_api).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6705,"byte_end":6810,"line_start":152,"line_end":152,"column_start":1,"column_end":106}},{"value":"cfg(feature = \"lock_api\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6811,"byte_end":6839,"line_start":153,"line_end":153,"column_start":1,"column_end":29}}]},{"kind":"Type","id":{"krate":0,"index":681},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":7134,"byte_end":7139,"line_start":159,"line_end":159,"column_start":14,"column_end":19},"name":"Mutex","qualname":"::lock_api::Mutex","value":"lock_api_crate::Mutex<crate::Mutex<()>, T>","parent":null,"children":[],"decl_id":null,"docs":" A lock that provides mutually exclusive data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A lock that provides mutually exclusive data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":6915,"byte_end":7037,"line_start":156,"line_end":156,"column_start":5,"column_end":127}},{"value":"cfg(feature = \"mutex\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":7042,"byte_end":7067,"line_start":157,"line_end":157,"column_start":5,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":683},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":7403,"byte_end":7413,"line_start":164,"line_end":164,"column_start":14,"column_end":24},"name":"MutexGuard","qualname":"::lock_api::MutexGuard","value":"lock_api_crate::MutexGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides mutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":7194,"byte_end":7306,"line_start":161,"line_end":161,"column_start":5,"column_end":117}},{"value":"cfg(feature = \"mutex\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":7311,"byte_end":7336,"line_start":162,"line_end":162,"column_start":5,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":686},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":7720,"byte_end":7726,"line_start":169,"line_end":169,"column_start":14,"column_end":20},"name":"RwLock","qualname":"::lock_api::RwLock","value":"lock_api_crate::RwLock<crate::RwLock<()>, T>","parent":null,"children":[],"decl_id":null,"docs":" A lock that provides data access to either one writer or many readers (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A lock that provides data access to either one writer or many readers (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":7481,"byte_end":7621,"line_start":166,"line_end":166,"column_start":5,"column_end":145}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":7626,"byte_end":7652,"line_start":167,"line_end":167,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":688},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":7996,"byte_end":8011,"line_start":174,"line_end":174,"column_start":14,"column_end":29},"name":"RwLockReadGuard","qualname":"::lock_api::RwLockReadGuard","value":"lock_api_crate::RwLockReadGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides immutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":7783,"byte_end":7897,"line_start":171,"line_end":171,"column_start":5,"column_end":119}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":7902,"byte_end":7928,"line_start":172,"line_end":172,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":691},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":8296,"byte_end":8312,"line_start":179,"line_end":179,"column_start":14,"column_end":30},"name":"RwLockWriteGuard","qualname":"::lock_api::RwLockWriteGuard","value":"lock_api_crate::RwLockWriteGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides mutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A guard that provides mutable data access (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":8085,"byte_end":8197,"line_start":176,"line_end":176,"column_start":5,"column_end":117}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":8202,"byte_end":8228,"line_start":177,"line_end":177,"column_start":5,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":694},"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":8644,"byte_end":8669,"line_start":184,"line_end":184,"column_start":14,"column_end":39},"name":"RwLockUpgradableReadGuard","qualname":"::lock_api::RwLockUpgradableReadGuard","value":"lock_api_crate::RwLockUpgradableReadGuard","parent":null,"children":[],"decl_id":null,"docs":" A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`] (compatible with [`lock_api`](https://crates.io/crates/lock_api)).\n","sig":null,"attributes":[{"value":"/ A guard that provides immutable data access but can be upgraded to [`RwLockWriteGuard`] (compatible with [`lock_api`](https://crates.io/crates/lock_api)).","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":8387,"byte_end":8545,"line_start":181,"line_end":181,"column_start":5,"column_end":163}},{"value":"cfg(feature = \"rwlock\")","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":8550,"byte_end":8576,"line_start":182,"line_end":182,"column_start":5,"column_end":31}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10838,"byte_end":10845,"line_start":72,"line_end":72,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":27}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":12944,"byte_end":12951,"line_start":135,"line_end":135,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13669,"byte_end":13686,"line_start":162,"line_end":162,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16779,"byte_end":16783,"line_start":46,"line_end":46,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":64}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17235,"byte_end":17239,"line_start":57,"line_end":57,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17319,"byte_end":17323,"line_start":60,"line_end":60,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17966,"byte_end":17970,"line_start":76,"line_end":76,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18623,"byte_end":18627,"line_start":99,"line_end":99,"column_start":55,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18756,"byte_end":18760,"line_start":107,"line_end":107,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30298,"byte_end":30307,"line_start":77,"line_end":77,"column_start":40,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30353,"byte_end":30362,"line_start":78,"line_end":78,"column_start":40,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30381,"byte_end":30390,"line_start":80,"line_end":80,"column_start":12,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32227,"byte_end":32236,"line_start":148,"line_end":148,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":147}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33401,"byte_end":33410,"line_start":181,"line_end":181,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36051,"byte_end":36060,"line_start":254,"line_end":254,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36429,"byte_end":36438,"line_start":265,"line_end":265,"column_start":42,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36544,"byte_end":36553,"line_start":271,"line_end":271,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36646,"byte_end":36660,"line_start":277,"line_end":277,"column_start":21,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37365,"byte_end":37379,"line_start":298,"line_end":298,"column_start":49,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37545,"byte_end":37559,"line_start":304,"line_end":304,"column_start":53,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37705,"byte_end":37719,"line_start":310,"line_end":310,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37838,"byte_end":37852,"line_start":317,"line_end":317,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37958,"byte_end":37972,"line_start":323,"line_end":323,"column_start":30,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":38237,"byte_end":38246,"line_start":331,"line_end":331,"column_start":60,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22219,"byte_end":22224,"line_start":103,"line_end":103,"column_start":43,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22276,"byte_end":22281,"line_start":104,"line_end":104,"column_start":43,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22682,"byte_end":22687,"line_start":117,"line_end":117,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":250},{"krate":0,"index":251}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23490,"byte_end":23495,"line_start":152,"line_end":152,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":255}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24188,"byte_end":24193,"line_start":175,"line_end":175,"column_start":20,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":259},{"krate":0,"index":260},{"krate":0,"index":261},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26271,"byte_end":26276,"line_start":239,"line_end":239,"column_start":48,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26434,"byte_end":26439,"line_start":245,"line_end":245,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26545,"byte_end":26550,"line_start":251,"line_end":251,"column_start":24,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26643,"byte_end":26653,"line_start":257,"line_end":257,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27202,"byte_end":27212,"line_start":276,"line_end":276,"column_start":49,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27378,"byte_end":27388,"line_start":282,"line_end":282,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27534,"byte_end":27544,"line_start":288,"line_end":288,"column_start":31,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":291},{"krate":0,"index":292}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27666,"byte_end":27676,"line_start":295,"line_end":295,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27848,"byte_end":27853,"line_start":302,"line_end":302,"column_start":60,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43779,"byte_end":43783,"line_start":37,"line_end":37,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43874,"byte_end":43878,"line_start":41,"line_end":41,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":44304,"byte_end":44308,"line_start":54,"line_end":54,"column_start":41,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":44351,"byte_end":44355,"line_start":55,"line_end":55,"column_start":34,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":45019,"byte_end":45025,"line_start":76,"line_end":76,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":45340,"byte_end":45352,"line_start":87,"line_end":87,"column_start":10,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47293,"byte_end":47297,"line_start":128,"line_end":128,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":384},{"krate":0,"index":388},{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58027,"byte_end":58031,"line_start":354,"line_end":354,"column_start":12,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62944,"byte_end":62948,"line_start":472,"line_end":472,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":63049,"byte_end":63053,"line_start":478,"line_end":478,"column_start":21,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":63480,"byte_end":63486,"line_start":494,"line_end":494,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72723,"byte_end":72729,"line_start":108,"line_end":108,"column_start":43,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72788,"byte_end":72794,"line_start":109,"line_end":109,"column_start":50,"column_end":56},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72816,"byte_end":72822,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74645,"byte_end":74651,"line_start":174,"line_end":174,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77080,"byte_end":77086,"line_start":247,"line_end":247,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":509},{"krate":0,"index":510},{"krate":0,"index":511}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83479,"byte_end":83485,"line_start":420,"line_end":420,"column_start":48,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":515}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83856,"byte_end":83862,"line_start":431,"line_end":431,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83968,"byte_end":83974,"line_start":437,"line_end":437,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":525}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84072,"byte_end":84087,"line_start":443,"line_end":443,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":529}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84644,"byte_end":84659,"line_start":462,"line_end":462,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84835,"byte_end":84850,"line_start":468,"line_end":468,"column_start":58,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85014,"byte_end":85035,"line_start":474,"line_end":474,"column_start":44,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85652,"byte_end":85673,"line_start":496,"line_end":496,"column_start":29,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88514,"byte_end":88535,"line_start":588,"line_end":588,"column_start":57,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88717,"byte_end":88738,"line_start":594,"line_end":594,"column_start":61,"column_end":82},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88890,"byte_end":88906,"line_start":600,"line_end":600,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91433,"byte_end":91449,"line_start":679,"line_end":679,"column_start":57,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91631,"byte_end":91647,"line_start":685,"line_end":685,"column_start":61,"column_end":77},"value":"","parent":null,"children":[{"krate":0,"index":577}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91806,"byte_end":91821,"line_start":691,"line_end":691,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":581},{"krate":0,"index":582}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91951,"byte_end":91972,"line_start":699,"line_end":699,"column_start":39,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":92105,"byte_end":92121,"line_start":707,"line_end":707,"column_start":39,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":92257,"byte_end":92273,"line_start":715,"line_end":715,"column_start":42,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":599}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":92392,"byte_end":92407,"line_start":721,"line_end":721,"column_start":35,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":92634,"byte_end":92655,"line_start":728,"line_end":728,"column_start":38,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":92940,"byte_end":92956,"line_start":738,"line_end":738,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":93806,"byte_end":93812,"line_start":765,"line_end":765,"column_start":61,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":623},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":627}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":95125,"byte_end":95131,"line_start":818,"line_end":818,"column_start":68,"column_end":74},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":96324,"byte_end":96330,"line_start":862,"line_end":862,"column_start":70,"column_end":76},"value":"","parent":null,"children":[{"krate":0,"index":639}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":104450,"byte_end":104454,"line_start":23,"line_end":23,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":105663,"byte_end":105667,"line_start":55,"line_end":55,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2392,"byte_end":2399,"line_start":65,"line_end":65,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2482,"byte_end":2486,"line_start":68,"line_end":68,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":33}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2571,"byte_end":2576,"line_start":71,"line_end":71,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":90}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":19681,"byte_end":19685,"line_start":18,"line_end":18,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":91}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2659,"byte_end":2663,"line_start":74,"line_end":74,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":305}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2750,"byte_end":2756,"line_start":77,"line_end":77,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":419}},{"kind":"Mod","span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lib.rs","byte_start":2766,"byte_end":2771,"line_start":78,"line_end":78,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":640}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":10838,"byte_end":10845,"line_start":72,"line_end":72,"column_start":24,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":15},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":12944,"byte_end":12951,"line_start":135,"line_end":135,"column_start":9,"column_end":16},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":15},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/barrier.rs","byte_start":13669,"byte_end":13686,"line_start":162,"line_end":162,"column_start":6,"column_end":23},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":22},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":16779,"byte_end":16783,"line_start":46,"line_end":46,"column_start":42,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":54},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17235,"byte_end":17239,"line_start":57,"line_end":57,"column_start":34,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":54},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17319,"byte_end":17323,"line_start":60,"line_end":60,"column_start":15,"column_end":19},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":54},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":17966,"byte_end":17970,"line_start":76,"line_end":76,"column_start":45,"column_end":49},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":54},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18623,"byte_end":18627,"line_start":99,"line_end":99,"column_start":55,"column_end":59},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":54},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/lazy.rs","byte_start":18756,"byte_end":18760,"line_start":107,"line_end":107,"column_start":33,"column_end":37},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":54},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30298,"byte_end":30307,"line_start":77,"line_end":77,"column_start":40,"column_end":49},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":123},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30353,"byte_end":30362,"line_start":78,"line_end":78,"column_start":40,"column_end":49},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":123},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":30381,"byte_end":30390,"line_start":80,"line_end":80,"column_start":12,"column_end":21},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":32227,"byte_end":32236,"line_start":148,"line_end":148,"column_start":35,"column_end":44},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":33401,"byte_end":33410,"line_start":181,"line_end":181,"column_start":20,"column_end":29},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":123},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36051,"byte_end":36060,"line_start":254,"line_end":254,"column_start":48,"column_end":57},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":123},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36429,"byte_end":36438,"line_start":265,"line_end":265,"column_start":42,"column_end":51},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":123},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36544,"byte_end":36553,"line_start":271,"line_end":271,"column_start":24,"column_end":33},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":123},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":36646,"byte_end":36660,"line_start":277,"line_end":277,"column_start":21,"column_end":35},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":129},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37365,"byte_end":37379,"line_start":298,"line_end":298,"column_start":49,"column_end":63},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":129},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37545,"byte_end":37559,"line_start":304,"line_end":304,"column_start":53,"column_end":67},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":129},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37705,"byte_end":37719,"line_start":310,"line_end":310,"column_start":31,"column_end":45},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":129},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37838,"byte_end":37852,"line_start":317,"line_end":317,"column_start":34,"column_end":48},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":129},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":37958,"byte_end":37972,"line_start":323,"line_end":323,"column_start":30,"column_end":44},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":129},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex/spin.rs","byte_start":38237,"byte_end":38246,"line_start":331,"line_end":331,"column_start":60,"column_end":69},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":123},"to":{"krate":4,"index":32}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22219,"byte_end":22224,"line_start":103,"line_end":103,"column_start":43,"column_end":48},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":233},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22276,"byte_end":22281,"line_start":104,"line_end":104,"column_start":43,"column_end":48},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":233},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":22682,"byte_end":22687,"line_start":117,"line_end":117,"column_start":12,"column_end":17},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":23490,"byte_end":23495,"line_start":152,"line_end":152,"column_start":35,"column_end":40},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":24188,"byte_end":24193,"line_start":175,"line_end":175,"column_start":20,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":233},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26271,"byte_end":26276,"line_start":239,"line_end":239,"column_start":48,"column_end":53},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":233},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26434,"byte_end":26439,"line_start":245,"line_end":245,"column_start":42,"column_end":47},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":233},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26545,"byte_end":26550,"line_start":251,"line_end":251,"column_start":24,"column_end":29},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":233},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":26643,"byte_end":26653,"line_start":257,"line_end":257,"column_start":21,"column_end":31},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":243},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27202,"byte_end":27212,"line_start":276,"line_end":276,"column_start":49,"column_end":59},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27378,"byte_end":27388,"line_start":282,"line_end":282,"column_start":53,"column_end":63},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27534,"byte_end":27544,"line_start":288,"line_end":288,"column_start":31,"column_end":41},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27666,"byte_end":27676,"line_start":295,"line_end":295,"column_start":34,"column_end":44},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":243},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/mutex.rs","byte_start":27848,"byte_end":27853,"line_start":302,"line_end":302,"column_start":60,"column_end":65},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":233},"to":{"krate":4,"index":32}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43779,"byte_end":43783,"line_start":37,"line_end":37,"column_start":24,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":333},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":43874,"byte_end":43878,"line_start":41,"line_end":41,"column_start":39,"column_end":43},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":333},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":44304,"byte_end":44308,"line_start":54,"line_end":54,"column_start":41,"column_end":45},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":333},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":44351,"byte_end":44355,"line_start":55,"line_end":55,"column_start":34,"column_end":38},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":333},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":45019,"byte_end":45025,"line_start":76,"line_end":76,"column_start":10,"column_end":16},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":697},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":45340,"byte_end":45352,"line_start":87,"line_end":87,"column_start":10,"column_end":22},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":357},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":47293,"byte_end":47297,"line_start":128,"line_end":128,"column_start":27,"column_end":31},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":58027,"byte_end":58031,"line_start":354,"line_end":354,"column_start":12,"column_end":16},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":333},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":62944,"byte_end":62948,"line_start":472,"line_end":472,"column_start":24,"column_end":28},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":333},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":63049,"byte_end":63053,"line_start":478,"line_end":478,"column_start":21,"column_end":25},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":333},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/once.rs","byte_start":63480,"byte_end":63486,"line_start":494,"line_end":494,"column_start":19,"column_end":25},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":413},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72723,"byte_end":72729,"line_start":108,"line_end":108,"column_start":43,"column_end":49},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72788,"byte_end":72794,"line_start":109,"line_end":109,"column_start":50,"column_end":56},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":72816,"byte_end":72822,"line_start":111,"line_end":111,"column_start":12,"column_end":18},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":74645,"byte_end":74651,"line_start":174,"line_end":174,"column_start":35,"column_end":41},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":77080,"byte_end":77086,"line_start":247,"line_end":247,"column_start":20,"column_end":26},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83479,"byte_end":83485,"line_start":420,"line_end":420,"column_start":48,"column_end":54},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83856,"byte_end":83862,"line_start":431,"line_end":431,"column_start":42,"column_end":48},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":83968,"byte_end":83974,"line_start":437,"line_end":437,"column_start":24,"column_end":30},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":454},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84072,"byte_end":84087,"line_start":443,"line_end":443,"column_start":26,"column_end":41},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84644,"byte_end":84659,"line_start":462,"line_end":462,"column_start":54,"column_end":69},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":463},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":84835,"byte_end":84850,"line_start":468,"line_end":468,"column_start":58,"column_end":73},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":463},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85014,"byte_end":85035,"line_start":474,"line_end":474,"column_start":44,"column_end":65},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":85652,"byte_end":85673,"line_start":496,"line_end":496,"column_start":29,"column_end":50},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":475},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88514,"byte_end":88535,"line_start":588,"line_end":588,"column_start":57,"column_end":78},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":475},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88717,"byte_end":88738,"line_start":594,"line_end":594,"column_start":61,"column_end":82},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":475},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":88890,"byte_end":88906,"line_start":600,"line_end":600,"column_start":29,"column_end":45},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91433,"byte_end":91449,"line_start":679,"line_end":679,"column_start":57,"column_end":73},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":468},"to":{"krate":1,"index":9553}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91631,"byte_end":91647,"line_start":685,"line_end":685,"column_start":61,"column_end":77},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":468},"to":{"krate":1,"index":9560}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91806,"byte_end":91821,"line_start":691,"line_end":691,"column_start":36,"column_end":51},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":463},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":91951,"byte_end":91972,"line_start":699,"line_end":699,"column_start":39,"column_end":60},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":475},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":92105,"byte_end":92121,"line_start":707,"line_end":707,"column_start":39,"column_end":55},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":468},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":92257,"byte_end":92273,"line_start":715,"line_end":715,"column_start":42,"column_end":58},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":468},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":92392,"byte_end":92407,"line_start":721,"line_end":721,"column_start":35,"column_end":50},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":463},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":92634,"byte_end":92655,"line_start":728,"line_end":728,"column_start":38,"column_end":59},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":475},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":92940,"byte_end":92956,"line_start":738,"line_end":738,"column_start":38,"column_end":54},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":468},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":93806,"byte_end":93812,"line_start":765,"line_end":765,"column_start":61,"column_end":67},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":454},"to":{"krate":4,"index":512}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":95125,"byte_end":95131,"line_start":818,"line_end":818,"column_start":68,"column_end":74},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":454},"to":{"krate":4,"index":543}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/rwlock.rs","byte_start":96324,"byte_end":96330,"line_start":862,"line_end":862,"column_start":70,"column_end":76},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":454},"to":{"krate":4,"index":528}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":104450,"byte_end":104454,"line_start":23,"line_end":23,"column_start":24,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":643},"to":{"krate":0,"index":641}},{"span":{"file_name":"/home/lichi/.cargo/registry/src/github.com-1ecc6299db9ec823/spin-0.9.3/src/relax.rs","byte_start":105663,"byte_end":105667,"line_start":55,"line_end":55,"column_start":24,"column_end":28},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":647},"to":{"krate":0,"index":641}}]}